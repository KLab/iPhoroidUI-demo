org.klab.avex_sp.AboutActivity -> org.klab.avex_sp.AboutActivity:
    org.klab.avex_sp.CustomApplication application -> d
    android.widget.ImageView imageView -> e
    android.widget.TextView textView -> a
    android.widget.ScrollView scrollView -> b
    java.lang.String about -> c
    java.lang.Thread thread -> f
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onPause() -> onPause
org.klab.avex_sp.AboutActivity$1 -> org.klab.avex_sp.gh:
    org.klab.avex_sp.AboutActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.AboutActivity$2 -> org.klab.avex_sp.gj:
    org.klab.avex_sp.AboutActivity this$0 -> a
    void run() -> run
org.klab.avex_sp.AboutActivity$2$1 -> org.klab.avex_sp.bx:
    org.klab.avex_sp.AboutActivity$2 this$1 -> a
    int val$p -> b
    void run() -> run
org.klab.avex_sp.AboutActivity$2$1$1 -> org.klab.avex_sp.gf:
    org.klab.avex_sp.AboutActivity$2$1 this$2 -> a
    void run() -> run
org.klab.avex_sp.AboutAppActivity -> org.klab.avex_sp.AboutAppActivity:
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
org.klab.avex_sp.AuthorityError0Activity -> org.klab.avex_sp.AuthorityError0Activity:
    android.widget.Button loginAgainBtn -> a
    android.widget.Button cancelBtn -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.AuthorityError1Activity -> org.klab.avex_sp.AuthorityError1Activity:
    android.widget.Button loginAgainBtn -> a
    android.widget.Button cancelBtn -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.ChangeProfileUtil -> org.klab.avex_sp.ea:
    java.text.SimpleDateFormat sdf1 -> h
    java.text.SimpleDateFormat sdf2 -> i
    int mYear -> a
    int mMonth -> b
    int mDay -> c
    java.lang.String mBirthday -> d
    java.lang.String address -> e
    java.lang.String job -> f
    java.lang.String channel -> g
    java.lang.String convertStringDate(java.lang.String) -> a
    java.util.Date convertString2Date(java.lang.String) -> b
    void BirthdayDialog(android.content.Context,android.widget.Button) -> a
    int getYear() -> a
    int getMonth() -> b
    int getDay() -> c
    void AddressDialog(android.content.Context,android.widget.Button) -> b
    java.lang.String getAddress() -> d
    void JobDialog(android.content.Context,android.widget.Button) -> c
    java.lang.String getJob() -> e
    void ChannelDialog(android.content.Context,android.widget.Button) -> d
    java.lang.String getChannel() -> f
    void updateButton(android.widget.Button,java.lang.String) -> a
org.klab.avex_sp.ChangeProfileUtil$1 -> org.klab.avex_sp.dg:
    android.widget.Button val$btn -> a
    void onDateSet(android.widget.DatePicker,int,int,int) -> onDateSet
org.klab.avex_sp.ChangeProfileUtil$2 -> org.klab.avex_sp.dl:
    java.lang.CharSequence[] val$prefecture -> a
    android.widget.Button val$btn -> b
    void onClick(android.content.DialogInterface,int) -> onClick
org.klab.avex_sp.ChangeProfileUtil$3 -> org.klab.avex_sp.dm:
    java.lang.CharSequence[] val$works -> a
    android.widget.Button val$btn -> b
    void onClick(android.content.DialogInterface,int) -> onClick
org.klab.avex_sp.ChangeProfileUtil$4 -> org.klab.avex_sp.di:
    java.lang.CharSequence[] val$kikkake -> a
    android.widget.Button val$btn -> b
    void onClick(android.content.DialogInterface,int) -> onClick
org.klab.avex_sp.CoverFlowImageAdapter -> org.klab.avex_sp.em:
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    android.widget.Gallery$LayoutParams access$0(org.klab.avex_sp.CoverFlowImageAdapter) -> a
    android.graphics.Bitmap access$1$3259a8bc(android.graphics.Bitmap,int,int) -> b
    boolean access$2(org.klab.avex_sp.CoverFlowImageAdapter) -> b
    int access$3() -> a
    android.graphics.Bitmap access$4$4309c81b(android.graphics.Bitmap,int) -> b
org.klab.avex_sp.CoverFlowImageAdapter$1 -> org.klab.avex_sp.bj:
    org.klab.avex_sp.CoverFlowImageAdapter this$0 -> a
    android.widget.ImageView val$view -> b
    java.lang.String val$url -> c
    void showProgress() -> a
    void dismissProgress() -> b
    void setResult(java.lang.Object) -> a
org.klab.avex_sp.CustomApplication -> org.klab.avex_sp.CustomApplication:
    java.lang.String VERSION_CODE -> a
    int PROTOCOL_CODE -> b
    org.klab.avex_sp.CustomApplication instance -> c
    android.view.Display display -> d
    org.klab.avex_sp.Preferences preferences -> e
    org.klab.avex_sp.TemporaryPreferences temporaryPreferences -> f
    org.klab.avex_sp.api.task.ApiRequestTaskFactory apiRequestTaskFactory -> g
    java.lang.Class getLoginPageActivityClass() -> a
    boolean isLoggedIn() -> b
    void logout() -> c
    org.klab.avex_sp.Preferences getPreferences() -> d
    org.klab.avex_sp.TemporaryPreferences getTemporaryPreferences() -> e
    java.lang.String getUserAgent() -> f
    org.klab.avex_sp.api.task.ApiRequestTaskFactory getApiRequestTaskFactory() -> g
    java.lang.String getMccMnc() -> h
    org.klab.avex_sp.CustomApplication getInstance() -> i
    void onCreate() -> onCreate
org.klab.avex_sp.CustomLoginActivity -> org.klab.avex_sp.as:
    org.klab.avex_sp.CustomLoginActivity$CustomLoginCycle loginCycle -> a
    void onResume() -> onResume
    void processLogin(android.content.Intent) -> a
    android.app.Activity getActivity() -> a
org.klab.avex_sp.CustomLoginActivity$1 -> org.klab.avex_sp.hd:
    org.klab.avex_sp.CustomLoginActivity this$0 -> a
    org.klab.avex_sp.CustomApplication val$application -> b
    android.content.Intent val$intent -> c
    void onFail(org.klab.avex_sp.api.task.ErrorType,java.lang.Exception,java.lang.Object) -> a
    void onSuccess(java.lang.Object) -> a
org.klab.avex_sp.CustomLoginActivity$CustomLoginCycle -> org.klab.avex_sp.fn:
    android.content.Intent intent -> a
    org.klab.avex_sp.CustomLoginActivity this$0 -> b
    void setIntent(android.content.Intent) -> a
    android.content.Intent getIntent() -> d
org.klab.avex_sp.DialogUtil -> org.klab.avex_sp.hl:
    void showNetworkErrorDialog$554ebe2(android.content.Context) -> a
    void showSystemErrorDialogWithShortLog(android.content.Context,java.lang.Throwable) -> a
    void showConfirmDialog(android.content.Context,int,int) -> a
    void showConfirmDialog(android.content.Context,int,int,android.view.View$OnClickListener) -> a
    void showConfirmDialog(android.content.Context,int,int,int,android.view.View$OnClickListener) -> a
    void showConfirmDialog(android.content.Context,java.lang.String,java.lang.String,java.lang.String,android.view.View$OnClickListener) -> a
    void showYesNoDialog(android.content.Context,int,int,int,int,org.klab.avex_sp.DialogUtil$OnYesNoClickListener) -> a
    void showYesNoDialog(android.content.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.klab.avex_sp.DialogUtil$OnYesNoClickListener) -> a
    boolean handleApiError$70b68aa6(android.app.Activity,org.klab.avex_sp.api.task.ErrorType) -> a
org.klab.avex_sp.DialogUtil$1 -> org.klab.avex_sp.hg:
    android.view.View$OnClickListener val$listener -> a
    android.app.Dialog val$dialog -> b
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.DialogUtil$2 -> org.klab.avex_sp.hh:
    org.klab.avex_sp.DialogUtil$OnYesNoClickListener val$listener -> a
    android.app.Dialog val$dialog -> b
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.DialogUtil$3 -> org.klab.avex_sp.hi:
    org.klab.avex_sp.DialogUtil$OnYesNoClickListener val$listener -> a
    android.app.Dialog val$dialog -> b
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.DialogUtil$OnYesNoClickListener -> org.klab.avex_sp.bo:
    void onYesClick$3c7ec8c3() -> a
    void onNoClick$3c7ec8c3() -> b
org.klab.avex_sp.DownloadTask -> org.klab.avex_sp.bh:
    android.app.ProgressDialog progressDialog -> a
    android.content.Context mContext -> b
    void showProgress() -> a
    void dismissProgress() -> b
    java.lang.Object download(java.lang.Object[]) -> a
    void setResult(java.lang.Object) -> a
    void onPreExecute() -> onPreExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    void onPostExecute(java.lang.Object) -> onPostExecute
org.klab.avex_sp.DownloadTask$DefaultDawnloadTask -> org.klab.avex_sp.cs:
    android.content.Context context -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
org.klab.avex_sp.HasImage -> org.klab.avex_sp.ga:
    int getScrollState() -> c
org.klab.avex_sp.HasImage$AdapterViewOnScrollListener -> org.klab.avex_sp.bi:
    int scrollState -> a
    int getScrollState() -> a
    void onScrollStateChanged(android.widget.AdapterView,int) -> a
org.klab.avex_sp.HasImage$ListViewOnScrollListener -> org.klab.avex_sp.hc:
    int scrollState -> a
    int getScrollState() -> a
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
org.klab.avex_sp.HasImage$Util -> org.klab.avex_sp.r:
    java.util.Map tasks -> a
    java.util.concurrent.Executor executor -> b
    java.util.Map imageViewsOfActivity -> c
    void setImage(android.content.Context,java.lang.String,android.widget.ImageView,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable) -> a
    void setImage(android.content.Context,java.lang.String,android.widget.ImageView,android.graphics.drawable.Drawable,android.os.AsyncTask,java.lang.String) -> a
    void setImage(android.content.Context,java.lang.String,android.widget.ImageView,org.klab.avex_sp.HasImage$Util$LoadingImageHelper,org.klab.avex_sp.ImageDownloadTask$ImageDownloadHelper) -> a
    void setImage(android.content.Context,java.lang.String,android.widget.ImageView,org.klab.avex_sp.HasImage$Util$LoadingImageHelper,android.os.AsyncTask,java.lang.String) -> a
    void recycleImages(android.view.ViewGroup) -> a
    void recycleImages() -> a
    void getChildImageViews(android.view.ViewGroup,java.util.Set) -> a
    boolean isUsed(android.graphics.Bitmap) -> a
    java.util.Set getImageViewsOfActivities() -> c
    void setImageViewsOfActivity(android.app.Activity) -> a
    void clearImageViewsOfActivity(android.app.Activity) -> b
    void setImageViewsOfActivity(android.view.ViewGroup,int) -> a
    void clearImageViewsOfActivity(int) -> a
    void access$0(android.view.ViewGroup) -> b
    void access$1() -> b
org.klab.avex_sp.HasImage$Util$1 -> org.klab.avex_sp.ds:
    android.view.ViewGroup val$viewGroup -> a
    void run() -> run
org.klab.avex_sp.HasImage$Util$DefaultLoadingImageHelper -> org.klab.avex_sp.ee:
    android.graphics.drawable.Drawable loadingDrawable -> a
    void setLoadingImage(android.widget.ImageView) -> a
org.klab.avex_sp.HasImage$Util$LoadingImageHelper -> org.klab.avex_sp.c:
    void setLoadingImage(android.widget.ImageView) -> a
org.klab.avex_sp.HomeActivity -> org.klab.avex_sp.HomeActivity:
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.IconText -> org.klab.avex_sp.gy:
    int iconResource -> a
    java.lang.String text -> b
    int getIconResource() -> a
    java.lang.String getText() -> b
org.klab.avex_sp.IconTextAdapter -> org.klab.avex_sp.ew:
    android.view.LayoutInflater inflater -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
org.klab.avex_sp.IconTextAdapter$ViewHolder -> org.klab.avex_sp.af:
    android.view.ViewGroup wrapperView -> a
    android.widget.TextView textView -> b
    android.widget.ImageView imageView -> c
org.klab.avex_sp.ImageDownloadTask -> org.klab.avex_sp.fl:
    android.widget.ImageView imageView -> a
    java.lang.Integer tag -> b
    int queueInCount -> c
    int executeCount -> d
    int cancelCount -> e
    int doneCount -> f
    int errorCount -> g
    int runningCount -> h
    org.klab.avex_sp.ImageDownloadTask$ImageDownloadHelper imageDownloadHelper -> i
    android.graphics.Bitmap doInBackground(java.lang.String[]) -> a
    void onCancelled() -> onCancelled
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.klab.avex_sp.ImageDownloadTask$DefaultImageDownloadHelper -> org.klab.avex_sp.hv:
    android.graphics.drawable.Drawable noImageDrawable -> a
    void onLoadingDone(android.widget.ImageView) -> a
    void setNoImage(android.widget.ImageView) -> b
org.klab.avex_sp.ImageDownloadTask$ImageDownloadHelper -> org.klab.avex_sp.o:
    void onLoadingDone(android.widget.ImageView) -> a
    void setNoImage(android.widget.ImageView) -> b
org.klab.avex_sp.InfoActivity -> org.klab.avex_sp.InfoActivity:
    java.lang.String $(int) -> a
    void onCreate(android.os.Bundle) -> onCreate
org.klab.avex_sp.InfoActivity$1 -> org.klab.avex_sp.b:
    org.klab.avex_sp.InfoActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.klab.avex_sp.InfoItemAdapter -> org.klab.avex_sp.bu:
    android.view.LayoutInflater inflater -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void processListViewOnClick(org.klab.avex_sp.model.InfoItem) -> a
    void processTwitterButtonOnClick(org.klab.avex_sp.model.InfoItem) -> b
org.klab.avex_sp.InfoItemAdapter$1 -> org.klab.avex_sp.ab:
    org.klab.avex_sp.InfoItemAdapter this$0 -> a
    org.klab.avex_sp.model.InfoItem val$item -> b
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.InfoItemAdapter$2 -> org.klab.avex_sp.aa:
    org.klab.avex_sp.InfoItemAdapter this$0 -> a
    org.klab.avex_sp.model.InfoItem val$item -> b
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.InfoItemAdapter$ViewHolder -> org.klab.avex_sp.av:
    android.widget.TextView publishDateTextView -> a
    android.widget.TextView titleTextView -> b
    android.widget.Button twitterButton -> c
org.klab.avex_sp.InfoNewsItemAdapter -> org.klab.avex_sp.fi:
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
org.klab.avex_sp.InfoNewsItemAdapter$1 -> org.klab.avex_sp.d:
    org.klab.avex_sp.InfoNewsItemAdapter this$0 -> a
    org.klab.avex_sp.model.InfoItem val$item -> b
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.InfoNewsItemAdapter$2 -> org.klab.avex_sp.f:
    org.klab.avex_sp.InfoNewsItemAdapter this$0 -> a
    org.klab.avex_sp.model.InfoItem val$item -> b
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.InfoNewsItemAdapter$ViewHolder -> org.klab.avex_sp.gc:
    android.widget.ImageView newIconImageView -> d
org.klab.avex_sp.Info_NewsActivity -> org.klab.avex_sp.Info_NewsActivity:
    android.widget.Button newsButton -> a
    android.widget.Button scheduleButton -> b
    android.widget.ListView listView -> c
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void load() -> a
    void access$0(org.klab.avex_sp.Info_NewsActivity) -> a
    android.widget.ListView access$2(org.klab.avex_sp.Info_NewsActivity) -> b
org.klab.avex_sp.Info_NewsActivity$1 -> org.klab.avex_sp.dh:
    org.klab.avex_sp.Info_NewsActivity this$0 -> a
    void onReloadMenuItemCkick() -> a
org.klab.avex_sp.Info_NewsActivity$2 -> org.klab.avex_sp.dj:
    org.klab.avex_sp.Info_NewsActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.Info_NewsActivity$3 -> org.klab.avex_sp.dk:
    org.klab.avex_sp.Info_NewsActivity this$0 -> a
    java.lang.Object download(java.lang.Object[]) -> a
    void setResult(java.lang.Object) -> a
org.klab.avex_sp.Info_NewsActivity$3$1 -> org.klab.avex_sp.gi:
    org.klab.avex_sp.Info_NewsActivity$3 this$1 -> b
    void processListViewOnClick(org.klab.avex_sp.model.InfoItem) -> a
    void processTwitterButtonOnClick(org.klab.avex_sp.model.InfoItem) -> b
org.klab.avex_sp.Info_NewsDetailActivity -> org.klab.avex_sp.Info_NewsDetailActivity:
    android.widget.TextView titleTextView -> a
    android.webkit.WebView descriptionTextView -> b
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
org.klab.avex_sp.Info_ProfileActivity -> org.klab.avex_sp.Info_ProfileActivity:
    org.klab.avex_sp.CustomApplication application -> a
    android.webkit.WebView profileTextView -> b
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    android.webkit.WebView access$0(org.klab.avex_sp.Info_ProfileActivity) -> a
org.klab.avex_sp.Info_ProfileActivity$1 -> org.klab.avex_sp.hz:
    org.klab.avex_sp.Info_ProfileActivity this$0 -> a
    java.lang.Object download(java.lang.Object[]) -> a
    void setResult(java.lang.Object) -> a
org.klab.avex_sp.Info_ScheduleActivity -> org.klab.avex_sp.Info_ScheduleActivity:
    android.widget.Button newsButton -> a
    android.widget.Button scheduleButton -> b
    android.widget.ListView listView -> c
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void load() -> a
    void access$0(org.klab.avex_sp.Info_ScheduleActivity) -> a
    android.widget.ListView access$2(org.klab.avex_sp.Info_ScheduleActivity) -> b
org.klab.avex_sp.Info_ScheduleActivity$1 -> org.klab.avex_sp.l:
    org.klab.avex_sp.Info_ScheduleActivity this$0 -> a
    void onReloadMenuItemCkick() -> a
org.klab.avex_sp.Info_ScheduleActivity$2 -> org.klab.avex_sp.k:
    org.klab.avex_sp.Info_ScheduleActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.Info_ScheduleActivity$3 -> org.klab.avex_sp.j:
    org.klab.avex_sp.Info_ScheduleActivity this$0 -> a
    java.lang.Object download(java.lang.Object[]) -> a
    void setResult(java.lang.Object) -> a
org.klab.avex_sp.Info_ScheduleActivity$3$1 -> org.klab.avex_sp.ac:
    org.klab.avex_sp.Info_ScheduleActivity$3 this$1 -> b
    void processListViewOnClick(org.klab.avex_sp.model.InfoItem) -> a
    void processTwitterButtonOnClick(org.klab.avex_sp.model.InfoItem) -> b
org.klab.avex_sp.Info_ScheduleDetailActivity -> org.klab.avex_sp.Info_ScheduleDetailActivity:
    android.widget.TextView titleTextView -> a
    android.webkit.WebView descriptionTextView -> b
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
org.klab.avex_sp.LauncherActivity -> org.klab.avex_sp.LauncherActivity:
    org.klab.avex_sp.CustomApplication application -> a
    void onCreate(android.os.Bundle) -> onCreate
org.klab.avex_sp.LoginActivity -> org.klab.avex_sp.LoginActivity:
    org.klab.avex_sp.CustomApplication application -> a
    android.widget.EditText eTextEdit -> b
    android.widget.EditText pTextEdit -> c
    android.widget.ToggleButton toggleAutoLoginButton -> d
    android.widget.TextView reminderLink -> e
    android.widget.TextView norikaeTextView -> f
    android.widget.Button loginButton -> g
    android.widget.Button registerpageButton -> h
    android.widget.Button norikaeButton -> i
    android.widget.Button cancelButton -> j
    java.lang.String loginId -> k
    java.lang.String passwd -> l
    boolean judge -> m
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    void validate() -> a
    void access$0(org.klab.avex_sp.LoginActivity) -> a
    org.klab.avex_sp.CustomApplication access$1(org.klab.avex_sp.LoginActivity) -> b
org.klab.avex_sp.LoginActivity$1 -> org.klab.avex_sp.dp:
    org.klab.avex_sp.LoginActivity this$0 -> a
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
org.klab.avex_sp.LoginActivity$2 -> org.klab.avex_sp.do:
    org.klab.avex_sp.LoginActivity this$0 -> a
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
org.klab.avex_sp.LoginActivity$3 -> org.klab.avex_sp.dn:
    org.klab.avex_sp.LoginActivity this$0 -> a
    java.lang.String val$password -> b
    void onFail(org.klab.avex_sp.api.task.ErrorType,java.lang.Exception,java.lang.Object) -> a
    void onSuccess(java.lang.Object) -> a
org.klab.avex_sp.LoginCycle -> org.klab.avex_sp.a:
    boolean isLoggedIn -> a
    org.klab.avex_sp.model.PurchaseStatus purchaseStatus -> b
    boolean afterLogin -> c
    void setLoggedIn(boolean) -> a
    boolean isLoggedIn() -> a
    void setAfterLogin(boolean) -> b
    boolean isAfterLogin() -> b
    void setPurchaseStatus(org.klab.avex_sp.model.PurchaseStatus) -> a
    org.klab.avex_sp.model.PurchaseStatus getPurchaseStatus() -> c
org.klab.avex_sp.LoginRequiredActivity -> org.klab.avex_sp.LoginRequiredActivity:
    org.klab.avex_sp.CustomApplication application -> b
    boolean isFinished -> a
    void onResume() -> onResume
    void onRestart() -> onRestart
    android.app.Activity getActivity() -> b
    boolean isChargeStateSatisfied(org.klab.avex_sp.model.PurchaseStatus) -> a
    java.lang.Class getActivityWithoutPurchaseStatus() -> c
    void execute() -> a
org.klab.avex_sp.LoginRequiredActivity$1 -> org.klab.avex_sp.da:
    org.klab.avex_sp.LoginRequiredActivity this$0 -> a
    org.klab.avex_sp.TemporaryPreferences val$tempPreferences -> b
    void onFail(org.klab.avex_sp.api.task.ErrorType,java.lang.Exception,java.lang.Object) -> a
    void onSuccess(java.lang.Object) -> a
org.klab.avex_sp.MainActivity -> org.klab.avex_sp.MainActivity:
    org.klab.avex_sp.CustomApplication application -> e
    android.graphics.drawable.Drawable loadingIcon -> a
    android.graphics.drawable.Drawable loadingCoverflowIcon -> b
    android.graphics.drawable.Drawable noImageIcon -> c
    android.graphics.drawable.Drawable noImageCoverflowIcon -> d
    java.lang.String $(int) -> a
    void onCreate(android.os.Bundle) -> onCreate
    android.widget.TabHost$TabSpec createTabSpec$476e3478(android.widget.TabHost,int,java.lang.String,java.lang.Class,boolean) -> a
    org.klab.avex_sp.CustomApplication access$0(org.klab.avex_sp.MainActivity) -> a
org.klab.avex_sp.MainActivity$1 -> org.klab.avex_sp.ap:
    org.klab.avex_sp.MainActivity this$0 -> a
    void onFail(org.klab.avex_sp.api.task.ErrorType,java.lang.Exception,java.lang.Object) -> a
    void onSuccess(java.lang.Object) -> a
org.klab.avex_sp.MainActivity$1$1 -> org.klab.avex_sp.h:
    org.klab.avex_sp.MainActivity$1 this$1 -> a
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.MoreActivity -> org.klab.avex_sp.MoreActivity:
    java.lang.String $(int) -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> onListItemClick
org.klab.avex_sp.MoreContactAndContractAboutActivity -> org.klab.avex_sp.MoreContactAndContractAboutActivity:
    java.lang.String $(int) -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.klab.avex_sp.MoreContactAndContractActivity -> org.klab.avex_sp.MoreContactAndContractActivity:
    java.lang.String $(int) -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.klab.avex_sp.MoreContactAndContractCopyrightActivity -> org.klab.avex_sp.MoreContactAndContractCopyrightActivity:
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
org.klab.avex_sp.MoreContactAndContractFaqActivity -> org.klab.avex_sp.MoreContactAndContractFaqActivity:
    java.lang.String $(int) -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.klab.avex_sp.MoreContactAndContractFaqDetailActivity -> org.klab.avex_sp.MoreContactAndContractFaqDetailActivity:
    android.widget.ListView listView -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    android.widget.ListView access$0(org.klab.avex_sp.MoreContactAndContractFaqDetailActivity) -> a
org.klab.avex_sp.MoreContactAndContractFaqDetailActivity$1 -> org.klab.avex_sp.et:
    org.klab.avex_sp.MoreContactAndContractFaqDetailActivity this$0 -> a
    int val$size -> b
    int val$defaultSelection -> c
    java.lang.Object download(java.lang.Object[]) -> a
    void setResult(java.lang.Object) -> a
org.klab.avex_sp.MoreContactAndContractFaqDetailAdapter -> org.klab.avex_sp.cl:
    android.view.LayoutInflater inflater -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
org.klab.avex_sp.MoreContactAndContractFaqDetailAdapter$ViewHolder -> org.klab.avex_sp.db:
    android.widget.TextView questionTextView -> a
    android.widget.TextView answerTextView -> b
org.klab.avex_sp.MoreContactAndContractFaqListActivity -> org.klab.avex_sp.MoreContactAndContractFaqListActivity:
    android.widget.ListView listView -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void load() -> a
    void access$0(org.klab.avex_sp.MoreContactAndContractFaqListActivity) -> a
    android.widget.ListView access$2(org.klab.avex_sp.MoreContactAndContractFaqListActivity) -> b
org.klab.avex_sp.MoreContactAndContractFaqListActivity$1 -> org.klab.avex_sp.dt:
    org.klab.avex_sp.MoreContactAndContractFaqListActivity this$0 -> a
    void onReloadMenuItemCkick() -> a
org.klab.avex_sp.MoreContactAndContractFaqListActivity$2 -> org.klab.avex_sp.dq:
    org.klab.avex_sp.MoreContactAndContractFaqListActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.klab.avex_sp.MoreContactAndContractFaqListActivity$3 -> org.klab.avex_sp.dr:
    org.klab.avex_sp.MoreContactAndContractFaqListActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.MoreContactAndContractFaqListActivity$4 -> org.klab.avex_sp.dw:
    org.klab.avex_sp.MoreContactAndContractFaqListActivity this$0 -> a
    java.lang.Object download(java.lang.Object[]) -> a
    void setResult(java.lang.Object) -> a
org.klab.avex_sp.MoreContactAndContractFaqListActivity$4$1 -> org.klab.avex_sp.cw:
    org.klab.avex_sp.MoreContactAndContractFaqListActivity$4 this$1 -> a
    java.util.List getItemsOnRefresh(int) -> a
org.klab.avex_sp.MoreContactAndContractFaqListAdapter -> org.klab.avex_sp.w:
    android.view.LayoutInflater inflater -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
org.klab.avex_sp.MoreContactAndContractFaqListAdapter$ViewHolder -> org.klab.avex_sp.e:
    android.widget.TextView questionTextView -> a
    void access$1(org.klab.avex_sp.MoreContactAndContractFaqListAdapter$ViewHolder,android.widget.TextView) -> a
    android.widget.TextView access$2(org.klab.avex_sp.MoreContactAndContractFaqListAdapter$ViewHolder) -> a
org.klab.avex_sp.MoreContactAndContractLegalActivity -> org.klab.avex_sp.MoreContactAndContractLegalActivity:
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
org.klab.avex_sp.More_GoodsActivity -> org.klab.avex_sp.More_GoodsActivity:
    org.klab.avex_sp.HasImage$ListViewOnScrollListener onScrollListener -> a
    android.widget.ListView listView -> b
    int getScrollState() -> c
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void load() -> a
    void onResume() -> onResume
    void onPause() -> onPause
    void onDestroy() -> onDestroy
    void access$0(org.klab.avex_sp.More_GoodsActivity) -> a
    android.widget.ListView access$2(org.klab.avex_sp.More_GoodsActivity) -> b
org.klab.avex_sp.More_GoodsActivity$1 -> org.klab.avex_sp.fr:
    org.klab.avex_sp.More_GoodsActivity this$0 -> a
    void onReloadMenuItemCkick() -> a
org.klab.avex_sp.More_GoodsActivity$2 -> org.klab.avex_sp.ft:
    org.klab.avex_sp.More_GoodsActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.klab.avex_sp.More_GoodsActivity$3 -> org.klab.avex_sp.fs:
    org.klab.avex_sp.More_GoodsActivity this$0 -> a
    java.lang.Object download(java.lang.Object[]) -> a
    void setResult(java.lang.Object) -> a
org.klab.avex_sp.More_GoodsAdapter -> org.klab.avex_sp.dx:
    java.text.DecimalFormat dformat -> a
    android.view.LayoutInflater inflater -> b
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
org.klab.avex_sp.More_GoodsAdapter$ViewHolder -> org.klab.avex_sp.bn:
    android.widget.TextView dateTextView -> a
    android.widget.TextView nameTextView -> b
    android.widget.TextView priceTextView -> c
    android.widget.ImageView imageView -> d
    android.widget.ImageView kodagumiImageView -> e
org.klab.avex_sp.More_GoodsDetailActivity -> org.klab.avex_sp.More_GoodsDetailActivity:
    java.text.DecimalFormat yenFormat -> a
    android.widget.TextView nameTextView -> b
    android.widget.TextView priceTextView -> c
    android.widget.TextView dateTextView -> d
    android.widget.TextView noTextView -> e
    android.widget.ImageView imageView -> f
    android.widget.Button purchaseButton -> g
    org.klab.avex_sp.model.More_GoodsItem item -> h
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onPause() -> onPause
    void onDestroy() -> onDestroy
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.More_SettingsActivity -> org.klab.avex_sp.More_SettingsActivity:
    java.lang.String $(int) -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.klab.avex_sp.More_Settings_AccountActivity -> org.klab.avex_sp.More_Settings_AccountActivity:
    android.widget.Button signInButton -> a
    android.widget.Button signOutButton -> b
    android.widget.EditText usernameEditText -> c
    android.widget.EditText passwordEditText -> d
    android.app.ProgressDialog progressDialog -> e
    java.lang.String service -> f
    org.klab.avex_sp.dao.ExteranlAppDao dao -> g
    boolean running -> h
    android.view.View$OnClickListener finisher -> i
    java.lang.String $(int) -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void setButtonState() -> a
    void onClick(android.view.View) -> onClick
    void access$0(org.klab.avex_sp.More_Settings_AccountActivity,android.app.ProgressDialog) -> a
    android.app.ProgressDialog access$1(org.klab.avex_sp.More_Settings_AccountActivity) -> a
    android.widget.Button access$2(org.klab.avex_sp.More_Settings_AccountActivity) -> b
    java.lang.String access$3(org.klab.avex_sp.More_Settings_AccountActivity,int) -> a
    java.lang.String access$4(org.klab.avex_sp.More_Settings_AccountActivity) -> c
    void access$5(org.klab.avex_sp.More_Settings_AccountActivity) -> d
    void access$6$7edb5503(org.klab.avex_sp.More_Settings_AccountActivity) -> e
org.klab.avex_sp.More_Settings_AccountActivity$1 -> org.klab.avex_sp.gv:
    org.klab.avex_sp.More_Settings_AccountActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.More_Settings_AccountActivity$2 -> org.klab.avex_sp.gw:
    org.klab.avex_sp.More_Settings_AccountActivity this$0 -> a
    boolean onKey(android.view.View,int,android.view.KeyEvent) -> onKey
org.klab.avex_sp.More_Settings_AccountActivity$3 -> org.klab.avex_sp.gu:
    org.klab.avex_sp.More_Settings_AccountActivity this$0 -> a
    boolean onKey(android.view.View,int,android.view.KeyEvent) -> onKey
org.klab.avex_sp.More_Settings_AccountActivity$SignInTask -> org.klab.avex_sp.n:
    android.content.Context context -> a
    org.klab.avex_sp.dao.ExteranlAppDao dao -> b
    java.lang.Exception exception -> c
    org.klab.avex_sp.More_Settings_AccountActivity this$0 -> d
    void onPreExecute() -> onPreExecute
    java.lang.Boolean doInBackground(java.lang.String[]) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.klab.avex_sp.More_Settings_AppActivity -> org.klab.avex_sp.More_Settings_AppActivity:
    org.klab.avex_sp.CustomApplication application -> a
    android.widget.Button logoinButton -> b
    android.widget.Button logoutButton -> c
    android.widget.Button addressButton -> d
    android.widget.Button passwordButton -> e
    android.widget.Button deleteButton -> f
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onClick(android.view.View) -> onClick
    org.klab.avex_sp.CustomApplication access$0(org.klab.avex_sp.More_Settings_AppActivity) -> a
org.klab.avex_sp.More_Settings_AppActivity$1 -> org.klab.avex_sp.bw:
    org.klab.avex_sp.More_Settings_AppActivity this$0 -> a
    void onYesClick$3c7ec8c3() -> a
    void onNoClick$3c7ec8c3() -> b
org.klab.avex_sp.More_Settings_AppActivity$1$1 -> org.klab.avex_sp.al:
    org.klab.avex_sp.More_Settings_AppActivity$1 this$1 -> a
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.More_Settings_ChangeProfileActivity -> org.klab.avex_sp.More_Settings_ChangeProfileActivity:
    org.klab.avex_sp.CustomApplication application -> b
    boolean isRegist -> c
    android.widget.EditText nickEdit -> d
    android.widget.EditText artist_jpEdit -> e
    android.widget.EditText artist_intEdit -> f
    android.widget.EditText kodagumiEdit -> g
    android.widget.Button norikaeBtn -> h
    android.widget.Button birthdayBtn -> i
    android.widget.Button addressBtn -> j
    android.widget.Button jobBtn -> k
    android.widget.Button channelBtn -> l
    android.widget.Button changeProfileBtn -> m
    android.widget.RadioGroup sexRadio -> n
    android.widget.ToggleButton mlToggle -> o
    int year -> p
    int month -> q
    int day -> r
    java.lang.String address -> s
    java.lang.String job -> t
    java.lang.String channel -> u
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void execute() -> a
    void onClick(android.view.View) -> onClick
    android.app.Activity getActivity() -> b
    boolean isChargeStateSatisfied(org.klab.avex_sp.model.PurchaseStatus) -> a
    android.widget.EditText access$0(org.klab.avex_sp.More_Settings_ChangeProfileActivity) -> a
    android.widget.EditText access$1(org.klab.avex_sp.More_Settings_ChangeProfileActivity) -> b
    android.widget.EditText access$2(org.klab.avex_sp.More_Settings_ChangeProfileActivity) -> c
    android.widget.EditText access$3(org.klab.avex_sp.More_Settings_ChangeProfileActivity) -> d
    android.widget.Button access$4(org.klab.avex_sp.More_Settings_ChangeProfileActivity) -> e
    android.widget.Button access$5(org.klab.avex_sp.More_Settings_ChangeProfileActivity) -> f
    android.widget.Button access$6(org.klab.avex_sp.More_Settings_ChangeProfileActivity) -> g
    android.widget.Button access$7(org.klab.avex_sp.More_Settings_ChangeProfileActivity) -> h
    android.widget.RadioGroup access$8(org.klab.avex_sp.More_Settings_ChangeProfileActivity) -> i
    android.widget.ToggleButton access$9(org.klab.avex_sp.More_Settings_ChangeProfileActivity) -> j
    boolean access$10(org.klab.avex_sp.More_Settings_ChangeProfileActivity) -> k
org.klab.avex_sp.More_Settings_ChangeProfileActivity$1 -> org.klab.avex_sp.go:
    org.klab.avex_sp.More_Settings_ChangeProfileActivity this$0 -> a
    void onFail(org.klab.avex_sp.api.task.ErrorType,java.lang.Exception,java.lang.Object) -> a
    void onSuccess(java.lang.Object) -> a
org.klab.avex_sp.More_Settings_ChangeProfileActivity$2 -> org.klab.avex_sp.gp:
    org.klab.avex_sp.More_Settings_ChangeProfileActivity this$0 -> a
    void onFail(org.klab.avex_sp.api.task.ErrorType,java.lang.Exception,java.lang.Object) -> a
    void onSuccess(java.lang.Object) -> a
org.klab.avex_sp.More_Settings_ChangeProfileActivity$2$1 -> org.klab.avex_sp.bs:
    org.klab.avex_sp.More_Settings_ChangeProfileActivity$2 this$1 -> a
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.More_Settings_ChangeProfileActivity$2$2 -> org.klab.avex_sp.bt:
    org.klab.avex_sp.More_Settings_ChangeProfileActivity$2 this$1 -> a
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.More_Settings_DeleteAccount -> org.klab.avex_sp.More_Settings_DeleteAccount:
    org.klab.avex_sp.CustomApplication application -> b
    java.util.EnumSet PURCHASED_STATUSES -> c
    android.widget.Button withdrawButton -> d
    android.widget.Button deleteButton -> e
    android.widget.Button cancelButton -> f
    android.widget.TextView norikaeText -> g
    android.widget.Button norikaeButton -> h
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onClick(android.view.View) -> onClick
    android.app.Activity getActivity() -> b
    boolean isChargeStateSatisfied(org.klab.avex_sp.model.PurchaseStatus) -> a
    org.klab.avex_sp.CustomApplication access$0(org.klab.avex_sp.More_Settings_DeleteAccount) -> a
org.klab.avex_sp.More_Settings_DeleteAccount$1 -> org.klab.avex_sp.bm:
    org.klab.avex_sp.More_Settings_DeleteAccount this$0 -> a
    void onYesClick$3c7ec8c3() -> a
    void onNoClick$3c7ec8c3() -> b
org.klab.avex_sp.More_Settings_DeleteAccount$1$1 -> org.klab.avex_sp.ia:
    org.klab.avex_sp.More_Settings_DeleteAccount$1 this$1 -> a
    void onFail(org.klab.avex_sp.api.task.ErrorType,java.lang.Exception,java.lang.Object) -> a
    void onSuccess(java.lang.Object) -> a
org.klab.avex_sp.More_Settings_DeleteAccount$1$1$1 -> org.klab.avex_sp.gr:
    org.klab.avex_sp.More_Settings_DeleteAccount$1$1 this$2 -> a
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.More_Settings_IssueActivity -> org.klab.avex_sp.More_Settings_IssueActivity:
    org.klab.avex_sp.CustomApplication application -> b
    android.widget.TextView switchId -> c
    android.widget.TextView switchPassword -> d
    android.widget.Button issue -> e
    java.lang.String $(int) -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void execute() -> a
    void onClick(android.view.View) -> onClick
    android.app.Activity getActivity() -> b
    boolean isChargeStateSatisfied(org.klab.avex_sp.model.PurchaseStatus) -> a
    android.widget.TextView access$0(org.klab.avex_sp.More_Settings_IssueActivity) -> a
    android.widget.TextView access$1(org.klab.avex_sp.More_Settings_IssueActivity) -> b
    android.widget.Button access$2(org.klab.avex_sp.More_Settings_IssueActivity) -> c
org.klab.avex_sp.More_Settings_IssueActivity$1 -> org.klab.avex_sp.ev:
    org.klab.avex_sp.More_Settings_IssueActivity this$0 -> a
    void onFail(org.klab.avex_sp.api.task.ErrorType,java.lang.Exception,java.lang.Object) -> a
    void onSuccess(java.lang.Object) -> a
org.klab.avex_sp.More_Settings_MemberActivity -> org.klab.avex_sp.More_Settings_MemberActivity:
    java.text.SimpleDateFormat sdf -> b
    org.klab.avex_sp.CustomApplication application -> c
    android.widget.Button confirmButton -> d
    android.widget.Button confirmChargeButton -> e
    java.lang.String $(int) -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    android.app.Activity getActivity() -> b
    boolean isChargeStateSatisfied(org.klab.avex_sp.model.PurchaseStatus) -> a
    void access$0(org.klab.avex_sp.More_Settings_MemberActivity,java.util.Date,java.util.Date,org.klab.avex_sp.model.PurchaseStatus) -> a
org.klab.avex_sp.More_Settings_MemberActivity$1 -> org.klab.avex_sp.gz:
    org.klab.avex_sp.More_Settings_MemberActivity this$0 -> a
    void onFail$2039a33f$6ae751bc(org.klab.avex_sp.api.task.ErrorType) -> a
    void onFail(org.klab.avex_sp.api.task.ErrorType,java.lang.Exception,java.lang.Object) -> a
    void onSuccess(java.lang.Object) -> a
org.klab.avex_sp.More_Settings_NorikaeActivity -> org.klab.avex_sp.More_Settings_NorikaeActivity:
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    android.app.Activity getActivity() -> b
    boolean isChargeStateSatisfied(org.klab.avex_sp.model.PurchaseStatus) -> a
org.klab.avex_sp.More_Settings_NorikaeCompletedActivity -> org.klab.avex_sp.More_Settings_NorikaeCompletedActivity:
    java.text.SimpleDateFormat sdf -> a
    org.klab.avex_sp.CustomApplication application -> b
    android.widget.TextView nickTv -> c
    android.widget.TextView sexTv -> d
    android.widget.TextView birthdayTv -> e
    android.widget.TextView placeTv -> f
    android.widget.TextView jobTv -> g
    android.widget.TextView admissionDateTv -> h
    android.widget.TextView memberNumberTv -> i
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    void access$0(org.klab.avex_sp.More_Settings_NorikaeCompletedActivity,boolean,java.lang.String) -> a
    java.lang.String access$1(org.klab.avex_sp.More_Settings_NorikaeCompletedActivity,int) -> a
    android.widget.TextView access$2(org.klab.avex_sp.More_Settings_NorikaeCompletedActivity) -> a
    android.widget.TextView access$3(org.klab.avex_sp.More_Settings_NorikaeCompletedActivity) -> b
    android.widget.TextView access$4(org.klab.avex_sp.More_Settings_NorikaeCompletedActivity) -> c
    android.widget.TextView access$5(org.klab.avex_sp.More_Settings_NorikaeCompletedActivity) -> d
    android.widget.TextView access$6(org.klab.avex_sp.More_Settings_NorikaeCompletedActivity) -> e
    android.widget.TextView access$7(org.klab.avex_sp.More_Settings_NorikaeCompletedActivity) -> f
    org.klab.avex_sp.CustomApplication access$8(org.klab.avex_sp.More_Settings_NorikaeCompletedActivity) -> g
    android.widget.TextView access$9(org.klab.avex_sp.More_Settings_NorikaeCompletedActivity) -> h
    java.text.SimpleDateFormat access$10() -> a
org.klab.avex_sp.More_Settings_NorikaeCompletedActivity$1 -> org.klab.avex_sp.bd:
    org.klab.avex_sp.More_Settings_NorikaeCompletedActivity this$0 -> a
    java.lang.String val$sessionKey -> b
    void onYesClick$3c7ec8c3() -> a
    void onNoClick$3c7ec8c3() -> b
org.klab.avex_sp.More_Settings_NorikaeCompletedActivity$2 -> org.klab.avex_sp.az:
    org.klab.avex_sp.More_Settings_NorikaeCompletedActivity this$0 -> a
    boolean val$subscribe -> b
    void onFail(org.klab.avex_sp.api.task.ErrorType,java.lang.Exception,java.lang.Object) -> a
    void onSuccess(java.lang.Object) -> a
org.klab.avex_sp.More_Settings_NorikaeCompletedActivity$2$1 -> org.klab.avex_sp.eu:
    org.klab.avex_sp.More_Settings_NorikaeCompletedActivity$2 this$1 -> a
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.More_Settings_NorikaeCompletedActivity$3 -> org.klab.avex_sp.aw:
    org.klab.avex_sp.More_Settings_NorikaeCompletedActivity this$0 -> a
    void onFail(org.klab.avex_sp.api.task.ErrorType,java.lang.Exception,java.lang.Object) -> a
    void onSuccess(java.lang.Object) -> a
org.klab.avex_sp.More_Settings_NorikaeCompletedActivity$4 -> org.klab.avex_sp.au:
    org.klab.avex_sp.More_Settings_NorikaeCompletedActivity this$0 -> a
    void onFail(org.klab.avex_sp.api.task.ErrorType,java.lang.Exception,java.lang.Object) -> a
    void onSuccess(java.lang.Object) -> a
org.klab.avex_sp.More_Settings_NorikaeInputActivity -> org.klab.avex_sp.More_Settings_NorikaeInputActivity:
    org.klab.avex_sp.CustomApplication application -> b
    android.widget.EditText idEdit -> c
    android.widget.EditText passEdit -> d
    android.widget.Button sendButton -> e
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    android.app.Activity getActivity() -> b
    boolean isChargeStateSatisfied(org.klab.avex_sp.model.PurchaseStatus) -> a
    void access$0(org.klab.avex_sp.More_Settings_NorikaeInputActivity) -> a
org.klab.avex_sp.More_Settings_NorikaeInputActivity$1 -> org.klab.avex_sp.gl:
    org.klab.avex_sp.More_Settings_NorikaeInputActivity this$0 -> a
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
org.klab.avex_sp.More_Settings_NorikaeInputActivity$2 -> org.klab.avex_sp.gk:
    org.klab.avex_sp.More_Settings_NorikaeInputActivity this$0 -> a
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
org.klab.avex_sp.More_Settings_NorikaeInputActivity$3 -> org.klab.avex_sp.gs:
    org.klab.avex_sp.More_Settings_NorikaeInputActivity this$0 -> a
    void onFail(org.klab.avex_sp.api.task.ErrorType,java.lang.Exception,java.lang.Object) -> a
    void onSuccess(java.lang.Object) -> a
org.klab.avex_sp.More_Settings_NorikaeInputActivity$3$1 -> org.klab.avex_sp.hw:
    org.klab.avex_sp.More_Settings_NorikaeInputActivity$3 this$1 -> a
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.More_Settings_PurchaseActivity -> org.klab.avex_sp.More_Settings_PurchaseActivity:
    android.widget.ListView listView -> a
    android.widget.Button clearButton -> b
    org.klab.avex_sp.dao.PurchaseSiteDao dao -> c
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void setChecked(int) -> a
    org.klab.avex_sp.dao.PurchaseSiteDao access$0(org.klab.avex_sp.More_Settings_PurchaseActivity) -> a
    void access$1(org.klab.avex_sp.More_Settings_PurchaseActivity,int) -> a
    void access$2(org.klab.avex_sp.More_Settings_PurchaseActivity) -> b
org.klab.avex_sp.More_Settings_PurchaseActivity$1 -> org.klab.avex_sp.cr:
    org.klab.avex_sp.More_Settings_PurchaseActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.More_Settings_PurchaseActivity$ListAdapter -> org.klab.avex_sp.cz:
    android.view.LayoutInflater inflater -> b
    org.klab.avex_sp.More_Settings_PurchaseActivity this$0 -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
org.klab.avex_sp.More_Settings_PurchaseActivity$ListAdapter$1 -> org.klab.avex_sp.he:
    org.klab.avex_sp.More_Settings_PurchaseActivity$ListAdapter this$1 -> a
    int val$position -> b
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.More_Settings_UpdateInfoActivity -> org.klab.avex_sp.More_Settings_UpdateInfoActivity:
    org.klab.avex_sp.CustomApplication application -> a
    android.widget.Button updateButton -> b
    android.widget.TextView updateText -> c
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    android.widget.Button access$0(org.klab.avex_sp.More_Settings_UpdateInfoActivity) -> a
    android.widget.TextView access$1(org.klab.avex_sp.More_Settings_UpdateInfoActivity) -> b
org.klab.avex_sp.More_Settings_UpdateInfoActivity$1 -> org.klab.avex_sp.dy:
    org.klab.avex_sp.More_Settings_UpdateInfoActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.More_Settings_UpdateInfoActivity$2 -> org.klab.avex_sp.dz:
    org.klab.avex_sp.More_Settings_UpdateInfoActivity this$0 -> a
    void onFail(org.klab.avex_sp.api.task.ErrorType,java.lang.Exception,java.lang.Object) -> a
    void onSuccess(java.lang.Object) -> a
org.klab.avex_sp.More_Settings_WithdrawActivity -> org.klab.avex_sp.More_Settings_WithdrawActivity:
    org.klab.avex_sp.CustomApplication application -> a
    android.widget.Button cancellationBtn -> b
    android.widget.Button withdrawBtn -> c
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onResume() -> onResume
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.More_Settings_changemailActivity -> org.klab.avex_sp.More_Settings_changemailActivity:
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    android.app.Activity getActivity() -> b
    boolean isChargeStateSatisfied(org.klab.avex_sp.model.PurchaseStatus) -> a
org.klab.avex_sp.More_Settings_changemailAuthenticationActivity -> org.klab.avex_sp.More_Settings_changemailAuthenticationActivity:
    org.klab.avex_sp.CustomApplication application -> a
    android.widget.TextView mailAddressText -> b
    android.widget.EditText passEdit -> c
    android.widget.Button changeBtn -> d
    java.lang.String magicKey -> e
    java.lang.String mailAddress -> f
    java.lang.String pass -> g
    boolean judge -> h
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void retrieveMailAddress() -> a
    void onClick(android.view.View) -> onClick
    void access$0(org.klab.avex_sp.More_Settings_changemailAuthenticationActivity) -> a
    void access$1(org.klab.avex_sp.More_Settings_changemailAuthenticationActivity) -> b
    void access$2(org.klab.avex_sp.More_Settings_changemailAuthenticationActivity,java.lang.String) -> a
    android.widget.TextView access$3(org.klab.avex_sp.More_Settings_changemailAuthenticationActivity) -> c
    java.lang.String access$4(org.klab.avex_sp.More_Settings_changemailAuthenticationActivity) -> d
    android.widget.Button access$5(org.klab.avex_sp.More_Settings_changemailAuthenticationActivity) -> e
    org.klab.avex_sp.CustomApplication access$6(org.klab.avex_sp.More_Settings_changemailAuthenticationActivity) -> f
    java.lang.String access$7(org.klab.avex_sp.More_Settings_changemailAuthenticationActivity,int) -> a
org.klab.avex_sp.More_Settings_changemailAuthenticationActivity$1 -> org.klab.avex_sp.hq:
    org.klab.avex_sp.More_Settings_changemailAuthenticationActivity this$0 -> a
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
org.klab.avex_sp.More_Settings_changemailAuthenticationActivity$2 -> org.klab.avex_sp.hr:
    org.klab.avex_sp.More_Settings_changemailAuthenticationActivity this$0 -> a
    void onFail(org.klab.avex_sp.api.task.ErrorType,java.lang.Exception,java.lang.Object) -> a
    void onSuccess(java.lang.Object) -> a
org.klab.avex_sp.More_Settings_changemailAuthenticationActivity$3 -> org.klab.avex_sp.hs:
    org.klab.avex_sp.More_Settings_changemailAuthenticationActivity this$0 -> a
    void onFail(org.klab.avex_sp.api.task.ErrorType,java.lang.Exception,java.lang.Object) -> a
    void onSuccess(java.lang.Object) -> a
org.klab.avex_sp.More_Settings_changemailAuthenticationActivity$4 -> org.klab.avex_sp.ht:
    org.klab.avex_sp.More_Settings_changemailAuthenticationActivity this$0 -> a
    void onFail(org.klab.avex_sp.api.task.ErrorType,java.lang.Exception,java.lang.Object) -> a
    void onSuccess(java.lang.Object) -> a
org.klab.avex_sp.More_Settings_changemailAuthenticationActivity$4$1 -> org.klab.avex_sp.er:
    org.klab.avex_sp.More_Settings_changemailAuthenticationActivity$4 this$1 -> a
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.More_Settings_changemailAuthenticationActivity$4$2 -> org.klab.avex_sp.eq:
    org.klab.avex_sp.More_Settings_changemailAuthenticationActivity$4 this$1 -> a
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.More_Settings_changemailAuthenticationActivity$4$3 -> org.klab.avex_sp.ep:
    org.klab.avex_sp.More_Settings_changemailAuthenticationActivity$4 this$1 -> a
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.More_Settings_changepassActivity -> org.klab.avex_sp.More_Settings_changepassActivity:
    org.klab.avex_sp.CustomApplication application -> b
    android.widget.EditText oldEdit -> c
    android.widget.EditText newpassEdit -> d
    android.widget.EditText newpassagainEdit -> e
    android.widget.TextView alert -> f
    android.widget.Button changeBtn -> g
    android.widget.Button cancelBtn -> h
    java.lang.String newpass -> i
    java.lang.String newpassagain -> j
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    android.app.Activity getActivity() -> b
    boolean isChargeStateSatisfied(org.klab.avex_sp.model.PurchaseStatus) -> a
    void access$0(org.klab.avex_sp.More_Settings_changepassActivity) -> a
    org.klab.avex_sp.CustomApplication access$1(org.klab.avex_sp.More_Settings_changepassActivity) -> b
    java.lang.String access$2(org.klab.avex_sp.More_Settings_changepassActivity) -> c
org.klab.avex_sp.More_Settings_changepassActivity$1 -> org.klab.avex_sp.ah:
    org.klab.avex_sp.More_Settings_changepassActivity this$0 -> a
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
org.klab.avex_sp.More_Settings_changepassActivity$2 -> org.klab.avex_sp.ai:
    org.klab.avex_sp.More_Settings_changepassActivity this$0 -> a
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
org.klab.avex_sp.More_Settings_changepassActivity$3 -> org.klab.avex_sp.aj:
    org.klab.avex_sp.More_Settings_changepassActivity this$0 -> a
    void onFail(org.klab.avex_sp.api.task.ErrorType,java.lang.Exception,java.lang.Object) -> a
    void onSuccess(java.lang.Object) -> a
org.klab.avex_sp.More_Settings_changepassActivity$3$1 -> org.klab.avex_sp.gn:
    org.klab.avex_sp.More_Settings_changepassActivity$3 this$1 -> a
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.More_TermsActivity -> org.klab.avex_sp.More_TermsActivity:
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
org.klab.avex_sp.MusicActivity -> org.klab.avex_sp.MusicActivity:
    java.lang.String $(int) -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> onListItemClick
org.klab.avex_sp.Music_DiscoActivity -> org.klab.avex_sp.Music_DiscoActivity:
    android.widget.Button discographyButton -> a
    android.widget.Button movieButton -> b
    android.widget.ImageButton coverflowButton -> c
    android.widget.ListView listView -> d
    android.widget.TextView releaseTextView -> e
    android.widget.TextView titleTextView -> f
    org.klab.avex_sp.widget.coverflow.CoverFlowGallery coverFlowGallery -> g
    int selection -> h
    org.klab.avex_sp.HasImage$ListViewOnScrollListener onScrollListener -> i
    org.klab.avex_sp.HasImage$AdapterViewOnScrollListener galleryOnScrollListener -> j
    int getScrollState() -> c
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void load() -> a
    void onResume() -> onResume
    void onPause() -> onPause
    void onDestroy() -> onDestroy
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void toDetail(org.klab.avex_sp.model.Music_Item) -> a
    void access$0(org.klab.avex_sp.Music_DiscoActivity) -> a
    void access$2(org.klab.avex_sp.Music_DiscoActivity) -> b
    android.widget.ListView access$3(org.klab.avex_sp.Music_DiscoActivity) -> c
    void access$4(org.klab.avex_sp.Music_DiscoActivity,org.klab.avex_sp.model.Music_Item) -> a
    int access$5(org.klab.avex_sp.Music_DiscoActivity) -> d
    org.klab.avex_sp.widget.coverflow.CoverFlowGallery access$6(org.klab.avex_sp.Music_DiscoActivity) -> e
org.klab.avex_sp.Music_DiscoActivity$1 -> org.klab.avex_sp.eb:
    org.klab.avex_sp.Music_DiscoActivity this$0 -> a
    void onReloadMenuItemCkick() -> a
org.klab.avex_sp.Music_DiscoActivity$2 -> org.klab.avex_sp.df:
    org.klab.avex_sp.Music_DiscoActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.Music_DiscoActivity$3 -> org.klab.avex_sp.de:
    org.klab.avex_sp.Music_DiscoActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.Music_DiscoActivity$4 -> org.klab.avex_sp.dd:
    org.klab.avex_sp.Music_DiscoActivity this$0 -> a
    java.lang.Object download(java.lang.Object[]) -> a
    void setResult(java.lang.Object) -> a
org.klab.avex_sp.Music_DiscoActivity$4$1 -> org.klab.avex_sp.ad:
    org.klab.avex_sp.Music_DiscoActivity$4 this$1 -> a
    void processListViewOnClick(org.klab.avex_sp.model.Music_Item) -> a
org.klab.avex_sp.Music_DiscoActivity$5 -> org.klab.avex_sp.dc:
    org.klab.avex_sp.Music_DiscoActivity this$0 -> a
    java.lang.Object download(java.lang.Object[]) -> a
    void setResult(java.lang.Object) -> a
org.klab.avex_sp.Music_DiscoAdapter -> org.klab.avex_sp.bz:
    android.view.LayoutInflater inflater -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void processListViewOnClick(org.klab.avex_sp.model.Music_Item) -> a
org.klab.avex_sp.Music_DiscoAdapter$1 -> org.klab.avex_sp.aq:
    org.klab.avex_sp.Music_DiscoAdapter this$0 -> a
    org.klab.avex_sp.model.Music_Item val$item -> b
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.Music_DiscoAdapter$ViewHolder -> org.klab.avex_sp.ar:
    android.widget.ImageView imageView -> a
    android.widget.TextView releaseTextView -> b
    android.widget.TextView productTextView -> c
    android.widget.TextView typeTextView -> d
org.klab.avex_sp.Music_DiscoCoverFlowActivity -> org.klab.avex_sp.Music_DiscoCoverFlowActivity:
    android.widget.TextView releaseTextView -> a
    android.widget.TextView titleTextView -> b
    org.klab.avex_sp.widget.coverflow.CoverFlowGallery coverFlowGallery -> c
    android.widget.ImageButton coverflowButton -> d
    int selection -> e
    org.klab.avex_sp.HasImage$AdapterViewOnScrollListener onScrollListener -> f
    int getScrollState() -> c
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void load() -> a
    void onResume() -> onResume
    void onPause() -> onPause
    void onDestroy() -> onDestroy
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
    void access$0(org.klab.avex_sp.Music_DiscoCoverFlowActivity) -> a
    org.klab.avex_sp.widget.coverflow.CoverFlowGallery access$1(org.klab.avex_sp.Music_DiscoCoverFlowActivity) -> b
    int access$2(org.klab.avex_sp.Music_DiscoCoverFlowActivity) -> c
org.klab.avex_sp.Music_DiscoCoverFlowActivity$1 -> org.klab.avex_sp.ek:
    org.klab.avex_sp.Music_DiscoCoverFlowActivity this$0 -> a
    void onReloadMenuItemCkick() -> a
org.klab.avex_sp.Music_DiscoCoverFlowActivity$2 -> org.klab.avex_sp.el:
    org.klab.avex_sp.Music_DiscoCoverFlowActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.Music_DiscoCoverFlowActivity$3 -> org.klab.avex_sp.eg:
    org.klab.avex_sp.Music_DiscoCoverFlowActivity this$0 -> a
    java.lang.Object download(java.lang.Object[]) -> a
    void setResult(java.lang.Object) -> a
org.klab.avex_sp.Music_DiscoDetailActivity -> org.klab.avex_sp.Music_DiscoDetailActivity:
    java.text.DecimalFormat yenFormat -> a
    android.widget.TextView nameTextView -> b
    android.widget.TextView priceTextView -> c
    android.widget.TextView dateTextView -> d
    android.widget.TextView idTextView -> e
    android.widget.ImageView imageView -> f
    android.widget.Button purchaseButton -> g
    android.view.ViewGroup musicListContainer -> h
    android.widget.ScrollView scrollView -> i
    org.klab.avex_sp.model.MusicDiscographyDetail discographyDetail -> j
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onPause() -> onPause
    void onDestroy() -> onDestroy
    void access$0(org.klab.avex_sp.Music_DiscoDetailActivity) -> a
    void access$1(org.klab.avex_sp.Music_DiscoDetailActivity,org.klab.avex_sp.model.MusicDiscographyDetail) -> a
    org.klab.avex_sp.model.MusicDiscographyDetail access$2(org.klab.avex_sp.Music_DiscoDetailActivity) -> b
    android.view.ViewGroup access$3(org.klab.avex_sp.Music_DiscoDetailActivity) -> c
    android.widget.ScrollView access$4(org.klab.avex_sp.Music_DiscoDetailActivity) -> d
org.klab.avex_sp.Music_DiscoDetailActivity$1 -> org.klab.avex_sp.ba:
    org.klab.avex_sp.Music_DiscoDetailActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.Music_DiscoDetailActivity$2 -> org.klab.avex_sp.ax:
    org.klab.avex_sp.Music_DiscoDetailActivity this$0 -> a
    org.klab.avex_sp.model.Music_Item val$item -> b
    java.lang.Object download(java.lang.Object[]) -> a
    void setResult(java.lang.Object) -> a
org.klab.avex_sp.Music_DiscoPurchaseActivity -> org.klab.avex_sp.Music_DiscoPurchaseActivity:
    org.klab.avex_sp.dao.PurchaseSiteDao dao -> a
    org.klab.avex_sp.model.MusicDiscographyDetail detail -> b
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> onListItemClick
    void toWeb(int,boolean) -> a
    org.klab.avex_sp.dao.PurchaseSiteDao access$0(org.klab.avex_sp.Music_DiscoPurchaseActivity) -> a
    void access$1(org.klab.avex_sp.Music_DiscoPurchaseActivity,int,boolean) -> a
org.klab.avex_sp.Music_DiscoPurchaseActivity$1 -> org.klab.avex_sp.hx:
    org.klab.avex_sp.Music_DiscoPurchaseActivity this$0 -> a
    int val$position -> b
    void onYesClick$3c7ec8c3() -> a
    void onNoClick$3c7ec8c3() -> b
org.klab.avex_sp.Music_MovieActivity -> org.klab.avex_sp.Music_MovieActivity:
    android.widget.Button discographyButton -> a
    android.widget.Button movieButton -> b
    android.widget.ListView listView -> c
    org.klab.avex_sp.HasImage$ListViewOnScrollListener onScrollListener -> d
    int getScrollState() -> c
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void load() -> a
    void onResume() -> onResume
    void onPause() -> onPause
    void onDestroy() -> onDestroy
    void access$0(org.klab.avex_sp.Music_MovieActivity) -> a
    android.widget.ListView access$2(org.klab.avex_sp.Music_MovieActivity) -> b
org.klab.avex_sp.Music_MovieActivity$1 -> org.klab.avex_sp.fq:
    org.klab.avex_sp.Music_MovieActivity this$0 -> a
    void onReloadMenuItemCkick() -> a
org.klab.avex_sp.Music_MovieActivity$2 -> org.klab.avex_sp.fp:
    org.klab.avex_sp.Music_MovieActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.Music_MovieActivity$3 -> org.klab.avex_sp.fo:
    org.klab.avex_sp.Music_MovieActivity this$0 -> a
    java.lang.Object download(java.lang.Object[]) -> a
    void setResult(java.lang.Object) -> a
org.klab.avex_sp.Music_MovieActivity$3$1 -> org.klab.avex_sp.fk:
    org.klab.avex_sp.Music_MovieActivity$3 this$1 -> a
    void processListViewOnClick(org.klab.avex_sp.model.MusicMovieItem) -> a
    void processImageButtonOnClick(org.klab.avex_sp.model.MusicMovieItem) -> b
org.klab.avex_sp.Music_MovieAdapter -> org.klab.avex_sp.es:
    android.view.LayoutInflater inflater -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void processListViewOnClick(org.klab.avex_sp.model.MusicMovieItem) -> a
    void processImageButtonOnClick(org.klab.avex_sp.model.MusicMovieItem) -> b
org.klab.avex_sp.Music_MovieAdapter$1 -> org.klab.avex_sp.hp:
    org.klab.avex_sp.Music_MovieAdapter this$0 -> a
    org.klab.avex_sp.model.MusicMovieItem val$item -> b
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.Music_MovieAdapter$2 -> org.klab.avex_sp.hu:
    org.klab.avex_sp.Music_MovieAdapter this$0 -> a
    org.klab.avex_sp.model.MusicMovieItem val$item -> b
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.Music_MovieAdapter$ViewHolder -> org.klab.avex_sp.gd:
    android.widget.ImageView imageView -> a
    android.widget.TextView productTextView -> b
    android.widget.TextView dulationTextView -> c
    android.widget.ImageView imageButton -> d
org.klab.avex_sp.Music_MovieDetailActivity -> org.klab.avex_sp.Music_MovieDetailActivity:
    android.widget.TextView nameTextView -> a
    android.widget.ImageView imageView -> b
    android.widget.TextView dataTextView -> c
    android.widget.TextView dateTextView -> d
    android.widget.TextView categoryTextView -> e
    android.widget.TextView tagTextView -> f
    org.klab.avex_sp.model.MusicMovieItem item -> g
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onPause() -> onPause
    void onDestroy() -> onDestroy
    void access$0(org.klab.avex_sp.Music_MovieDetailActivity) -> a
org.klab.avex_sp.Music_MovieDetailActivity$1 -> org.klab.avex_sp.at:
    org.klab.avex_sp.Music_MovieDetailActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.NewestMovieActivity -> org.klab.avex_sp.NewestMovieActivity:
    android.widget.VideoView videoView -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onPause() -> onPause
    void access$0(org.klab.avex_sp.NewestMovieActivity) -> a
    android.widget.VideoView access$1(org.klab.avex_sp.NewestMovieActivity) -> b
org.klab.avex_sp.NewestMovieActivity$1 -> org.klab.avex_sp.fb:
    org.klab.avex_sp.NewestMovieActivity this$0 -> a
    void onCompletion(android.media.MediaPlayer) -> onCompletion
org.klab.avex_sp.NewestMovieActivity$2 -> org.klab.avex_sp.ey:
    org.klab.avex_sp.NewestMovieActivity this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
org.klab.avex_sp.OnlymembersActivity -> org.klab.avex_sp.OnlymembersActivity:
    android.widget.Button loginBtn -> a
    android.widget.Button cancelBtn -> b
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.OptionsMenuUtil -> org.klab.avex_sp.be:
    void createOptionsMenu(android.content.Context,android.view.Menu,org.klab.avex_sp.OptionsMenuUtil$OnReloadMenuItemCkickListener) -> a
org.klab.avex_sp.OptionsMenuUtil$1 -> org.klab.avex_sp.fh:
    android.content.Context val$context -> a
    org.klab.avex_sp.OptionsMenuUtil$OnReloadMenuItemCkickListener val$reloadMenuItemCkickListener -> b
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.klab.avex_sp.OptionsMenuUtil$OnReloadMenuItemCkickListener -> org.klab.avex_sp.i:
    void onReloadMenuItemCkick() -> a
org.klab.avex_sp.PassReminderActivity -> org.klab.avex_sp.PassReminderActivity:
    android.widget.Button registerButton -> a
    android.widget.Button cancelButton -> b
    java.lang.String $(int) -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.PlayroomDetailActivity -> org.klab.avex_sp.ed:
    org.klab.avex_sp.HasImage$AdapterViewOnScrollListener onScrollListener -> a
    org.klab.avex_sp.widget.flowview.FlowView flowView -> b
    int selection -> c
    int getScrollState() -> c
    java.lang.String getCategory() -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onPause() -> onPause
    void onDestroy() -> onDestroy
    void access$0(org.klab.avex_sp.PlayroomDetailActivity,int) -> a
    int access$1(org.klab.avex_sp.PlayroomDetailActivity) -> a
    org.klab.avex_sp.widget.flowview.FlowView access$2(org.klab.avex_sp.PlayroomDetailActivity) -> b
org.klab.avex_sp.PlayroomDetailActivity$1 -> org.klab.avex_sp.br:
    org.klab.avex_sp.PlayroomDetailActivity this$0 -> a
    void onSwitched$5359dc9a(int) -> a
org.klab.avex_sp.PlayroomDetailActivity$2 -> org.klab.avex_sp.bq:
    org.klab.avex_sp.PlayroomDetailActivity this$0 -> a
    int val$size -> b
    int val$defaultSelection -> c
    java.lang.Object download(java.lang.Object[]) -> a
    void setResult(java.lang.Object) -> a
org.klab.avex_sp.PlayroomDetailAdapter -> org.klab.avex_sp.fe:
    android.content.Context context -> a
    android.view.LayoutInflater inflater -> b
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
org.klab.avex_sp.PlayroomDetailAdapter$ViewHolder -> org.klab.avex_sp.g:
    android.webkit.WebView webView -> a
org.klab.avex_sp.PlayroomItemAdapter -> org.klab.avex_sp.by:
    android.view.LayoutInflater inflater -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
org.klab.avex_sp.PlayroomItemAdapter$ViewHolder -> org.klab.avex_sp.ge:
    android.view.ViewGroup wrapper -> a
    android.widget.ImageView imageView -> b
    android.widget.ImageView newiconImageView -> c
    android.widget.TextView dateTextView -> d
    android.widget.TextView titleTextView -> e
org.klab.avex_sp.PlayroomListActivity -> org.klab.avex_sp.ca:
    org.klab.avex_sp.HasImage$ListViewOnScrollListener onScrollListener -> a
    android.widget.ListView listView -> b
    int getScrollState() -> c
    java.lang.Class getNextActivity() -> a_
    java.lang.String getCategory() -> b
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void load() -> d
    void onResume() -> onResume
    void onPause() -> onPause
    void onDestroy() -> onDestroy
    android.app.Activity getActivity() -> a
    void access$0(org.klab.avex_sp.PlayroomListActivity) -> a
    void access$1(org.klab.avex_sp.PlayroomListActivity,int,int) -> a
    android.widget.ListView access$2(org.klab.avex_sp.PlayroomListActivity) -> b
org.klab.avex_sp.PlayroomListActivity$1 -> org.klab.avex_sp.p:
    org.klab.avex_sp.PlayroomListActivity this$0 -> a
    void onReloadMenuItemCkick() -> a
org.klab.avex_sp.PlayroomListActivity$2 -> org.klab.avex_sp.q:
    org.klab.avex_sp.PlayroomListActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.klab.avex_sp.PlayroomListActivity$3 -> org.klab.avex_sp.s:
    org.klab.avex_sp.PlayroomListActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.PlayroomListActivity$4 -> org.klab.avex_sp.t:
    org.klab.avex_sp.PlayroomListActivity this$0 -> a
    java.lang.Object download(java.lang.Object[]) -> a
    void setResult(java.lang.Object) -> a
org.klab.avex_sp.PlayroomListActivity$4$1 -> org.klab.avex_sp.dv:
    org.klab.avex_sp.PlayroomListActivity$4 this$1 -> a
    java.util.List getItemsOnRefresh(int) -> a
org.klab.avex_sp.PlayroomPhotoDetailAdapter -> org.klab.avex_sp.cm:
    android.view.LayoutInflater inflater -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
org.klab.avex_sp.PlayroomPhotoDetailAdapter$1 -> org.klab.avex_sp.en:
    org.klab.avex_sp.PlayroomPhotoDetailAdapter this$0 -> a
    org.klab.avex_sp.PlayroomPhotoDetailAdapter$ViewHolder val$viewHolder -> b
    void setLoadingImage(android.widget.ImageView) -> a
org.klab.avex_sp.PlayroomPhotoDetailAdapter$2 -> org.klab.avex_sp.eo:
    org.klab.avex_sp.PlayroomPhotoDetailAdapter this$0 -> a
    org.klab.avex_sp.PlayroomPhotoDetailAdapter$ViewHolder val$viewHolder -> b
    void onLoadingDone(android.widget.ImageView) -> a
org.klab.avex_sp.PlayroomPhotoDetailAdapter$ViewHolder -> org.klab.avex_sp.du:
    android.widget.ImageView imageView -> a
    android.widget.ProgressBar progressBar -> b
org.klab.avex_sp.PlayroomPhotoGridAdapter -> org.klab.avex_sp.bp:
    android.view.LayoutInflater inflater -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
org.klab.avex_sp.PlayroomPhotoGridAdapter$1 -> org.klab.avex_sp.fm:
    org.klab.avex_sp.PlayroomPhotoGridAdapter this$0 -> a
    org.klab.avex_sp.PlayroomPhotoGridAdapter$ViewHolder val$viewHolder -> b
    int val$position -> c
    void showProgress() -> a
    void dismissProgress() -> b
    void setResult(java.lang.Object) -> a
org.klab.avex_sp.PlayroomPhotoGridAdapter$ViewHolder -> org.klab.avex_sp.gq:
    android.widget.ImageView imageView -> a
org.klab.avex_sp.Preferences -> org.klab.avex_sp.ay:
    java.lang.String APP_NAME -> a
    java.lang.String ARTIST_NAME -> b
    android.content.SharedPreferences sharedPreferences -> c
    java.lang.String getDeviceId() -> a
    boolean saveDeviceId(java.lang.String) -> a
    boolean saveDeviceIdUpdatedAt(long) -> a
    java.lang.String getPassword() -> b
    boolean savePassword(java.lang.String) -> b
    java.lang.String getMailAddress() -> c
    boolean saveMailAddress(java.lang.String) -> c
    boolean isAutoLogin() -> d
    boolean saveAutoLogin(boolean) -> a
    boolean hasEverLoggedin() -> e
    boolean saveEverLoggedin$138603() -> f
    int getPurchaseSite() -> g
    boolean savePurchaseSite(int) -> a
    java.lang.String getTwitterUsername() -> h
    boolean saveTwitterUsername(java.lang.String) -> d
    java.lang.String getTwitterPassword() -> i
    boolean saveTwitterPassword(java.lang.String) -> e
    java.lang.String getTwitterToken() -> j
    boolean saveTwitterToken(java.lang.String) -> f
    java.lang.String getTwitterTokenSecret() -> k
    boolean saveTwitterTokenSecret(java.lang.String) -> g
    boolean saveLastLoginTime(java.util.Date) -> a
    java.lang.String getPaymentErrorMessage() -> l
    boolean isDisplayedMessage() -> m
    boolean saveDisplayedMessage$138603() -> n
    boolean saveString(java.lang.String,java.lang.String) -> a
    boolean saveBoolean(java.lang.String,boolean) -> a
    boolean saveInt(java.lang.String,int) -> a
    boolean saveLong(java.lang.String,long) -> a
    boolean saveDate(java.lang.String,java.util.Date) -> a
org.klab.avex_sp.Preferences$Enc -> org.klab.avex_sp.gt:
    java.lang.String encrypt(java.lang.String) -> a
    java.lang.String decrypt(java.lang.String) -> b
    byte[] getRawKey(byte[]) -> a
    byte[] toByte(java.lang.String) -> c
    java.lang.String toHex(byte[]) -> b
org.klab.avex_sp.Preferences$Keys -> org.klab.avex_sp.cb:
    org.klab.avex_sp.Preferences$Keys DEVICE_ID -> a
    org.klab.avex_sp.Preferences$Keys DEVICE_ID_UPDATED_AT -> b
    org.klab.avex_sp.Preferences$Keys MAIL_ADDRESS -> c
    org.klab.avex_sp.Preferences$Keys PASSWORD -> d
    org.klab.avex_sp.Preferences$Keys AUTO_LOGIN -> e
    org.klab.avex_sp.Preferences$Keys HAS_EVER_LOGGEDIN -> f
    org.klab.avex_sp.Preferences$Keys PURCHASE_SITE -> g
    org.klab.avex_sp.Preferences$Keys TWITTER_USERNAME -> h
    org.klab.avex_sp.Preferences$Keys TWITTER_PASSWORD -> i
    org.klab.avex_sp.Preferences$Keys TWITTER_TOKEN -> j
    org.klab.avex_sp.Preferences$Keys TWITTER_TOKEN_SECRET -> k
    org.klab.avex_sp.Preferences$Keys LAST_LOGIN_TIME -> l
    org.klab.avex_sp.Preferences$Keys PAYMENT_ERROR_MESSAGE -> m
    org.klab.avex_sp.Preferences$Keys IS_DISPLAYED_MESSAGE -> n
    org.klab.avex_sp.Preferences$Keys[] ENUM$VALUES -> o
    org.klab.avex_sp.Preferences$Keys[] values() -> values
    org.klab.avex_sp.Preferences$Keys valueOf(java.lang.String) -> valueOf
org.klab.avex_sp.R -> org.klab.avex_sp.fa:
org.klab.avex_sp.R$styleable -> org.klab.avex_sp.x:
    int[] CircleFlowIndicator -> b
    int[] TitleFlowIndicator -> c
    int[] ViewFlow -> a
org.klab.avex_sp.RegisterPageActivity -> org.klab.avex_sp.RegisterPageActivity:
    android.widget.Button registerButton -> a
    android.widget.Button cancelButton -> b
    android.widget.Button termsButton -> c
    java.lang.String $(int) -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.Register_PassActivity -> org.klab.avex_sp.Register_PassActivity:
    org.klab.avex_sp.CustomApplication application -> a
    android.widget.TextView mailAddressText -> b
    android.widget.EditText passEdit -> c
    android.widget.EditText againEdit -> d
    android.widget.TextView alert -> e
    android.widget.Button registerBtn -> f
    android.widget.Button cancelBtn -> g
    java.lang.String magicKey -> h
    java.lang.String mailAddress -> i
    java.lang.String pass -> j
    java.lang.String again -> k
    java.lang.String $(int) -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    void access$0(org.klab.avex_sp.Register_PassActivity) -> a
    void access$1(org.klab.avex_sp.Register_PassActivity,java.lang.String) -> a
    java.lang.String access$2(org.klab.avex_sp.Register_PassActivity) -> b
    android.widget.TextView access$3(org.klab.avex_sp.Register_PassActivity) -> c
    org.klab.avex_sp.CustomApplication access$4(org.klab.avex_sp.Register_PassActivity) -> d
    java.lang.String access$5(org.klab.avex_sp.Register_PassActivity) -> e
    java.lang.String access$6(org.klab.avex_sp.Register_PassActivity) -> f
org.klab.avex_sp.Register_PassActivity$1 -> org.klab.avex_sp.cq:
    org.klab.avex_sp.Register_PassActivity this$0 -> a
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
org.klab.avex_sp.Register_PassActivity$2 -> org.klab.avex_sp.cp:
    org.klab.avex_sp.Register_PassActivity this$0 -> a
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
org.klab.avex_sp.Register_PassActivity$3 -> org.klab.avex_sp.co:
    org.klab.avex_sp.Register_PassActivity this$0 -> a
    void onFail(org.klab.avex_sp.api.task.ErrorType,java.lang.Exception,java.lang.Object) -> a
    void onSuccess(java.lang.Object) -> a
org.klab.avex_sp.Register_PassActivity$3$1 -> org.klab.avex_sp.eh:
    org.klab.avex_sp.Register_PassActivity$3 this$1 -> a
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.Register_PassActivity$4 -> org.klab.avex_sp.cn:
    org.klab.avex_sp.Register_PassActivity this$0 -> a
    void onYesClick$3c7ec8c3() -> a
    void onNoClick$3c7ec8c3() -> b
org.klab.avex_sp.Register_PassActivity$4$1 -> org.klab.avex_sp.ec:
    org.klab.avex_sp.Register_PassActivity$4 this$1 -> a
    void onFail(org.klab.avex_sp.api.task.ErrorType,java.lang.Exception,java.lang.Object) -> a
    void onSuccess(java.lang.Object) -> a
org.klab.avex_sp.Register_PassActivity$4$1$1 -> org.klab.avex_sp.am:
    org.klab.avex_sp.Register_PassActivity$4$1 this$2 -> a
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.Register_PassActivity$4$1$1$1 -> org.klab.avex_sp.fv:
    org.klab.avex_sp.Register_PassActivity$4$1$1 this$3 -> a
    void onFail(org.klab.avex_sp.api.task.ErrorType,java.lang.Exception,java.lang.Object) -> a
    void onSuccess(java.lang.Object) -> a
org.klab.avex_sp.Register_PassActivity$4$1$2 -> org.klab.avex_sp.an:
    org.klab.avex_sp.Register_PassActivity$4$1 this$2 -> a
    void onYesClick$3c7ec8c3() -> a
    void onNoClick$3c7ec8c3() -> b
org.klab.avex_sp.Register_PassActivity$4$1$3 -> org.klab.avex_sp.ao:
    org.klab.avex_sp.Register_PassActivity$4$1 this$2 -> a
    void onYesClick$3c7ec8c3() -> a
    void onNoClick$3c7ec8c3() -> b
org.klab.avex_sp.Register_PassAgainActivity -> org.klab.avex_sp.Register_PassAgainActivity:
    org.klab.avex_sp.CustomApplication application -> a
    android.widget.TextView mailAddressText -> b
    android.widget.EditText passEdit -> c
    android.widget.EditText againEdit -> d
    android.widget.TextView alert -> e
    android.widget.Button registerBtn -> f
    android.widget.Button cancelBtn -> g
    java.lang.String magicKey -> h
    java.lang.String mailAddress -> i
    java.lang.String pass -> j
    java.lang.String again -> k
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onClick(android.view.View) -> onClick
    void access$0(org.klab.avex_sp.Register_PassAgainActivity) -> a
    org.klab.avex_sp.CustomApplication access$1(org.klab.avex_sp.Register_PassAgainActivity) -> b
    void access$2(org.klab.avex_sp.Register_PassAgainActivity,java.lang.String) -> a
    void access$3(org.klab.avex_sp.Register_PassAgainActivity,java.lang.String) -> b
    android.widget.TextView access$4(org.klab.avex_sp.Register_PassAgainActivity) -> c
org.klab.avex_sp.Register_PassAgainActivity$1 -> org.klab.avex_sp.fx:
    org.klab.avex_sp.Register_PassAgainActivity this$0 -> a
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
org.klab.avex_sp.Register_PassAgainActivity$2 -> org.klab.avex_sp.fw:
    org.klab.avex_sp.Register_PassAgainActivity this$0 -> a
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
org.klab.avex_sp.Register_PassAgainActivity$3 -> org.klab.avex_sp.fz:
    org.klab.avex_sp.Register_PassAgainActivity this$0 -> a
    void onFail(org.klab.avex_sp.api.task.ErrorType,java.lang.Exception,java.lang.Object) -> a
    void onSuccess(java.lang.Object) -> a
org.klab.avex_sp.Register_PassAgainActivity$3$1 -> org.klab.avex_sp.u:
    org.klab.avex_sp.Register_PassAgainActivity$3 this$1 -> a
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.Register_PassAgainActivity$3$2 -> org.klab.avex_sp.y:
    org.klab.avex_sp.Register_PassAgainActivity$3 this$1 -> a
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.Register_PassAgainActivity$3$3 -> org.klab.avex_sp.z:
    org.klab.avex_sp.Register_PassAgainActivity$3 this$1 -> a
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.Register_PassAgainActivity$3$4 -> org.klab.avex_sp.v:
    org.klab.avex_sp.Register_PassAgainActivity$3 this$1 -> a
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.Register_PassAgainActivity$4 -> org.klab.avex_sp.fy:
    org.klab.avex_sp.Register_PassAgainActivity this$0 -> a
    void onFail(org.klab.avex_sp.api.task.ErrorType,java.lang.Exception,java.lang.Object) -> a
    void onSuccess(java.lang.Object) -> a
org.klab.avex_sp.Register_PassAgainActivity$5 -> org.klab.avex_sp.gb:
    org.klab.avex_sp.Register_PassAgainActivity this$0 -> a
    java.lang.String val$_mailAddress -> b
    void onFail(org.klab.avex_sp.api.task.ErrorType,java.lang.Exception,java.lang.Object) -> a
    void onSuccess(java.lang.Object) -> a
org.klab.avex_sp.Register_PayingmemberActivity -> org.klab.avex_sp.Register_PayingmemberActivity:
    android.widget.Button what -> a
    android.widget.Button payingBtn -> b
    android.widget.Button cancelBtn -> c
    org.klab.avex_sp.CustomApplication application -> d
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.Register_PayingmemberActivity$1 -> org.klab.avex_sp.hn:
    org.klab.avex_sp.Register_PayingmemberActivity this$0 -> a
    org.klab.avex_sp.Preferences val$preferences -> b
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.Register_VipmemberActivity -> org.klab.avex_sp.Register_VipmemberActivity:
    android.widget.Button vipButton -> a
    android.widget.Button cancelButton -> b
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.SeparatedListAdapter -> org.klab.avex_sp.hf:
    android.content.Context context -> a
    java.util.List list -> b
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    boolean isEnabled(int) -> isEnabled
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
org.klab.avex_sp.SeparatedListAdapter$ViewHolder -> org.klab.avex_sp.ch:
    android.widget.TextView settingsTextView -> a
org.klab.avex_sp.SeparatedListItem -> org.klab.avex_sp.ak:
    java.lang.String setting -> a
    java.lang.String getSetting() -> a
    boolean isSeparator() -> b
org.klab.avex_sp.SimpleImageDownloadTask -> org.klab.avex_sp.hy:
    android.graphics.Bitmap download(java.lang.String[]) -> a
    void downloadImage(android.content.Context,java.lang.String,android.widget.ImageView,android.graphics.drawable.Drawable) -> a
    java.lang.Object download(java.lang.Object[]) -> a
org.klab.avex_sp.SimpleImageDownloadTask$1 -> org.klab.avex_sp.ct:
    android.widget.ImageView val$imageView -> a
    android.graphics.drawable.Drawable val$noImageDrawable -> b
    void setResult(java.lang.Object) -> a
org.klab.avex_sp.SplashActivity -> org.klab.avex_sp.SplashActivity:
    android.widget.VideoView videoView -> a
    boolean done -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    boolean access$0(org.klab.avex_sp.SplashActivity) -> a
    void access$1$10077d85(org.klab.avex_sp.SplashActivity) -> b
    void access$2(org.klab.avex_sp.SplashActivity) -> c
    android.widget.VideoView access$3(org.klab.avex_sp.SplashActivity) -> d
org.klab.avex_sp.SplashActivity$1 -> org.klab.avex_sp.ha:
    org.klab.avex_sp.SplashActivity this$0 -> a
    void onCompletion(android.media.MediaPlayer) -> onCompletion
org.klab.avex_sp.SplashActivity$2 -> org.klab.avex_sp.hb:
    org.klab.avex_sp.SplashActivity this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
org.klab.avex_sp.SystemErrorActivity -> org.klab.avex_sp.SystemErrorActivity:
    android.widget.Button homeButton -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.TemporaryPreferences -> org.klab.avex_sp.ho:
    java.lang.String spMemberId -> a
    java.lang.String sessionKey -> b
    org.klab.avex_sp.model.PurchaseStatus chargeState -> c
    java.util.Date firstPurchase -> d
    java.util.Date lastPurchase -> e
    java.util.Date nextPurchase -> f
    java.util.Date loginTime -> g
    int duration -> h
    java.lang.String getSpMemberId() -> a
    void saveSpMemberId(java.lang.String) -> a
    java.lang.String getSessionKey() -> b
    void saveSessionKey(java.lang.String) -> b
    org.klab.avex_sp.model.PurchaseStatus getChargeState() -> c
    void saveChargeState(org.klab.avex_sp.model.PurchaseStatus) -> a
    void saveFirstPurchase(java.lang.String) -> c
    void saveLastPurchase(java.lang.String) -> d
    void saveNextPurchase(java.lang.String) -> e
    void saveDuration(int) -> a
    void saveLoginTime(java.util.Date) -> a
    java.util.Date getLoginTime() -> d
    void clear() -> e
org.klab.avex_sp.TimeOutErrorActivity -> org.klab.avex_sp.TimeOutErrorActivity:
    android.widget.Button reRegisterButton -> a
    java.lang.Class redirectActivity -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.TwitterPostActivity -> org.klab.avex_sp.TwitterPostActivity:
    android.widget.EditText statusEditText -> a
    android.widget.Button postButton -> b
    android.widget.Button clearButton -> c
    android.widget.Button cancelButton -> d
    android.app.ProgressDialog progressDialog -> e
    org.klab.avex_sp.dao.ExteranlAppDao dao -> f
    boolean running -> g
    android.view.View$OnClickListener finisher -> h
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    android.app.ProgressDialog access$0(org.klab.avex_sp.TwitterPostActivity) -> a
    android.view.View$OnClickListener access$1(org.klab.avex_sp.TwitterPostActivity) -> b
    android.widget.Button access$2(org.klab.avex_sp.TwitterPostActivity) -> c
    void access$3$af0884b(org.klab.avex_sp.TwitterPostActivity) -> d
    android.widget.EditText access$4(org.klab.avex_sp.TwitterPostActivity) -> e
    void access$5(org.klab.avex_sp.TwitterPostActivity,java.lang.String) -> a
    void access$6(org.klab.avex_sp.TwitterPostActivity) -> f
org.klab.avex_sp.TwitterPostActivity$1 -> org.klab.avex_sp.ff:
    org.klab.avex_sp.TwitterPostActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.TwitterPostActivity$2 -> org.klab.avex_sp.fg:
    org.klab.avex_sp.TwitterPostActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.TwitterPostActivity$3 -> org.klab.avex_sp.fj:
    org.klab.avex_sp.TwitterPostActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.TwitterPostActivity$TwitterPostTask -> org.klab.avex_sp.ef:
    android.content.Context context -> b
    org.klab.avex_sp.dao.ExteranlAppDao dao -> c
    android.app.ProgressDialog dialog -> d
    java.lang.Exception exception -> e
    org.klab.avex_sp.TwitterPostActivity this$0 -> a
    void onPreExecute() -> onPreExecute
    java.lang.Boolean doInBackground(java.lang.String[]) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.klab.avex_sp.TwitterPostActivity$TwitterPostTask$1 -> org.klab.avex_sp.ci:
    org.klab.avex_sp.TwitterPostActivity$TwitterPostTask this$1 -> a
    void run() -> run
org.klab.avex_sp.TwitterSignInActivity -> org.klab.avex_sp.TwitterSignInActivity:
    android.widget.EditText usernameEditText -> a
    android.widget.EditText passwordEditText -> b
    android.widget.Button signInButton -> c
    android.app.ProgressDialog progressDialog -> d
    org.klab.avex_sp.dao.ExteranlAppDao dao -> e
    void onCreate(android.os.Bundle) -> onCreate
    void access$0(org.klab.avex_sp.TwitterSignInActivity,android.app.ProgressDialog) -> a
    android.app.ProgressDialog access$1(org.klab.avex_sp.TwitterSignInActivity) -> a
    android.widget.Button access$2(org.klab.avex_sp.TwitterSignInActivity) -> b
    android.widget.EditText access$3(org.klab.avex_sp.TwitterSignInActivity) -> c
    android.widget.EditText access$4(org.klab.avex_sp.TwitterSignInActivity) -> d
    void access$5(org.klab.avex_sp.TwitterSignInActivity,java.lang.String,java.lang.String) -> a
org.klab.avex_sp.TwitterSignInActivity$1 -> org.klab.avex_sp.ej:
    org.klab.avex_sp.TwitterSignInActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.TwitterSignInActivity$TwitterSignInTask -> org.klab.avex_sp.cx:
    android.content.Context context -> a
    org.klab.avex_sp.dao.ExteranlAppDao dao -> b
    java.lang.Exception exception -> c
    org.klab.avex_sp.TwitterSignInActivity this$0 -> d
    void onPreExecute() -> onPreExecute
    java.lang.Boolean doInBackground(java.lang.String[]) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.klab.avex_sp.VariableTextSizedListAdapter -> org.klab.avex_sp.ck:
    android.content.Context context -> a
    java.util.List list -> b
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    boolean isEnabled(int) -> isEnabled
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
org.klab.avex_sp.VariableTextSizedListAdapter$TextAndSize -> org.klab.avex_sp.hj:
    java.lang.String text -> a
    int size -> b
org.klab.avex_sp.VariableTextSizedListAdapter$ViewHolder -> org.klab.avex_sp.m:
    android.widget.TextView settingsTextView -> a
org.klab.avex_sp.VariableTextSizedListItem -> org.klab.avex_sp.cv:
    java.lang.String setting -> a
    int size -> b
    java.lang.String getSetting() -> a
    int getSize() -> b
    boolean isSeparator() -> c
org.klab.avex_sp.api.ApiFailedException -> org.klab.avex_sp.d.b:
    int reasonCode -> a
    java.util.Map resParams -> b
    int getReasonCode() -> a
    java.util.Map getResponseParams() -> b
org.klab.avex_sp.api.EmptyImageException -> org.klab.avex_sp.d.c:
org.klab.avex_sp.api.MaintenanceException -> org.klab.avex_sp.d.a:
org.klab.avex_sp.api.NetworkErrorException -> org.klab.avex_sp.d.d:
org.klab.avex_sp.api.SystemErrorException -> org.klab.avex_sp.d.e:
org.klab.avex_sp.api.request.ApiRequest -> org.klab.avex_sp.d.a.a:
    java.util.Map execute(java.lang.String,java.lang.String,java.util.Map) -> a
org.klab.avex_sp.api.request.ApiRequestFactory -> org.klab.avex_sp.d.a.b:
    java.util.Map apiRequests -> a
    org.klab.avex_sp.api.request.ApiRequest createRequest(org.klab.avex_sp.api.request.ApiRequestFactory$ApiRequestName) -> a
org.klab.avex_sp.api.request.ApiRequestFactory$ApiEndpointUrlAndHttpMethod -> org.klab.avex_sp.d.a.c:
    java.lang.String apiEndpointUrl -> a
    org.klab.avex_sp.api.request.HttpRequestMethod method -> b
    java.lang.String[] responseNames -> c
    java.lang.String dialogMessage -> d
org.klab.avex_sp.api.request.ApiRequestFactory$ApiRequestName -> org.klab.avex_sp.d.a.f:
    org.klab.avex_sp.api.request.ApiRequestFactory$ApiRequestName GET_DEVICE_ID -> a
    org.klab.avex_sp.api.request.ApiRequestFactory$ApiRequestName CHECK_VERSION -> b
    org.klab.avex_sp.api.request.ApiRequestFactory$ApiRequestName GET_MAILADDRESS_CONFIRMED -> c
    org.klab.avex_sp.api.request.ApiRequestFactory$ApiRequestName REGISTER_USER_MAIL_CONFIRMED -> d
    org.klab.avex_sp.api.request.ApiRequestFactory$ApiRequestName LOGIN -> e
    org.klab.avex_sp.api.request.ApiRequestFactory$ApiRequestName AUTH_CHARGE -> f
    org.klab.avex_sp.api.request.ApiRequestFactory$ApiRequestName SET_PASSWORD -> g
    org.klab.avex_sp.api.request.ApiRequestFactory$ApiRequestName SET_PROFILE -> h
    org.klab.avex_sp.api.request.ApiRequestFactory$ApiRequestName GET_PROFILE -> i
    org.klab.avex_sp.api.request.ApiRequestFactory$ApiRequestName RESET_PASSWORD_CONFIRM -> j
    org.klab.avex_sp.api.request.ApiRequestFactory$ApiRequestName RESET_PASSWORD -> k
    org.klab.avex_sp.api.request.ApiRequestFactory$ApiRequestName SET_LOGIN_ID -> l
    org.klab.avex_sp.api.request.ApiRequestFactory$ApiRequestName WITHDRAW_USER -> m
    org.klab.avex_sp.api.request.ApiRequestFactory$ApiRequestName GET_CARRIER_SWITCH_PASSWORD -> n
    org.klab.avex_sp.api.request.ApiRequestFactory$ApiRequestName RETRIEVE_PROFILE -> o
    org.klab.avex_sp.api.request.ApiRequestFactory$ApiRequestName GET_MAIL_MAGAZINE -> p
    org.klab.avex_sp.api.request.ApiRequestFactory$ApiRequestName SET_MAIL_MAGAZINE -> q
    org.klab.avex_sp.api.request.ApiRequestFactory$ApiRequestName[] ENUM$VALUES -> r
    org.klab.avex_sp.api.request.ApiRequestFactory$ApiRequestName[] values() -> values
    org.klab.avex_sp.api.request.ApiRequestFactory$ApiRequestName valueOf(java.lang.String) -> valueOf
org.klab.avex_sp.api.request.BaseApiRequest -> org.klab.avex_sp.d.a.e:
    java.lang.String[] defaultResponseParamKeys -> a
    org.klab.avex_sp.CustomApplication application -> b
    java.lang.String apiEndpointURL -> c
    org.klab.avex_sp.api.request.HttpRequestMethod method -> d
    java.lang.String[] responseParamNames -> e
    java.lang.String dialogMessage -> f
    java.util.Map execute(java.lang.String,java.lang.String,java.util.Map) -> a
org.klab.avex_sp.api.request.HttpRequestMethod -> org.klab.avex_sp.d.a.d:
    org.klab.avex_sp.api.request.HttpRequestMethod GET -> a
    org.klab.avex_sp.api.request.HttpRequestMethod POST -> b
    org.klab.avex_sp.api.request.HttpRequestMethod[] ENUM$VALUES -> c
    org.klab.avex_sp.api.request.HttpRequestMethod[] values() -> values
    org.klab.avex_sp.api.request.HttpRequestMethod valueOf(java.lang.String) -> valueOf
org.klab.avex_sp.api.task.ApiRequestTask -> org.klab.avex_sp.d.b.f:
    org.klab.avex_sp.api.request.ApiRequestFactory$ApiRequestName apiRequestName -> a
    android.content.Context context -> b
    org.klab.avex_sp.api.task.TaskCallback callback -> c
    boolean enabledDialog -> d
    android.app.ProgressDialog progressDialog -> e
    java.lang.String dialogMessage -> f
    org.klab.avex_sp.api.request.ApiRequestFactory apiRequestFactory -> g
    void setContext(android.content.Context) -> a
    void setCallback(org.klab.avex_sp.api.task.TaskCallback) -> a
    void setDialogMessage(java.lang.String) -> a
    void setEnableDialog(boolean) -> a
    void onPreExecute() -> onPreExecute
    org.klab.avex_sp.api.task.TaskResult doInBackground(java.util.Map[]) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.klab.avex_sp.api.task.ApiRequestTaskFactory -> org.klab.avex_sp.d.b.b:
    org.klab.avex_sp.api.request.ApiRequestFactory apiRequestFactory -> a
    org.klab.avex_sp.api.task.ApiRequestTask createApiRequestTask(org.klab.avex_sp.api.request.ApiRequestFactory$ApiRequestName) -> a
org.klab.avex_sp.api.task.ApiRequestTaskUtil -> org.klab.avex_sp.d.b.c:
    org.klab.avex_sp.CustomApplication application -> a
    void checkVersion(android.app.Activity) -> a
    void login(android.app.Activity,java.lang.String,java.lang.String,boolean,org.klab.avex_sp.api.task.TaskCallback) -> a
    void login(android.app.Activity,java.lang.String,java.lang.String,boolean,boolean,org.klab.avex_sp.api.task.TaskCallback) -> a
    org.klab.avex_sp.CustomApplication access$0() -> a
org.klab.avex_sp.api.task.ApiRequestTaskUtil$1 -> org.klab.avex_sp.d.b.g:
    android.app.Activity val$activity -> a
    void onFail(org.klab.avex_sp.api.task.ErrorType,java.lang.Exception,java.lang.Object) -> a
    void onSuccess(java.lang.Object) -> a
org.klab.avex_sp.api.task.ApiRequestTaskUtil$1$1 -> org.klab.avex_sp.d.b.i:
    org.klab.avex_sp.api.task.ApiRequestTaskUtil$1 this$1 -> a
    android.app.Activity val$activity -> b
    void onYesClick$3c7ec8c3() -> a
    void onNoClick$3c7ec8c3() -> b
org.klab.avex_sp.api.task.ApiRequestTaskUtil$2 -> org.klab.avex_sp.d.b.h:
    boolean val$isAutoLogin -> a
    boolean val$updateHasEverLoginned -> b
    org.klab.avex_sp.api.task.TaskCallback val$callback -> c
    void onFail(org.klab.avex_sp.api.task.ErrorType,java.lang.Exception,java.util.Map) -> a
    void onFail(org.klab.avex_sp.api.task.ErrorType,java.lang.Exception,java.lang.Object) -> a
    void onSuccess(java.lang.Object) -> a
org.klab.avex_sp.api.task.ErrorType -> org.klab.avex_sp.d.b.a:
    org.klab.avex_sp.api.task.ErrorType API_FAILED_ERROR -> a
    org.klab.avex_sp.api.task.ErrorType MAINTENANCE_ERROR -> b
    org.klab.avex_sp.api.task.ErrorType EMPTY_IMAGE_ERROR -> c
    org.klab.avex_sp.api.task.ErrorType NETWORK_ERROR -> d
    org.klab.avex_sp.api.task.ErrorType SYSTEM_ERROR -> e
    org.klab.avex_sp.api.task.ErrorType[] ENUM$VALUES -> f
    org.klab.avex_sp.api.task.ErrorType[] values() -> values
    org.klab.avex_sp.api.task.ErrorType valueOf(java.lang.String) -> valueOf
org.klab.avex_sp.api.task.TaskCallback -> org.klab.avex_sp.d.b.e:
    void onSuccess(java.lang.Object) -> a
    void onFail(org.klab.avex_sp.api.task.ErrorType,java.lang.Exception,java.lang.Object) -> a
org.klab.avex_sp.api.task.TaskResult -> org.klab.avex_sp.d.b.d:
    java.lang.Object data -> a
    org.klab.avex_sp.api.task.ErrorType error -> b
    java.lang.Exception exception -> c
    void setData(java.lang.Object) -> a
    java.lang.Object getData() -> a
    boolean hasError() -> b
    void setError(org.klab.avex_sp.api.task.ErrorType,java.lang.Exception) -> a
    org.klab.avex_sp.api.task.ErrorType getErrorType() -> c
    java.lang.Exception getException() -> d
org.klab.avex_sp.dao.ExteranlAppDao -> org.klab.avex_sp.c.g:
    org.klab.avex_sp.dao.ExteranlAppDao instance -> a
    org.klab.avex_sp.Preferences preferences -> b
    org.klab.avex_sp.dao.Twitter twitter -> c
    org.klab.avex_sp.dao.ExteranlAppDao getInstance() -> a
    void signIn(java.lang.String,java.lang.String,java.lang.String) -> a
    void signOut(java.lang.String) -> a
    boolean isSignedIn(java.lang.String) -> b
    java.lang.String[] getExternalAppAccount(java.lang.String) -> c
    void updateExternalAppStatus(java.lang.String,java.lang.String) -> a
org.klab.avex_sp.dao.FaqItemDao -> org.klab.avex_sp.c.c:
    org.klab.avex_sp.dao.FaqItemDao instance -> a
    java.util.List getItems(int) -> a
    java.util.List getItems(int,int) -> a
org.klab.avex_sp.dao.InfoItemDao -> org.klab.avex_sp.c.f:
    java.lang.String category -> a
    java.util.Map instances -> b
    org.klab.avex_sp.dao.InfoItemDao getInstance(java.lang.String) -> a
    java.util.List getItems() -> a
org.klab.avex_sp.dao.MoreGoodsDao -> org.klab.avex_sp.c.e:
    org.klab.avex_sp.dao.MoreGoodsDao instance -> a
    java.util.List getItems() -> a
org.klab.avex_sp.dao.MusicDiscographyDao -> org.klab.avex_sp.c.j:
    org.klab.avex_sp.dao.MusicDiscographyDao instance -> a
    java.util.List getItems() -> a
    org.klab.avex_sp.model.MusicDiscographyDetail getDetail(java.lang.String) -> a
org.klab.avex_sp.dao.MusicMovieDao -> org.klab.avex_sp.c.o:
    org.klab.avex_sp.dao.MusicMovieDao instance -> a
    java.util.List getItems() -> a
org.klab.avex_sp.dao.PlayroomItemDao -> org.klab.avex_sp.c.b:
    java.lang.String category -> a
    java.util.Map instances -> b
    org.klab.avex_sp.dao.PlayroomItemDao getInstance(java.lang.String) -> a
    java.util.List getItems(int) -> a
    java.util.List getItems(int,int) -> a
org.klab.avex_sp.dao.PlayroomPeepDao -> org.klab.avex_sp.c.a:
    org.klab.avex_sp.dao.PlayroomPeepDao instance -> a
    java.util.List getItems(int) -> a
    java.util.List getItems(int,int) -> a
org.klab.avex_sp.dao.PlayroomPhotoDao -> org.klab.avex_sp.c.n:
    org.klab.avex_sp.dao.PlayroomPhotoDao instance -> a
    java.util.List getGenreWithHttpClient(org.klab.avex_sp.model.PurchaseStatus) -> a
    java.util.List getImages(org.klab.avex_sp.model.PurchaseStatus,java.lang.String,java.lang.String) -> a
org.klab.avex_sp.dao.PurchaseSiteDao -> org.klab.avex_sp.c.k:
    org.klab.avex_sp.dao.PurchaseSiteDao instance -> a
    org.klab.avex_sp.Preferences preferences -> b
    org.klab.avex_sp.dao.PurchaseSiteDao getInstance() -> a
    java.lang.String getPurchaseSiteUrl(int,org.klab.avex_sp.model.MusicDiscographyDetail) -> a
    java.lang.String[] getPurchaseSiteNames() -> b
    int getPurchaseSite() -> c
    int getPurchaseSitesSize() -> d
    void setPurchaseSite(int) -> a
org.klab.avex_sp.dao.PurchaseSiteDao$PurchaseSite -> org.klab.avex_sp.c.l:
    org.klab.avex_sp.dao.PurchaseSiteDao$PurchaseSite MUMO -> f
    org.klab.avex_sp.dao.PurchaseSiteDao$PurchaseSite AMAZON -> g
    org.klab.avex_sp.dao.PurchaseSiteDao$PurchaseSite TSUTAYA -> h
    org.klab.avex_sp.dao.PurchaseSiteDao$PurchaseSite TOWER -> i
    org.klab.avex_sp.dao.PurchaseSiteDao$PurchaseSite RAKUTEN -> j
    org.klab.avex_sp.dao.PurchaseSiteDao$PurchaseSite HMV -> k
    org.klab.avex_sp.dao.PurchaseSiteDao$PurchaseSite NEOWING -> l
    org.klab.avex_sp.dao.PurchaseSiteDao$PurchaseSite SEVEN -> m
    java.lang.String name -> a
    java.lang.String urlTemplate -> b
    org.klab.avex_sp.dao.PurchaseSiteDao$PurchaseSite$KeywordType keywordType -> n
    java.lang.String urlEncoding -> c
    java.lang.String replaceFrom -> d
    java.lang.String replaceTo -> e
    org.klab.avex_sp.dao.PurchaseSiteDao$PurchaseSite[] ENUM$VALUES -> o
    java.lang.String getUrl(org.klab.avex_sp.model.MusicDiscographyDetail) -> a
    org.klab.avex_sp.dao.PurchaseSiteDao$PurchaseSite[] values() -> values
    org.klab.avex_sp.dao.PurchaseSiteDao$PurchaseSite valueOf(java.lang.String) -> valueOf
org.klab.avex_sp.dao.PurchaseSiteDao$PurchaseSite$KeywordType -> org.klab.avex_sp.c.m:
    org.klab.avex_sp.dao.PurchaseSiteDao$PurchaseSite$KeywordType ArtistAndTitle -> a
    org.klab.avex_sp.dao.PurchaseSiteDao$PurchaseSite$KeywordType ProductCode -> b
    org.klab.avex_sp.dao.PurchaseSiteDao$PurchaseSite$KeywordType[] ENUM$VALUES -> c
    java.lang.String getUrl(org.klab.avex_sp.dao.PurchaseSiteDao$PurchaseSite,org.klab.avex_sp.model.MusicDiscographyDetail) -> a
    org.klab.avex_sp.dao.PurchaseSiteDao$PurchaseSite$KeywordType[] values() -> values
    org.klab.avex_sp.dao.PurchaseSiteDao$PurchaseSite$KeywordType valueOf(java.lang.String) -> valueOf
org.klab.avex_sp.dao.PurchaseSiteDao$PurchaseSite$KeywordType$1 -> org.klab.avex_sp.c.h:
    java.lang.String getUrl(org.klab.avex_sp.dao.PurchaseSiteDao$PurchaseSite,org.klab.avex_sp.model.MusicDiscographyDetail) -> a
org.klab.avex_sp.dao.PurchaseSiteDao$PurchaseSite$KeywordType$2 -> org.klab.avex_sp.c.i:
    java.lang.String getUrl(org.klab.avex_sp.dao.PurchaseSiteDao$PurchaseSite,org.klab.avex_sp.model.MusicDiscographyDetail) -> a
org.klab.avex_sp.dao.Twitter -> org.klab.avex_sp.c.d:
    org.klab.avex_sp.dao.Twitter instance -> a
    java.lang.String token -> b
    java.lang.String tokenSecret -> c
    org.klab.avex_sp.dao.Twitter getInstance() -> a
    void init(java.lang.String,java.lang.String) -> a
    boolean isSignedIn() -> b
    void signOut() -> c
    void signIn(java.lang.String,java.lang.String) -> b
    void updateStatus(java.lang.String) -> a
    java.lang.String getToken() -> d
    java.lang.String getTokenSecret() -> e
org.klab.avex_sp.model.Constants -> org.klab.avex_sp.a.h:
    java.lang.String HTTP_HOST -> l
    java.lang.String API_PROTOCOL_HTTP_URL_DIR -> m
    java.lang.String HTTPS_HOST -> n
    java.lang.String API_PROTOCOL_HTTPS_URL_DIR -> o
    java.lang.String API_BILLING_URL_DIR -> p
    java.lang.String MAIL_HOST -> q
    java.lang.String STAGING_API_PROTOCOL_HTTP_URL_DIR -> r
    java.lang.String STAGING_API_PROTOCOL_HTTPS_URL_DIR -> s
    java.lang.String STAGING_API_BILLING_URL_DIR -> t
    java.lang.String PRODUCTION_API_PROTOCOL_HTTP_URL_DIR -> u
    java.lang.String PRODUCTION_API_PROTOCOL_HTTPS_URL_DIR -> v
    java.lang.String PRODUCTION_API_BILLING_URL_DIR -> w
    java.lang.String CHARGE_ENTRY_URL -> a
    java.lang.String API_ENDPOINT_HTTP_URL -> b
    java.lang.String API_ENDPOINT_HTTPS_URL -> c
    java.lang.String MAINTENANCE_URL -> d
    java.lang.String IMAGE_URL_BASE -> e
    java.lang.String DISC_LIST_URL -> f
    java.lang.String DISC_DETAIL_URL -> g
    java.lang.String DISC_DETAIL_LIST_URL -> h
    java.lang.String REGISTER_NEW_USER_EMAIL_TEST -> x
    java.lang.String REGISTER_NEW_USER_EMAIL -> i
    java.lang.String RESET_PASSWORD_EMAIL -> j
    java.lang.String RESET_EMAIL -> k
org.klab.avex_sp.model.FaqItem -> org.klab.avex_sp.a.d:
    java.lang.String id -> a
    java.lang.String title -> b
    java.lang.String question -> c
    java.lang.String answer -> d
    java.lang.String publishDate -> e
    java.lang.String getFormatedPublishDate() -> a
    void setPublishDate(java.lang.String) -> a
    java.lang.String getTitle() -> b
    void setTitle(java.lang.String) -> b
    java.lang.String getQuestion() -> c
    java.lang.String getId() -> d
    void setId(java.lang.String) -> c
    void setQuestion(java.lang.String) -> d
    java.lang.String getAnswer() -> e
    void setAnswer(java.lang.String) -> e
    boolean isNew() -> f
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
org.klab.avex_sp.model.InfoItem -> org.klab.avex_sp.a.e:
    java.lang.String publishDate -> a
    java.lang.String title -> b
    java.lang.String description -> c
    java.lang.String getFormatedPublishDate() -> a
    void setPublishDate(java.lang.String) -> a
    java.lang.String getTitle() -> b
    void setTitle(java.lang.String) -> b
    java.lang.String getDescription() -> c
    void setDescription(java.lang.String) -> c
    boolean isNew() -> d
    java.lang.String toString() -> toString
org.klab.avex_sp.model.More_GoodsItem -> org.klab.avex_sp.a.m:
    java.lang.String artist -> a
    java.lang.String imageS -> b
    java.lang.String imageL -> c
    java.lang.String link -> d
    java.lang.String date -> e
    java.lang.String name -> f
    java.lang.String price -> g
    java.lang.String no -> h
    java.lang.String stock -> i
    java.lang.String fc -> j
    java.lang.String getArtist() -> a
    void setArtist(java.lang.String) -> a
    java.lang.String getImageS() -> b
    void setImageS(java.lang.String) -> b
    java.lang.String getImageL() -> c
    void setImageL(java.lang.String) -> c
    java.lang.String getLink() -> d
    void setLink(java.lang.String) -> d
    java.lang.String getDate() -> e
    void setDate(java.lang.String) -> e
    java.lang.String getName() -> f
    void setName(java.lang.String) -> f
    java.lang.String getPrice() -> g
    void setPrice(java.lang.String) -> g
    java.lang.String getNo() -> h
    void setNo(java.lang.String) -> h
    boolean hasStock() -> i
    void setStock(java.lang.String) -> i
    boolean isFcOnly() -> j
    void setFc(java.lang.String) -> j
org.klab.avex_sp.model.More_GoodsItemComparator -> org.klab.avex_sp.a.g:
    boolean asc -> a
    int compare(org.klab.avex_sp.model.More_GoodsItem,org.klab.avex_sp.model.More_GoodsItem) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.klab.avex_sp.model.MusicDiscographyDetail -> org.klab.avex_sp.a.j:
    java.lang.String artistName -> a
    java.lang.String mobileUrl -> b
    java.lang.String prductName -> c
    java.lang.String prductCode -> d
    java.util.Map siteUrls -> e
    java.util.List packageList -> f
    java.lang.String toString() -> toString
    java.lang.String getArtistName() -> a
    void setArtistName(java.lang.String) -> a
    void setMobileUrl(java.lang.String) -> b
    java.lang.String getPrductName() -> b
    void setPrductName(java.lang.String) -> c
    java.lang.String getPrductCode() -> c
    void setPrductCode(java.lang.String) -> d
    java.util.List getPackages() -> d
    void addPackage(org.klab.avex_sp.model.MusicDiscographyDetail$Package) -> a
    void addSiteUrl(java.lang.String,java.lang.String) -> a
    java.lang.String getSiteUrl(java.lang.String) -> e
org.klab.avex_sp.model.MusicDiscographyDetail$Package -> org.klab.avex_sp.a.k:
    java.lang.String type -> a
    java.util.List list -> b
    java.lang.String toString() -> toString
org.klab.avex_sp.model.MusicMovieItem -> org.klab.avex_sp.a.n:
    java.lang.String videoid -> a
    long duration -> b
    java.lang.String thumbnail -> c
    java.lang.String content -> d
    java.lang.String title -> e
    java.lang.String description -> f
    java.lang.String category -> g
    java.util.Date uploaded -> h
    java.lang.String keywords -> i
    boolean mobileMovie -> j
    void setVideoid(java.lang.String) -> a
    java.lang.String getFormatedDuration() -> a
    void setDuration(long) -> a
    java.lang.String getThumbnail() -> b
    void setThumbnail(java.lang.String) -> b
    java.lang.String getContent() -> c
    void setContent(java.lang.String) -> c
    java.lang.String getTitle() -> d
    void setTitle(java.lang.String) -> d
    java.lang.String getDescription() -> e
    void setDescription(java.lang.String) -> e
    java.lang.String getCategory() -> f
    void setCategory(java.lang.String) -> f
    java.util.Date getUploaded() -> g
    void setUploaded(java.util.Date) -> a
    java.lang.String getKeywords() -> h
    void setKeywords(java.lang.String) -> g
    void setMobileMovie$1385ff() -> i
    boolean isMobileMovie() -> j
org.klab.avex_sp.model.Music_Item -> org.klab.avex_sp.a.l:
    java.lang.String imageUrl -> a
    java.lang.String release -> b
    java.lang.String type -> c
    java.lang.String price -> d
    java.lang.String name -> e
    java.lang.String code -> f
    java.lang.String getImageUrl() -> a
    void setImageUrl(java.lang.String) -> a
    java.lang.String getRelease() -> b
    void setRelease(java.lang.String) -> b
    java.lang.String getType() -> c
    void setType(java.lang.String) -> c
    java.lang.String getPrice() -> d
    void setPrice(java.lang.String) -> d
    java.lang.String getName() -> e
    void setName(java.lang.String) -> e
    java.lang.String getCode() -> f
    void setCode(java.lang.String) -> f
org.klab.avex_sp.model.PlayroomPhotoGenre -> org.klab.avex_sp.a.c:
    java.lang.String publishDate -> a
    java.lang.String imageUrl -> b
    java.lang.String genre -> c
    java.lang.String label -> d
    java.lang.String tag -> e
    void setPublishDate(java.lang.String) -> a
    java.lang.String getImageUrl() -> a
    void setImageUrl(java.lang.String) -> b
    java.lang.String getGenre() -> b
    void setGenre(java.lang.String) -> c
    java.lang.String getLabel() -> c
    void setLabel(java.lang.String) -> d
    java.lang.String getTag() -> d
    void setTag(java.lang.String) -> e
    boolean isNew() -> e
org.klab.avex_sp.model.PlayroomPhotoImage -> org.klab.avex_sp.a.a:
    java.lang.String publishDate -> a
    java.lang.String imageUrl -> b
    java.lang.String thumbnailUrl -> c
    java.lang.String title -> d
    java.lang.String comment -> e
    void setPublishDate(java.lang.String) -> a
    java.lang.String getImageUrl() -> a
    void setImageUrl(java.lang.String) -> b
    void setTitle(java.lang.String) -> c
    void setComment(java.lang.String) -> d
    java.lang.String getThumbnailUrl() -> b
    void setThumbnailUrl(java.lang.String) -> e
    java.lang.String toString() -> toString
org.klab.avex_sp.model.PurchaseStatus -> org.klab.avex_sp.a.f:
    org.klab.avex_sp.model.PurchaseStatus NONE -> a
    org.klab.avex_sp.model.PurchaseStatus PURCHASED -> b
    org.klab.avex_sp.model.PurchaseStatus PURCHASED_LONG_TERM -> c
    java.util.EnumSet paidStatuses -> d
    org.klab.avex_sp.model.PurchaseStatus[] ENUM$VALUES -> e
    org.klab.avex_sp.model.PurchaseStatus getByStatusId(int) -> a
    boolean isPaidStatus(org.klab.avex_sp.model.PurchaseStatus) -> a
    org.klab.avex_sp.model.PurchaseStatus[] values() -> values
    org.klab.avex_sp.model.PurchaseStatus valueOf(java.lang.String) -> valueOf
org.klab.avex_sp.model.playroom_Item -> org.klab.avex_sp.a.b:
    java.lang.String id -> a
    java.lang.String publishDate -> b
    java.lang.String title -> c
    java.lang.String thumbnailUrl -> d
    java.lang.String body -> e
    java.util.ArrayList blocks -> f
    java.lang.String getFormatedPublishDate() -> a
    void setPublishDate(java.lang.String) -> a
    java.lang.String getTitle() -> b
    void setTitle(java.lang.String) -> b
    java.lang.String getThumbnailUrl() -> c
    void setThumbnailUrl(java.lang.String) -> c
    void setId(java.lang.String) -> d
    java.lang.String getId() -> d
    java.util.ArrayList getBlocks() -> e
    void addBlock(org.klab.avex_sp.model.playroom_Item_Block) -> a
    boolean isNew() -> f
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
org.klab.avex_sp.model.playroom_Item_Block -> org.klab.avex_sp.a.i:
    int type -> a
    java.lang.String content -> b
    int getType() -> a
    void setType(int) -> a
    java.lang.String getContent() -> b
    void setContent(java.lang.String) -> a
org.klab.avex_sp.net.HTTPClient -> org.klab.avex_sp.e.b:
    byte[] getByteArrayFromURL(java.lang.String) -> b
    android.graphics.Bitmap getImage(java.lang.String) -> a
org.klab.avex_sp.net.HttpHelper -> org.klab.avex_sp.e.a:
    org.klab.avex_sp.CustomApplication application -> a
    org.apache.http.HttpResponse get(java.lang.String,java.lang.String,java.lang.String,java.util.Map) -> a
    org.apache.http.HttpResponse post(java.lang.String,java.lang.String,java.lang.String,java.util.Map) -> b
    org.apache.http.client.HttpClient createHttpClient() -> a
    java.lang.String createQueryString(java.util.Map) -> a
    java.util.List createEntryParams(java.util.Map) -> b
org.klab.avex_sp.playroomActivity -> org.klab.avex_sp.playroomActivity:
    void onCreate(android.os.Bundle) -> onCreate
org.klab.avex_sp.playroomActivity$1 -> org.klab.avex_sp.cd:
    org.klab.avex_sp.playroomActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.klab.avex_sp.playroomAdapter -> org.klab.avex_sp.hk:
    android.view.LayoutInflater inflater -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
org.klab.avex_sp.playroomAdapter$ViewHolder -> org.klab.avex_sp.gx:
    android.view.ViewGroup wrapper -> a
    android.widget.TextView textview -> b
org.klab.avex_sp.playroom_favoriteActivity -> org.klab.avex_sp.playroom_favoriteActivity:
    java.lang.Class getNextActivity() -> a_
    java.lang.String getCategory() -> b
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    int getScrollState() -> c
org.klab.avex_sp.playroom_favoriteDetailActivity -> org.klab.avex_sp.playroom_favoriteDetailActivity:
    java.lang.String getCategory() -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    int getScrollState() -> c
org.klab.avex_sp.playroom_membersActivity -> org.klab.avex_sp.playroom_membersActivity:
    org.klab.avex_sp.CustomApplication application -> b
    java.lang.String assetsPath -> c
    android.webkit.WebView webView -> d
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    java.lang.String readFile(java.lang.String) -> a
    void onResume() -> onResume
    void execute() -> a
    android.app.Activity getActivity() -> b
    boolean isChargeStateSatisfied(org.klab.avex_sp.model.PurchaseStatus) -> a
    android.webkit.WebView access$0(org.klab.avex_sp.playroom_membersActivity) -> a
org.klab.avex_sp.playroom_membersActivity$1 -> org.klab.avex_sp.gg:
    org.klab.avex_sp.playroom_membersActivity this$0 -> a
    void onFail(org.klab.avex_sp.api.task.ErrorType,java.lang.Exception,java.lang.Object) -> a
    void onSuccess(java.lang.Object) -> a
org.klab.avex_sp.playroom_membersActivity_old -> org.klab.avex_sp.playroom_membersActivity_old:
    org.klab.avex_sp.CustomApplication application -> b
    android.widget.TextView numberTextView -> c
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void execute() -> a
    android.app.Activity getActivity() -> b
    boolean isChargeStateSatisfied(org.klab.avex_sp.model.PurchaseStatus) -> a
    android.widget.TextView access$0(org.klab.avex_sp.playroom_membersActivity_old) -> a
org.klab.avex_sp.playroom_membersActivity_old$1 -> org.klab.avex_sp.gm:
    org.klab.avex_sp.playroom_membersActivity_old this$0 -> a
    void onFail(org.klab.avex_sp.api.task.ErrorType,java.lang.Exception,java.lang.Object) -> a
    void onSuccess(java.lang.Object) -> a
org.klab.avex_sp.playroom_messageActivity -> org.klab.avex_sp.playroom_messageActivity:
    java.lang.Class getNextActivity() -> a_
    java.lang.String getCategory() -> b
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    int getScrollState() -> c
org.klab.avex_sp.playroom_messageDetailActivity -> org.klab.avex_sp.playroom_messageDetailActivity:
    java.lang.String getCategory() -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    int getScrollState() -> c
org.klab.avex_sp.playroom_peepActivity -> org.klab.avex_sp.playroom_peepActivity:
    android.widget.ListView listView -> a
    android.widget.ImageButton postButton -> b
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void load() -> b
    android.app.Activity getActivity() -> a
    void onClick(android.view.View) -> onClick
    void access$0(org.klab.avex_sp.playroom_peepActivity) -> a
    void access$1(org.klab.avex_sp.playroom_peepActivity,int,int) -> a
    android.widget.ListView access$2(org.klab.avex_sp.playroom_peepActivity) -> b
org.klab.avex_sp.playroom_peepActivity$1 -> org.klab.avex_sp.cc:
    org.klab.avex_sp.playroom_peepActivity this$0 -> a
    void onReloadMenuItemCkick() -> a
org.klab.avex_sp.playroom_peepActivity$2 -> org.klab.avex_sp.cf:
    org.klab.avex_sp.playroom_peepActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.klab.avex_sp.playroom_peepActivity$3 -> org.klab.avex_sp.ce:
    org.klab.avex_sp.playroom_peepActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.playroom_peepActivity$4 -> org.klab.avex_sp.cg:
    org.klab.avex_sp.playroom_peepActivity this$0 -> a
    java.lang.Object download(java.lang.Object[]) -> a
    void setResult(java.lang.Object) -> a
org.klab.avex_sp.playroom_peepActivity$4$1 -> org.klab.avex_sp.cy:
    org.klab.avex_sp.playroom_peepActivity$4 this$1 -> a
    java.util.List getItemsOnRefresh(int) -> a
org.klab.avex_sp.playroom_peepAdapter -> org.klab.avex_sp.bg:
    android.view.LayoutInflater inflater -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
org.klab.avex_sp.playroom_peepAdapter$ViewHolder -> org.klab.avex_sp.fu:
    android.view.ViewGroup wrapper -> a
    android.widget.TextView dateTextView -> b
    android.widget.TextView titleTextView -> c
    android.widget.TextView questionTextView -> d
    android.widget.ImageView newiconImageView -> e
    void access$1(org.klab.avex_sp.playroom_peepAdapter$ViewHolder,android.view.ViewGroup) -> a
    void access$2(org.klab.avex_sp.playroom_peepAdapter$ViewHolder,android.widget.TextView) -> a
    void access$3(org.klab.avex_sp.playroom_peepAdapter$ViewHolder,android.widget.TextView) -> b
    void access$4(org.klab.avex_sp.playroom_peepAdapter$ViewHolder,android.widget.TextView) -> c
    void access$5(org.klab.avex_sp.playroom_peepAdapter$ViewHolder,android.widget.ImageView) -> a
    android.widget.TextView access$6(org.klab.avex_sp.playroom_peepAdapter$ViewHolder) -> a
    android.widget.TextView access$7(org.klab.avex_sp.playroom_peepAdapter$ViewHolder) -> b
    android.widget.TextView access$8(org.klab.avex_sp.playroom_peepAdapter$ViewHolder) -> c
    android.widget.ImageView access$9(org.klab.avex_sp.playroom_peepAdapter$ViewHolder) -> d
    android.view.ViewGroup access$10(org.klab.avex_sp.playroom_peepAdapter$ViewHolder) -> e
org.klab.avex_sp.playroom_peepDetailActivity -> org.klab.avex_sp.playroom_peepDetailActivity:
    org.klab.avex_sp.widget.flowview.FlowView flowView -> a
    int selection -> b
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void access$0(org.klab.avex_sp.playroom_peepDetailActivity,int) -> a
    int access$1(org.klab.avex_sp.playroom_peepDetailActivity) -> a
    org.klab.avex_sp.widget.flowview.FlowView access$2(org.klab.avex_sp.playroom_peepDetailActivity) -> b
org.klab.avex_sp.playroom_peepDetailActivity$1 -> org.klab.avex_sp.bl:
    org.klab.avex_sp.playroom_peepDetailActivity this$0 -> a
    void onSwitched$5359dc9a(int) -> a
org.klab.avex_sp.playroom_peepDetailActivity$2 -> org.klab.avex_sp.bk:
    org.klab.avex_sp.playroom_peepDetailActivity this$0 -> a
    int val$size -> b
    int val$defaultSelection -> c
    java.lang.Object download(java.lang.Object[]) -> a
    void setResult(java.lang.Object) -> a
org.klab.avex_sp.playroom_peepDetailAdapter -> org.klab.avex_sp.cu:
    android.view.LayoutInflater inflater -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
org.klab.avex_sp.playroom_peepDetailAdapter$ViewHolder -> org.klab.avex_sp.bv:
    android.widget.TextView titleTextView -> a
    android.widget.TextView questionTextView -> b
    android.widget.TextView answerTextView -> c
org.klab.avex_sp.playroom_photoActivity -> org.klab.avex_sp.playroom_photoActivity:
    org.klab.avex_sp.HasImage$ListViewOnScrollListener onScrollListener -> a
    android.widget.ListView listView -> b
    org.klab.avex_sp.model.PurchaseStatus purchaseStatus -> c
    int getScrollState() -> c
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void load() -> b
    void onResume() -> onResume
    void onPause() -> onPause
    void onDestroy() -> onDestroy
    android.app.Activity getActivity() -> a
    void access$0(org.klab.avex_sp.playroom_photoActivity) -> a
    void access$1(org.klab.avex_sp.playroom_photoActivity,org.klab.avex_sp.model.PlayroomPhotoGenre) -> a
    org.klab.avex_sp.model.PurchaseStatus access$2(org.klab.avex_sp.playroom_photoActivity) -> b
    android.widget.ListView access$3(org.klab.avex_sp.playroom_photoActivity) -> c
org.klab.avex_sp.playroom_photoActivity$1 -> org.klab.avex_sp.bf:
    org.klab.avex_sp.playroom_photoActivity this$0 -> a
    void onReloadMenuItemCkick() -> a
org.klab.avex_sp.playroom_photoActivity$2 -> org.klab.avex_sp.bc:
    org.klab.avex_sp.playroom_photoActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.klab.avex_sp.playroom_photoActivity$3 -> org.klab.avex_sp.bb:
    org.klab.avex_sp.playroom_photoActivity this$0 -> a
    java.lang.Object download(java.lang.Object[]) -> a
    void setResult(java.lang.Object) -> a
org.klab.avex_sp.playroom_photoAdapter -> org.klab.avex_sp.hm:
    android.view.LayoutInflater inflater -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
org.klab.avex_sp.playroom_photoAdapter$ViewHolder -> org.klab.avex_sp.ei:
    android.view.ViewGroup wrapper -> a
    android.widget.ImageView imageView -> b
    android.widget.ImageView newiconImageView -> c
    android.widget.TextView labelTextView -> d
    org.klab.avex_sp.playroom_photoAdapter this$0 -> e
org.klab.avex_sp.playroom_photoDetailActivity -> org.klab.avex_sp.playroom_photoDetailActivity:
    android.widget.Button leftButton -> a
    android.widget.Button rightButton -> b
    org.klab.avex_sp.HasImage$AdapterViewOnScrollListener onScrollListener -> c
    org.klab.avex_sp.widget.flowview.FlowView flowView -> d
    org.klab.avex_sp.model.PurchaseStatus purchaseStatus -> e
    int selection -> f
    int getScrollState() -> c
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onPause() -> onPause
    void onDestroy() -> onDestroy
    void setButtonsEnabled() -> a
    void access$0(org.klab.avex_sp.playroom_photoDetailActivity) -> a
    void access$1(org.klab.avex_sp.playroom_photoDetailActivity) -> b
    void access$2(org.klab.avex_sp.playroom_photoDetailActivity,int) -> a
    void access$3(org.klab.avex_sp.playroom_photoDetailActivity) -> c
    org.klab.avex_sp.widget.flowview.FlowView access$4(org.klab.avex_sp.playroom_photoDetailActivity) -> d
org.klab.avex_sp.playroom_photoDetailActivity$1 -> org.klab.avex_sp.ex:
    org.klab.avex_sp.playroom_photoDetailActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.playroom_photoDetailActivity$2 -> org.klab.avex_sp.ez:
    org.klab.avex_sp.playroom_photoDetailActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.playroom_photoDetailActivity$3 -> org.klab.avex_sp.fc:
    org.klab.avex_sp.playroom_photoDetailActivity this$0 -> a
    int val$defaultSelection -> b
    void onSwitched$5359dc9a(int) -> a
org.klab.avex_sp.playroom_photoDetailActivity$4 -> org.klab.avex_sp.fd:
    org.klab.avex_sp.playroom_photoDetailActivity this$0 -> a
    int val$defaultSelection -> b
    java.lang.Object download(java.lang.Object[]) -> a
    void setResult(java.lang.Object) -> a
org.klab.avex_sp.playroom_photoGridActivity -> org.klab.avex_sp.playroom_photoGridActivity:
    android.widget.GridView gridView -> a
    org.klab.avex_sp.HasImage$ListViewOnScrollListener onScrollListener -> b
    org.klab.avex_sp.model.PurchaseStatus purchaseStatus -> c
    java.lang.String label -> d
    java.lang.String genre -> e
    java.lang.String tag -> f
    int getScrollState() -> c
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onPause() -> onPause
    void onDestroy() -> onDestroy
    void access$0(org.klab.avex_sp.playroom_photoGridActivity,int) -> a
    android.widget.GridView access$1(org.klab.avex_sp.playroom_photoGridActivity) -> a
org.klab.avex_sp.playroom_photoGridActivity$1 -> org.klab.avex_sp.ag:
    org.klab.avex_sp.playroom_photoGridActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.klab.avex_sp.playroom_photoGridActivity$2 -> org.klab.avex_sp.ae:
    org.klab.avex_sp.playroom_photoGridActivity this$0 -> a
    java.lang.Object download(java.lang.Object[]) -> a
    void setResult(java.lang.Object) -> a
org.klab.avex_sp.playroom_specialActivity -> org.klab.avex_sp.playroom_specialActivity:
    java.lang.Class getNextActivity() -> a_
    java.lang.String getCategory() -> b
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    int getScrollState() -> c
org.klab.avex_sp.playroom_specialDetailActivity -> org.klab.avex_sp.playroom_specialDetailActivity:
    java.lang.String getCategory() -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    int getScrollState() -> c
org.klab.avex_sp.playroom_staffActivity -> org.klab.avex_sp.playroom_staffActivity:
    java.lang.Class getNextActivity() -> a_
    java.lang.String getCategory() -> b
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    int getScrollState() -> c
org.klab.avex_sp.playroom_staffDetailActivity -> org.klab.avex_sp.playroom_staffDetailActivity:
    java.lang.String getCategory() -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    int getScrollState() -> c
org.klab.avex_sp.playroom_vipActivity -> org.klab.avex_sp.playroom_vipActivity:
    org.klab.avex_sp.CustomApplication application -> b
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void onRestart() -> onRestart
    android.app.Activity getActivity() -> b
    boolean isChargeStateSatisfied(org.klab.avex_sp.model.PurchaseStatus) -> a
    java.lang.Class getActivityWithoutPurchaseStatus() -> c
org.klab.avex_sp.playroom_vipActivity$1 -> org.klab.avex_sp.cj:
    org.klab.avex_sp.playroom_vipActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.klab.avex_sp.util.AbstractKeyValue -> org.klab.avex_sp.b.i:
    java.lang.Object key -> b
    java.lang.Object value -> a
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.String toString() -> toString
org.klab.avex_sp.util.AbstractMapEntry -> org.klab.avex_sp.b.g:
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.klab.avex_sp.util.ActivityUtil -> org.klab.avex_sp.b.d:
    int getScreenOrientation(android.app.Activity) -> a
    java.lang.String loadAssetsText(android.content.res.AssetManager,java.lang.String,java.lang.String) -> a
org.klab.avex_sp.util.Cache -> org.klab.avex_sp.b.a:
    java.util.Map map -> a
    org.klab.avex_sp.util.Cache$LinkedList lastAccessedList -> b
    org.klab.avex_sp.util.Cache$LinkedList ageList -> c
    int maxCacheSize -> d
    long maxLifetime -> e
    long cacheHits -> f
    long cacheMisses -> g
    org.klab.avex_sp.util.Cache$OnExpiredListener expiredListener -> h
    void setExpiredListener(org.klab.avex_sp.util.Cache$OnExpiredListener) -> a
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object remove$7e8b2351(java.lang.Object) -> a
    void clear() -> clear
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.util.Collection values() -> values
    boolean containsKey(java.lang.Object) -> containsKey
    void putAll(java.util.Map) -> putAll
    boolean containsValue(java.lang.Object) -> containsValue
    java.util.Set entrySet() -> entrySet
    java.util.Set keySet() -> keySet
    void deleteExpiredEntries() -> a
    void cullCache() -> b
org.klab.avex_sp.util.Cache$1 -> org.klab.avex_sp.b.o:
    java.util.Collection values -> a
    org.klab.avex_sp.util.Cache this$0 -> b
    java.util.Iterator iterator() -> iterator
    int size() -> size
org.klab.avex_sp.util.Cache$1$1 -> org.klab.avex_sp.b.c:
    java.util.Iterator it -> a
    org.klab.avex_sp.util.Cache$1 this$1 -> b
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
org.klab.avex_sp.util.Cache$2 -> org.klab.avex_sp.b.q:
    java.util.Set set -> a
    org.klab.avex_sp.util.Cache this$0 -> b
    java.util.Iterator iterator() -> iterator
    int size() -> size
    java.util.Set access$0(org.klab.avex_sp.util.Cache$2) -> a
org.klab.avex_sp.util.Cache$2$1 -> org.klab.avex_sp.b.l:
    java.util.Iterator it -> a
    org.klab.avex_sp.util.Cache$2 this$1 -> b
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
org.klab.avex_sp.util.Cache$2$1$1 -> org.klab.avex_sp.b.r:
    org.klab.avex_sp.util.Cache$2$1 this$2 -> b
    java.lang.Object setValue(java.lang.Object) -> setValue
org.klab.avex_sp.util.Cache$CacheObject -> org.klab.avex_sp.b.k:
    java.lang.Object object -> a
    org.klab.avex_sp.util.Cache$LinkedListNode lastAccessedListNode -> b
    org.klab.avex_sp.util.Cache$LinkedListNode ageListNode -> c
    int readCount -> d
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.klab.avex_sp.util.Cache$LinkedList -> org.klab.avex_sp.b.e:
    org.klab.avex_sp.util.Cache$LinkedListNode head -> a
    org.klab.avex_sp.util.Cache$LinkedListNode getLast() -> a
    org.klab.avex_sp.util.Cache$LinkedListNode addFirst(org.klab.avex_sp.util.Cache$LinkedListNode) -> a
    org.klab.avex_sp.util.Cache$LinkedListNode addFirst(java.lang.Object) -> a
    void clear() -> b
    java.lang.String toString() -> toString
org.klab.avex_sp.util.Cache$LinkedListNode -> org.klab.avex_sp.b.b:
    org.klab.avex_sp.util.Cache$LinkedListNode previous -> a
    org.klab.avex_sp.util.Cache$LinkedListNode next -> b
    java.lang.Object object -> c
    long timestamp -> d
    void remove() -> a
    java.lang.String toString() -> toString
org.klab.avex_sp.util.Cache$OnExpiredListener -> org.klab.avex_sp.b.f:
    void onExpired(java.lang.Object,java.lang.Object) -> a
org.klab.avex_sp.util.DateUtil -> org.klab.avex_sp.b.j:
    java.text.SimpleDateFormat SDF -> a
    java.text.SimpleDateFormat SDFS -> b
    java.util.Date convertStr2Date(java.lang.String) -> a
    java.util.Date convertStrShort2Date(java.lang.String) -> b
    java.lang.String getDate_RFC1123_LIKE_to_UNKNOWN(java.lang.String) -> c
    java.lang.String getDate_JSTTIME_SHORT_to_JSTTIME_SHORT(java.lang.String) -> d
org.klab.avex_sp.util.DebugUtil -> org.klab.avex_sp.b.m:
    void setDebug(android.app.Activity) -> a
org.klab.avex_sp.util.DebugUtil$1 -> org.klab.avex_sp.b.n:
    android.app.Activity val$activity -> a
    void uncaughtException(java.lang.Thread,java.lang.Throwable) -> uncaughtException
org.klab.avex_sp.util.ImageCache -> org.klab.avex_sp.b.h:
    java.util.Map cache -> a
    java.util.Set expired -> b
    int hitCount -> c
    int unhitCount -> d
    android.graphics.Bitmap getImage(java.lang.String) -> a
    void setImage(java.lang.String,android.graphics.Bitmap) -> a
    java.util.Set getExpired() -> a
    java.util.Set access$0() -> b
org.klab.avex_sp.util.ImageCache$1 -> org.klab.avex_sp.b.p:
    void onExpired(java.lang.Object,java.lang.Object) -> a
org.klab.avex_sp.widget.adpterview.OnScrollListener -> org.klab.avex_sp.widget.a.a:
    void onScrollStateChanged(android.widget.AdapterView,int) -> a
org.klab.avex_sp.widget.coverflow.CoverFlowGallery -> org.klab.avex_sp.widget.coverflow.CoverFlowGallery:
    android.graphics.Camera mCamera -> a
    int mMaxRotationAngle -> b
    int mMaxZoom -> c
    int mCoveflowCenter -> d
    boolean getChildStaticTransformation(android.view.View,android.view.animation.Transformation) -> getChildStaticTransformation
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void transformImageBitmap(android.widget.ImageView,android.view.animation.Transformation,int) -> a
    int getChildDrawingOrder(int,int) -> getChildDrawingOrder
org.klab.avex_sp.widget.coverflow.CoverFlowImageAdapterBase -> org.klab.avex_sp.widget.coverflow.a:
    int REFLECTION_GAP -> a
    android.content.Context mContext -> b
    boolean mIsUserEffect -> c
    android.widget.Gallery$LayoutParams mLayoutParams -> d
    java.util.List items -> e
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.graphics.Bitmap makeReflectedImage(android.graphics.Bitmap,int) -> a
    android.graphics.Bitmap makeResizedImage(android.graphics.Bitmap,int,int) -> a
org.klab.avex_sp.widget.flowview.FlowIndicator -> org.klab.avex_sp.widget.flowview.b:
org.klab.avex_sp.widget.flowview.FlowView -> org.klab.avex_sp.widget.flowview.FlowView:
    java.util.LinkedList mLoadedViews -> a
    int mCurrentBufferIndex -> b
    int mCurrentAdapterIndex -> c
    int mSideBuffer -> d
    android.widget.Scroller mScroller -> e
    android.view.VelocityTracker mVelocityTracker -> f
    int mTouchState -> g
    float mLastMotionX -> h
    float mLastMotionY -> i
    int mTouchSlop -> j
    int mMaximumVelocity -> k
    int mCurrentScreen -> l
    int mNextScreen -> m
    boolean mFirstLayout -> n
    org.klab.avex_sp.widget.flowview.FlowView$ViewSwitchListener mViewSwitchListener -> o
    android.widget.Adapter mAdapter -> p
    int mLastScrollDirection -> q
    org.klab.avex_sp.widget.flowview.FlowView$AdapterDataSetObserver mDataSetObserver -> r
    org.klab.avex_sp.widget.flowview.FlowIndicator mIndicator -> s
    org.klab.avex_sp.widget.adpterview.OnScrollListener onScrollListener -> t
    int scrollState -> u
    boolean $assertionsDisabled -> v
    int[] $SWITCH_TABLE$org$klab$avex_sp$widget$flowview$FlowView$Stage -> w
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    org.klab.avex_sp.widget.flowview.FlowView$Stage processTouchEvent(android.view.MotionEvent) -> a
    void onScrollChanged(int,int,int,int) -> onScrollChanged
    void snapToScreen(int) -> a
    void computeScroll() -> computeScroll
    void setVisibleView(int,boolean) -> a
    void setOnViewSwitchListener(org.klab.avex_sp.widget.flowview.FlowView$ViewSwitchListener) -> a
    android.widget.Adapter getAdapter() -> getAdapter
    void setAdapter(android.widget.Adapter) -> setAdapter
    android.view.View getSelectedView() -> getSelectedView
    void setSelection(int) -> setSelection
    android.view.View makeAndAddView(int,boolean,android.view.View) -> a
    void logBuffer() -> a
    void setOnScrollListener(org.klab.avex_sp.widget.adpterview.OnScrollListener) -> a
    void fireScrollStateChanged(int) -> b
    int access$0(org.klab.avex_sp.widget.flowview.FlowView) -> a
    android.widget.Adapter access$1(org.klab.avex_sp.widget.flowview.FlowView) -> b
    void access$2(org.klab.avex_sp.widget.flowview.FlowView,int) -> a
    void access$3(org.klab.avex_sp.widget.flowview.FlowView) -> c
    int[] $SWITCH_TABLE$org$klab$avex_sp$widget$flowview$FlowView$Stage() -> b
org.klab.avex_sp.widget.flowview.FlowView$AdapterDataSetObserver -> org.klab.avex_sp.widget.flowview.d:
    org.klab.avex_sp.widget.flowview.FlowView this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
org.klab.avex_sp.widget.flowview.FlowView$Stage -> org.klab.avex_sp.widget.flowview.c:
    org.klab.avex_sp.widget.flowview.FlowView$Stage None -> a
    org.klab.avex_sp.widget.flowview.FlowView$Stage Scroll -> b
    org.klab.avex_sp.widget.flowview.FlowView$Stage End -> c
    org.klab.avex_sp.widget.flowview.FlowView$Stage[] ENUM$VALUES -> d
    org.klab.avex_sp.widget.flowview.FlowView$Stage[] values() -> values
    org.klab.avex_sp.widget.flowview.FlowView$Stage valueOf(java.lang.String) -> valueOf
org.klab.avex_sp.widget.flowview.FlowView$ViewSwitchListener -> org.klab.avex_sp.widget.flowview.a:
    void onSwitched$5359dc9a(int) -> a
org.klab.avex_sp.widget.gallery.ScrollDetectableGallery -> org.klab.avex_sp.widget.gallery.ScrollDetectableGallery:
    org.klab.avex_sp.widget.adpterview.OnScrollListener onScrollListener -> a
    int scrollState -> b
    org.klab.avex_sp.widget.gallery.ScrollDetectableGallery$FlingRunnable mFlingRunnable -> c
    void setOnScrollListener(org.klab.avex_sp.widget.adpterview.OnScrollListener) -> a
    void fireScrollStateChanged(int) -> a
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
    boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onScroll
org.klab.avex_sp.widget.gallery.ScrollDetectableGallery$FlingRunnable -> org.klab.avex_sp.widget.gallery.a:
    android.widget.Scroller mScroller -> a
    org.klab.avex_sp.widget.gallery.ScrollDetectableGallery this$0 -> b
    void startUsingVelocity(int) -> a
    void endFling$1385ff() -> a
    void run() -> run
org.klab.avex_sp.widget.listview.AdapterWrapper -> org.klab.avex_sp.widget.listview.g:
    android.widget.ListAdapter wrapped -> a
    java.lang.Object getItem(int) -> getItem
    int getCount() -> getCount
    int getViewTypeCount() -> getViewTypeCount
    int getItemViewType(int) -> getItemViewType
    boolean areAllItemsEnabled() -> areAllItemsEnabled
    boolean isEnabled(int) -> isEnabled
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    long getItemId(int) -> getItemId
    android.widget.ListAdapter getWrappedAdapter() -> b
org.klab.avex_sp.widget.listview.AdapterWrapper$1 -> org.klab.avex_sp.widget.listview.d:
    org.klab.avex_sp.widget.listview.AdapterWrapper this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
org.klab.avex_sp.widget.listview.EndlessAdapter -> org.klab.avex_sp.widget.listview.f:
    android.view.View pendingView -> a
    android.view.View dummyView -> b
    java.util.concurrent.atomic.AtomicBoolean keepOnAppending -> c
    int pendingResource -> d
    int pagingSize -> e
    int getCount() -> getCount
    int getItemViewType(int) -> getItemViewType
    int getViewTypeCount() -> getViewTypeCount
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    android.view.View getDummyView$24a0cbf6() -> a
org.klab.avex_sp.widget.listview.PullToRefreshEndlessListView -> org.klab.avex_sp.widget.listview.PullToRefreshEndlessListView:
    org.klab.avex_sp.widget.listview.PullToRefreshEndlessListView$RefreshListener refreshListener -> b
    void setAdapter(android.widget.ListAdapter) -> setAdapter
    android.widget.ListAdapter getWrappedAdapter() -> e
    org.klab.avex_sp.widget.listview.PullToRefreshEndlessListView$RefreshListener access$0(org.klab.avex_sp.widget.listview.PullToRefreshEndlessListView) -> a
org.klab.avex_sp.widget.listview.PullToRefreshEndlessListView$1 -> org.klab.avex_sp.widget.listview.n:
    org.klab.avex_sp.widget.listview.PullToRefreshEndlessListView this$0 -> a
    void onRefresh() -> a
    void onRefreshFT() -> b
org.klab.avex_sp.widget.listview.PullToRefreshEndlessListView$1$1 -> org.klab.avex_sp.widget.listview.j:
    org.klab.avex_sp.widget.listview.PullToRefreshEndlessListView$1 this$1 -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.klab.avex_sp.widget.listview.PullToRefreshEndlessListView$1$2 -> org.klab.avex_sp.widget.listview.i:
    org.klab.avex_sp.widget.listview.PullToRefreshEndlessListView$1 this$1 -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.klab.avex_sp.widget.listview.PullToRefreshEndlessListView$2 -> org.klab.avex_sp.widget.listview.l:
    org.klab.avex_sp.widget.listview.PullToRefreshEndlessListView this$0 -> a
    android.view.View getDummyView$24a0cbf6() -> a
org.klab.avex_sp.widget.listview.PullToRefreshEndlessListView$DefaultRefreshListener -> org.klab.avex_sp.widget.listview.k:
    android.widget.ArrayAdapter adapter -> a
    int pagingSize -> b
    int getPagingSize() -> c
    java.util.List getItems(int) -> a
    java.util.List getUniqueItems(int) -> b
    void setResultLower(java.lang.Object) -> b
    java.lang.Object downloadLower() -> b
    void setResultUpper(java.lang.Object) -> a
    java.lang.Object downloadUpper() -> a
org.klab.avex_sp.widget.listview.PullToRefreshEndlessListView$RefreshListener -> org.klab.avex_sp.widget.listview.b:
    java.lang.Object downloadUpper() -> a
    void setResultUpper(java.lang.Object) -> a
    java.lang.Object downloadLower() -> b
    void setResultLower(java.lang.Object) -> b
    int getPagingSize() -> c
org.klab.avex_sp.widget.listview.PullToRefreshEndlessListView$Refreshable -> org.klab.avex_sp.widget.listview.a:
    org.klab.avex_sp.widget.listview.PullToRefreshEndlessListView$RefreshListener getRefreshListener() -> a
org.klab.avex_sp.widget.listview.PullToRefreshListView -> org.klab.avex_sp.widget.listview.PullToRefreshListView:
    org.klab.avex_sp.widget.listview.PullToRefreshListView$OnRefreshListener mOnRefreshListener -> b
    android.widget.AbsListView$OnScrollListener mOnScrollListener -> c
    android.view.LayoutInflater mInflater -> a
    android.widget.LinearLayout mRefreshView -> d
    android.widget.TextView mRefreshViewText -> e
    android.widget.ImageView mRefreshViewImage -> f
    android.widget.ProgressBar mRefreshViewProgress -> g
    android.widget.TextView mRefreshViewLastUpdated -> h
    int mCurrentScrollState -> i
    int mRefreshState -> j
    android.view.animation.RotateAnimation mFlipAnimation -> k
    android.view.animation.RotateAnimation mReverseFlipAnimation -> l
    int mRefreshViewHeight -> m
    int mRefreshOriginalTopPadding -> n
    int mRefreshOriginalBottomPadding -> o
    int mLastMotionY -> p
    android.widget.LinearLayout mRefreshViewFT -> q
    android.widget.TextView mRefreshViewTextFT -> r
    android.widget.ProgressBar mRefreshViewProgressFT -> s
    int mRefreshFTOriginalTopPadding -> t
    int mRefreshFTOriginalBottomPadding -> u
    int mRefreshViewFTHeight -> v
    boolean isPullHeaderVisible -> w
    boolean isPullFooterVisible -> x
    boolean isLastPosition -> y
    int mTotalItemCount -> z
    int mVisibleItemCount -> A
    void init(android.content.Context) -> a
    void onAttachedToWindow() -> onAttachedToWindow
    void setAdapter(android.widget.ListAdapter) -> setAdapter
    void setOnScrollListener(android.widget.AbsListView$OnScrollListener) -> setOnScrollListener
    void setOnRefreshListener(org.klab.avex_sp.widget.listview.PullToRefreshListView$OnRefreshListener) -> a
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void resetHeaderPadding() -> f
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void prepareForRefresh() -> a
    void onRefresh() -> b
    void onRefreshComplete() -> c
    void onRefreshCompleteFT() -> d
    boolean performItemClick(android.view.View,int,long) -> performItemClick
    android.widget.ListAdapter getWrappedAdapter() -> e
    void headerInvisible() -> g
    void footerInvisible() -> h
    int access$0(org.klab.avex_sp.widget.listview.PullToRefreshListView) -> a
org.klab.avex_sp.widget.listview.PullToRefreshListView$OnClickRefreshListener -> org.klab.avex_sp.widget.listview.h:
    org.klab.avex_sp.widget.listview.PullToRefreshListView this$0 -> a
    void onClick(android.view.View) -> onClick
org.klab.avex_sp.widget.listview.PullToRefreshListView$OnRefreshListener -> org.klab.avex_sp.widget.listview.m:
    void onRefresh() -> a
    void onRefreshFT() -> b
org.klab.avex_sp.widget.listview.RefreshableArrayAdapter -> org.klab.avex_sp.widget.listview.e:
    org.klab.avex_sp.widget.listview.PullToRefreshEndlessListView$RefreshListener getRefreshListener() -> a
    java.util.List getItemsOnRefresh(int) -> a
org.klab.avex_sp.widget.listview.RefreshableArrayAdapter$1 -> org.klab.avex_sp.widget.listview.c:
    org.klab.avex_sp.widget.listview.RefreshableArrayAdapter this$0 -> a
    java.util.List getItems(int) -> a
twitter4j.AccountSettings -> twitter4j.k:
twitter4j.AccountSettingsJSONImpl -> twitter4j.AccountSettingsJSONImpl:
    long serialVersionUID -> serialVersionUID
    boolean SLEEP_TIME_ENABLED -> SLEEP_TIME_ENABLED
    java.lang.String SLEEP_START_TIME -> SLEEP_START_TIME
    java.lang.String SLEEP_END_TIME -> SLEEP_END_TIME
    twitter4j.Location[] TREND_LOCATION -> TREND_LOCATION
    boolean GEO_ENABLED -> GEO_ENABLED
    boolean isSleepTimeEnabled() -> isSleepTimeEnabled
    java.lang.String getSleepStartTime() -> getSleepStartTime
    java.lang.String getSleepEndTime() -> getSleepEndTime
    twitter4j.Location[] getTrendLocations() -> getTrendLocations
    boolean isGeoEnabled() -> isGeoEnabled
twitter4j.AccountTotals -> twitter4j.h:
twitter4j.AccountTotalsJSONImpl -> twitter4j.AccountTotalsJSONImpl:
    long serialVersionUID -> serialVersionUID
    int updates -> updates
    int followers -> followers
    int favorites -> favorites
    int friends -> friends
    int getUpdates() -> getUpdates
    int getFollowers() -> getFollowers
    int getFavorites() -> getFavorites
    int getFriends() -> getFriends
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.Annotation -> twitter4j.Annotation:
    long serialVersionUID -> serialVersionUID
    java.lang.String type -> type
    java.util.Map attributes -> attributes
    java.lang.String getType() -> getType
    void setType(java.lang.String) -> setType
    twitter4j.Annotation type(java.lang.String) -> type
    java.util.Map getAttributes() -> getAttributes
    void setAttributes(java.util.Map) -> setAttributes
    twitter4j.Annotation attributes(java.util.Map) -> attributes
    void addAttribute(java.lang.String,java.lang.String) -> addAttribute
    twitter4j.Annotation attribute(java.lang.String,java.lang.String) -> attribute
    boolean isEmpty() -> isEmpty
    java.lang.Integer size() -> size
    java.lang.String asParameterValue() -> asParameterValue
    org.json.JSONObject asJSONObject() -> asJSONObject
    int compareTo(twitter4j.Annotation) -> compareTo
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.util.SortedSet sortedNames() -> sortedNames
    int compareTo(java.lang.Object) -> compareTo
twitter4j.Annotations -> twitter4j.Annotations:
    long serialVersionUID -> serialVersionUID
    int lengthLimit -> lengthLimit
    java.util.List annotations -> annotations
    java.util.List getAnnotations() -> getAnnotations
    void setAnnotations(java.util.List) -> setAnnotations
    void addAnnotation(twitter4j.Annotation) -> addAnnotation
    twitter4j.Annotations annotation(twitter4j.Annotation) -> annotation
    boolean isEmpty() -> isEmpty
    java.lang.Integer size() -> size
    boolean isExceedingLengthLimit(twitter4j.Annotations) -> isExceedingLengthLimit
    boolean isExceedingLengthLimit() -> isExceedingLengthLimit
    java.lang.String asParameterValue() -> asParameterValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.util.List getSortedAnnotations() -> getSortedAnnotations
twitter4j.Category -> twitter4j.t:
twitter4j.CategoryJSONImpl -> twitter4j.CategoryJSONImpl:
    java.lang.String name -> name
    java.lang.String slug -> slug
    int size -> size
    long serialVersionUID -> serialVersionUID
    void init(org.json.JSONObject) -> init
    twitter4j.ResponseList createCategoriesList(twitter4j.internal.http.HttpResponse,twitter4j.conf.Configuration) -> createCategoriesList
    twitter4j.ResponseList createCategoriesList(org.json.JSONArray,twitter4j.internal.http.HttpResponse,twitter4j.conf.Configuration) -> createCategoriesList
    java.lang.String getName() -> getName
    java.lang.String getSlug() -> getSlug
    int getSize() -> getSize
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.CursorSupport -> twitter4j.CursorSupport:
    long START -> START
    boolean hasPrevious() -> hasPrevious
    long getPreviousCursor() -> getPreviousCursor
    boolean hasNext() -> hasNext
    long getNextCursor() -> getNextCursor
twitter4j.DirectMessage -> twitter4j.i:
    long getId() -> getId
twitter4j.DirectMessageJSONImpl -> twitter4j.DirectMessageJSONImpl:
    long serialVersionUID -> serialVersionUID
    long id -> id
    java.lang.String text -> text
    long senderId -> senderId
    long recipientId -> recipientId
    java.util.Date createdAt -> createdAt
    java.lang.String senderScreenName -> senderScreenName
    java.lang.String recipientScreenName -> recipientScreenName
    twitter4j.User sender -> sender
    twitter4j.User recipient -> recipient
    void init(org.json.JSONObject) -> init
    long getId() -> getId
    java.lang.String getText() -> getText
    long getSenderId() -> getSenderId
    long getRecipientId() -> getRecipientId
    java.util.Date getCreatedAt() -> getCreatedAt
    java.lang.String getSenderScreenName() -> getSenderScreenName
    java.lang.String getRecipientScreenName() -> getRecipientScreenName
    twitter4j.User getSender() -> getSender
    twitter4j.User getRecipient() -> getRecipient
    twitter4j.ResponseList createDirectMessageList(twitter4j.internal.http.HttpResponse,twitter4j.conf.Configuration) -> createDirectMessageList
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
twitter4j.ExceptionDiagnosis -> twitter4j.ExceptionDiagnosis:
    int stackLineHash -> stackLineHash
    int lineNumberHash -> lineNumberHash
    java.lang.String hexString -> hexString
    java.lang.Throwable th -> th
    long serialVersionUID -> serialVersionUID
    int getStackLineHash() -> getStackLineHash
    java.lang.String getStackLineHashAsHex() -> getStackLineHashAsHex
    int getLineNumberHash() -> getLineNumberHash
    java.lang.String getLineNumberHashAsHex() -> getLineNumberHashAsHex
    java.lang.String asHexString() -> asHexString
    java.lang.String toHexString(int) -> toHexString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.FilterQuery -> twitter4j.FilterQuery:
    long serialVersionUID -> serialVersionUID
    int count -> count
    long[] follow -> follow
    java.lang.String[] track -> track
    double[][] locations -> locations
    boolean includeEntities -> includeEntities
    twitter4j.FilterQuery count(int) -> count
    twitter4j.FilterQuery follow(long[]) -> follow
    twitter4j.FilterQuery track(java.lang.String[]) -> track
    twitter4j.FilterQuery locations(double[][]) -> locations
    twitter4j.FilterQuery setIncludeEntities(boolean) -> setIncludeEntities
    twitter4j.internal.http.HttpParameter[] asHttpParameterArray() -> asHttpParameterArray
    java.lang.String toLocationsString(double[][]) -> toLocationsString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.Friendship -> twitter4j.ac:
twitter4j.FriendshipJSONImpl -> twitter4j.FriendshipJSONImpl:
    long serialVersionUID -> serialVersionUID
    long id -> id
    java.lang.String name -> name
    java.lang.String screenName -> screenName
    boolean following -> following
    boolean followedBy -> followedBy
    twitter4j.ResponseList createFriendshipList(twitter4j.internal.http.HttpResponse,twitter4j.conf.Configuration) -> createFriendshipList
    long getId() -> getId
    java.lang.String getName() -> getName
    java.lang.String getScreenName() -> getScreenName
    boolean isFollowing() -> isFollowing
    boolean isFollowedBy() -> isFollowedBy
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.GeoLocation -> twitter4j.GeoLocation:
    double latitude -> latitude
    double longitude -> longitude
    long serialVersionUID -> serialVersionUID
    twitter4j.GeoLocation getInstance(org.json.JSONObject) -> getInstance
    twitter4j.GeoLocation[][] coordinatesAsGeoLocationArray(org.json.JSONArray) -> coordinatesAsGeoLocationArray
    double getLatitude() -> getLatitude
    double getLongitude() -> getLongitude
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.GeoQuery -> twitter4j.GeoQuery:
    twitter4j.GeoLocation location -> location
    java.lang.String ip -> ip
    java.lang.String accuracy -> accuracy
    java.lang.String granularity -> granularity
    int maxResults -> maxResults
    java.lang.String NEIGHBORHOOD -> NEIGHBORHOOD
    java.lang.String CITY -> CITY
    long serialVersionUID -> serialVersionUID
    twitter4j.GeoLocation getLocation() -> getLocation
    java.lang.String getIp() -> getIp
    java.lang.String getAccuracy() -> getAccuracy
    void setAccuracy(java.lang.String) -> setAccuracy
    twitter4j.GeoQuery accuracy(java.lang.String) -> accuracy
    java.lang.String getGranularity() -> getGranularity
    void setGranularity(java.lang.String) -> setGranularity
    twitter4j.GeoQuery granularity(java.lang.String) -> granularity
    int getMaxResults() -> getMaxResults
    void setMaxResults(int) -> setMaxResults
    twitter4j.GeoQuery maxResults(int) -> maxResults
    twitter4j.internal.http.HttpParameter[] asHttpParameterArray() -> asHttpParameterArray
    void appendParameter(java.lang.String,java.lang.String,java.util.List) -> appendParameter
    void appendParameter(java.lang.String,int,java.util.List) -> appendParameter
    void appendParameter(java.lang.String,double,java.util.List) -> appendParameter
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.HashtagEntity -> twitter4j.l:
twitter4j.HashtagEntityJSONImpl -> twitter4j.HashtagEntityJSONImpl:
    long serialVersionUID -> serialVersionUID
    int start -> start
    int end -> end
    java.lang.String text -> text
    void init(org.json.JSONObject) -> init
    java.lang.String getText() -> getText
    int getStart() -> getStart
    int getEnd() -> getEnd
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.IDs -> twitter4j.d:
    long[] getIDs() -> getIDs
twitter4j.IDsJSONImpl -> twitter4j.IDsJSONImpl:
    long[] ids -> ids
    long previousCursor -> previousCursor
    long nextCursor -> nextCursor
    long serialVersionUID -> serialVersionUID
    void init(java.lang.String) -> init
    long[] getIDs() -> getIDs
    boolean hasPrevious() -> hasPrevious
    long getPreviousCursor() -> getPreviousCursor
    boolean hasNext() -> hasNext
    long getNextCursor() -> getNextCursor
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.LanguageJSONImpl -> twitter4j.LanguageJSONImpl:
    java.lang.String name -> name
    java.lang.String code -> code
    java.lang.String status -> status
    void init(org.json.JSONObject) -> init
    java.lang.String getName() -> getName
    java.lang.String getCode() -> getCode
    java.lang.String getStatus() -> getStatus
    twitter4j.ResponseList createLanguageList(twitter4j.internal.http.HttpResponse,twitter4j.conf.Configuration) -> createLanguageList
    twitter4j.ResponseList createLanguageList(org.json.JSONArray,twitter4j.internal.http.HttpResponse,twitter4j.conf.Configuration) -> createLanguageList
twitter4j.Location -> twitter4j.m:
twitter4j.LocationJSONImpl -> twitter4j.LocationJSONImpl:
    int woeid -> woeid
    java.lang.String countryName -> countryName
    java.lang.String countryCode -> countryCode
    java.lang.String placeName -> placeName
    int placeCode -> placeCode
    java.lang.String name -> name
    java.lang.String url -> url
    long serialVersionUID -> serialVersionUID
    twitter4j.ResponseList createLocationList(twitter4j.internal.http.HttpResponse,twitter4j.conf.Configuration) -> createLocationList
    twitter4j.ResponseList createLocationList(org.json.JSONArray,boolean) -> createLocationList
    int getWoeid() -> getWoeid
    java.lang.String getCountryName() -> getCountryName
    java.lang.String getCountryCode() -> getCountryCode
    java.lang.String getPlaceName() -> getPlaceName
    int getPlaceCode() -> getPlaceCode
    java.lang.String getName() -> getName
    java.lang.String getURL() -> getURL
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.MediaEntity -> twitter4j.MediaEntity:
twitter4j.MediaEntity$Size -> twitter4j.MediaEntity$Size:
    java.lang.Integer THUMB -> THUMB
    java.lang.Integer SMALL -> SMALL
    java.lang.Integer MEDIUM -> MEDIUM
    java.lang.Integer LARGE -> LARGE
    int FIT -> FIT
    int CROP -> CROP
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int getResize() -> getResize
twitter4j.MediaEntityJSONImpl -> twitter4j.MediaEntityJSONImpl:
    long serialVersionUID -> serialVersionUID
    long id -> id
    int start -> start
    int end -> end
    java.net.URL url -> url
    java.net.URL mediaURL -> mediaURL
    java.net.URL mediaURLHttps -> mediaURLHttps
    java.net.URL expandedURL -> expandedURL
    java.lang.String displayURL -> displayURL
    java.util.Map sizes -> sizes
    long getId() -> getId
    java.net.URL getMediaURL() -> getMediaURL
    java.net.URL getMediaURLHttps() -> getMediaURLHttps
    java.net.URL getURL() -> getURL
    java.lang.String getDisplayURL() -> getDisplayURL
    java.net.URL getExpandedURL() -> getExpandedURL
    java.util.Map getSizes() -> getSizes
    int getStart() -> getStart
    int getEnd() -> getEnd
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.MediaEntityJSONImpl$Size -> twitter4j.MediaEntityJSONImpl$Size:
    long serialVersionUID -> serialVersionUID
    int width -> width
    int height -> height
    int resize -> resize
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int getResize() -> getResize
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.PagableResponseList -> twitter4j.p:
twitter4j.PagableResponseListImpl -> twitter4j.PagableResponseListImpl:
    long previousCursor -> previousCursor
    long nextCursor -> nextCursor
    long serialVersionUID -> serialVersionUID
    boolean hasPrevious() -> hasPrevious
    long getPreviousCursor() -> getPreviousCursor
    boolean hasNext() -> hasNext
    long getNextCursor() -> getNextCursor
twitter4j.Paging -> twitter4j.Paging:
    int page -> page
    int count -> count
    long sinceId -> sinceId
    long maxId -> maxId
    long serialVersionUID -> serialVersionUID
    char[] S -> S
    char[] SMCP -> SMCP
    java.lang.String COUNT -> COUNT
    java.lang.String PER_PAGE -> PER_PAGE
    twitter4j.internal.http.HttpParameter[] NULL_PARAMETER_ARRAY -> NULL_PARAMETER_ARRAY
    java.util.List NULL_PARAMETER_LIST -> NULL_PARAMETER_LIST
    java.util.List asPostParameterList() -> asPostParameterList
    twitter4j.internal.http.HttpParameter[] asPostParameterArray() -> asPostParameterArray
    java.util.List asPostParameterList(char[]) -> asPostParameterList
    java.util.List asPostParameterList(char[],java.lang.String) -> asPostParameterList
    twitter4j.internal.http.HttpParameter[] asPostParameterArray(char[],java.lang.String) -> asPostParameterArray
    void addPostParameter(char[],char,java.util.List,java.lang.String,long) -> addPostParameter
    int getPage() -> getPage
    void setPage(int) -> setPage
    int getCount() -> getCount
    void setCount(int) -> setCount
    twitter4j.Paging count(int) -> count
    long getSinceId() -> getSinceId
    void setSinceId(long) -> setSinceId
    twitter4j.Paging sinceId(long) -> sinceId
    long getMaxId() -> getMaxId
    void setMaxId(long) -> setMaxId
    twitter4j.Paging maxId(long) -> maxId
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.Place -> twitter4j.aa:
    java.lang.String getId() -> getId
twitter4j.PlaceJSONImpl -> twitter4j.PlaceJSONImpl:
    java.lang.String name -> name
    java.lang.String streetAddress -> streetAddress
    java.lang.String countryCode -> countryCode
    java.lang.String id -> id
    java.lang.String country -> country
    java.lang.String placeType -> placeType
    java.lang.String url -> url
    java.lang.String fullName -> fullName
    java.lang.String boundingBoxType -> boundingBoxType
    twitter4j.GeoLocation[][] boundingBoxCoordinates -> boundingBoxCoordinates
    java.lang.String geometryType -> geometryType
    twitter4j.GeoLocation[][] geometryCoordinates -> geometryCoordinates
    twitter4j.Place[] containedWithIn -> containedWithIn
    long serialVersionUID -> serialVersionUID
    void init(org.json.JSONObject) -> init
    int compareTo(twitter4j.Place) -> compareTo
    twitter4j.ResponseList createPlaceList(twitter4j.internal.http.HttpResponse,twitter4j.conf.Configuration) -> createPlaceList
    twitter4j.ResponseList createPlaceList(org.json.JSONArray,twitter4j.internal.http.HttpResponse,twitter4j.conf.Configuration) -> createPlaceList
    java.lang.String getName() -> getName
    java.lang.String getStreetAddress() -> getStreetAddress
    java.lang.String getCountryCode() -> getCountryCode
    java.lang.String getId() -> getId
    java.lang.String getCountry() -> getCountry
    java.lang.String getPlaceType() -> getPlaceType
    java.lang.String getURL() -> getURL
    java.lang.String getFullName() -> getFullName
    java.lang.String getBoundingBoxType() -> getBoundingBoxType
    twitter4j.GeoLocation[][] getBoundingBoxCoordinates() -> getBoundingBoxCoordinates
    java.lang.String getGeometryType() -> getGeometryType
    twitter4j.GeoLocation[][] getGeometryCoordinates() -> getGeometryCoordinates
    twitter4j.Place[] getContainedWithIn() -> getContainedWithIn
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
twitter4j.ProfileImage -> twitter4j.ProfileImage:
    twitter4j.ProfileImage$ImageSize BIGGER -> BIGGER
    twitter4j.ProfileImage$ImageSize NORMAL -> NORMAL
    twitter4j.ProfileImage$ImageSize MINI -> MINI
    java.lang.String getURL() -> getURL
twitter4j.ProfileImage$1 -> twitter4j.q:
twitter4j.ProfileImage$ImageSize -> twitter4j.ProfileImage$ImageSize:
    java.util.Map instances -> instances
    long serialVersionUID -> serialVersionUID
    java.lang.String name -> name
    java.lang.String getName() -> getName
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    twitter4j.ProfileImage$ImageSize getInstance(java.lang.String) -> getInstance
    java.lang.Object readResolve() -> readResolve
twitter4j.ProfileImageImpl -> twitter4j.ProfileImageImpl:
    long serialVersionUID -> serialVersionUID
    java.lang.String url -> url
    java.lang.String getURL() -> getURL
twitter4j.Query -> twitter4j.Query:
    java.lang.String query -> query
    java.lang.String lang -> lang
    java.lang.String locale -> locale
    long maxId -> maxId
    int rpp -> rpp
    int page -> page
    java.lang.String since -> since
    long sinceId -> sinceId
    java.lang.String geocode -> geocode
    java.lang.String until -> until
    java.lang.String resultType -> resultType
    long serialVersionUID -> serialVersionUID
    java.lang.String MILES -> MILES
    java.lang.String KILOMETERS -> KILOMETERS
    java.lang.String MIXED -> MIXED
    java.lang.String POPULAR -> POPULAR
    java.lang.String RECENT -> RECENT
    java.lang.String getQuery() -> getQuery
    void setQuery(java.lang.String) -> setQuery
    twitter4j.Query query(java.lang.String) -> query
    java.lang.String getLang() -> getLang
    void setLang(java.lang.String) -> setLang
    twitter4j.Query lang(java.lang.String) -> lang
    java.lang.String getLocale() -> getLocale
    void setLocale(java.lang.String) -> setLocale
    twitter4j.Query locale(java.lang.String) -> locale
    long getMaxId() -> getMaxId
    void setMaxId(long) -> setMaxId
    twitter4j.Query maxId(long) -> maxId
    int getRpp() -> getRpp
    void setRpp(int) -> setRpp
    twitter4j.Query rpp(int) -> rpp
    int getPage() -> getPage
    void setPage(int) -> setPage
    twitter4j.Query page(int) -> page
    java.lang.String getSince() -> getSince
    void setSince(java.lang.String) -> setSince
    twitter4j.Query since(java.lang.String) -> since
    long getSinceId() -> getSinceId
    void setSinceId(long) -> setSinceId
    twitter4j.Query sinceId(long) -> sinceId
    java.lang.String getGeocode() -> getGeocode
    void setGeoCode(twitter4j.GeoLocation,double,java.lang.String) -> setGeoCode
    twitter4j.Query geoCode(twitter4j.GeoLocation,double,java.lang.String) -> geoCode
    java.lang.String getUntil() -> getUntil
    void setUntil(java.lang.String) -> setUntil
    twitter4j.Query until(java.lang.String) -> until
    java.lang.String getResultType() -> getResultType
    void setResultType(java.lang.String) -> setResultType
    twitter4j.Query resultType(java.lang.String) -> resultType
    twitter4j.internal.http.HttpParameter[] asHttpParameterArray() -> asHttpParameterArray
    void appendParameter(java.lang.String,java.lang.String,java.util.List) -> appendParameter
    void appendParameter(java.lang.String,long,java.util.List) -> appendParameter
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.QueryResult -> twitter4j.v:
    long getSinceId() -> getSinceId
    long getMaxId() -> getMaxId
    java.lang.String getRefreshUrl() -> getRefreshUrl
    int getResultsPerPage() -> getResultsPerPage
    java.lang.String getWarning() -> getWarning
    double getCompletedIn() -> getCompletedIn
    int getPage() -> getPage
    java.lang.String getQuery() -> getQuery
    java.util.List getTweets() -> getTweets
twitter4j.QueryResultJSONImpl -> twitter4j.QueryResultJSONImpl:
    long sinceId -> sinceId
    long maxId -> maxId
    java.lang.String refreshUrl -> refreshUrl
    int resultsPerPage -> resultsPerPage
    java.lang.String warning -> warning
    double completedIn -> completedIn
    int page -> page
    java.lang.String query -> query
    java.util.List tweets -> tweets
    long serialVersionUID -> serialVersionUID
    long getSinceId() -> getSinceId
    long getMaxId() -> getMaxId
    java.lang.String getRefreshUrl() -> getRefreshUrl
    int getResultsPerPage() -> getResultsPerPage
    java.lang.String getWarning() -> getWarning
    double getCompletedIn() -> getCompletedIn
    int getPage() -> getPage
    java.lang.String getQuery() -> getQuery
    java.util.List getTweets() -> getTweets
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.RateLimitStatus -> twitter4j.j:
    int getSecondsUntilReset() -> getSecondsUntilReset
twitter4j.RateLimitStatusEvent -> twitter4j.RateLimitStatusEvent:
    twitter4j.RateLimitStatus rateLimitStatus -> rateLimitStatus
    boolean isAccountRateLimitStatus -> isAccountRateLimitStatus
    long serialVersionUID -> serialVersionUID
    twitter4j.RateLimitStatus getRateLimitStatus() -> getRateLimitStatus
    boolean isAccountRateLimitStatus() -> isAccountRateLimitStatus
    boolean isIPRateLimitStatus() -> isIPRateLimitStatus
twitter4j.RateLimitStatusJSONImpl -> twitter4j.RateLimitStatusJSONImpl:
    int remainingHits -> remainingHits
    int hourlyLimit -> hourlyLimit
    int resetTimeInSeconds -> resetTimeInSeconds
    int secondsUntilReset -> secondsUntilReset
    java.util.Date resetTime -> resetTime
    long serialVersionUID -> serialVersionUID
    void init(org.json.JSONObject) -> init
    twitter4j.RateLimitStatus createFromResponseHeader(twitter4j.internal.http.HttpResponse) -> createFromResponseHeader
    twitter4j.RateLimitStatus createFeatureSpecificRateLimitStatusFromResponseHeader(twitter4j.internal.http.HttpResponse) -> createFeatureSpecificRateLimitStatusFromResponseHeader
    int getRemainingHits() -> getRemainingHits
    int getHourlyLimit() -> getHourlyLimit
    int getResetTimeInSeconds() -> getResetTimeInSeconds
    int getSecondsUntilReset() -> getSecondsUntilReset
    java.util.Date getResetTime() -> getResetTime
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.RateLimitStatusListener -> twitter4j.ab:
twitter4j.RelatedResults -> twitter4j.b:
twitter4j.RelatedResultsJSONImpl -> twitter4j.RelatedResultsJSONImpl:
    java.lang.String TWEETS_WITH_CONVERSATION -> TWEETS_WITH_CONVERSATION
    java.lang.String TWEETS_WITH_REPLY -> TWEETS_WITH_REPLY
    java.lang.String TWEETS_FROM_USER -> TWEETS_FROM_USER
    long serialVersionUID -> serialVersionUID
    java.util.Map tweetsMap -> tweetsMap
    void init(org.json.JSONArray,twitter4j.internal.http.HttpResponse,boolean) -> init
    twitter4j.ResponseList getTweetsWithConversation() -> getTweetsWithConversation
    twitter4j.ResponseList getTweetsWithReply() -> getTweetsWithReply
    twitter4j.ResponseList getTweetsFromUser() -> getTweetsFromUser
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
twitter4j.Relationship -> twitter4j.f:
    long getSourceUserId() -> getSourceUserId
    long getTargetUserId() -> getTargetUserId
    java.lang.String getSourceUserScreenName() -> getSourceUserScreenName
    java.lang.String getTargetUserScreenName() -> getTargetUserScreenName
twitter4j.RelationshipJSONImpl -> twitter4j.RelationshipJSONImpl:
    long serialVersionUID -> serialVersionUID
    long targetUserId -> targetUserId
    java.lang.String targetUserScreenName -> targetUserScreenName
    boolean sourceBlockingTarget -> sourceBlockingTarget
    boolean sourceNotificationsEnabled -> sourceNotificationsEnabled
    boolean sourceFollowingTarget -> sourceFollowingTarget
    boolean sourceFollowedByTarget -> sourceFollowedByTarget
    long sourceUserId -> sourceUserId
    java.lang.String sourceUserScreenName -> sourceUserScreenName
    twitter4j.ResponseList createRelationshipList(twitter4j.internal.http.HttpResponse,twitter4j.conf.Configuration) -> createRelationshipList
    long getSourceUserId() -> getSourceUserId
    long getTargetUserId() -> getTargetUserId
    boolean isSourceBlockingTarget() -> isSourceBlockingTarget
    java.lang.String getSourceUserScreenName() -> getSourceUserScreenName
    java.lang.String getTargetUserScreenName() -> getTargetUserScreenName
    boolean isSourceFollowingTarget() -> isSourceFollowingTarget
    boolean isTargetFollowingSource() -> isTargetFollowingSource
    boolean isSourceFollowedByTarget() -> isSourceFollowedByTarget
    boolean isTargetFollowedBySource() -> isTargetFollowedBySource
    boolean isSourceNotificationsEnabled() -> isSourceNotificationsEnabled
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.ResponseList -> twitter4j.z:
twitter4j.ResponseListImpl -> twitter4j.ResponseListImpl:
    twitter4j.RateLimitStatus rateLimitStatus -> rateLimitStatus
    twitter4j.RateLimitStatus featureSpecificRateLimitStatus -> featureSpecificRateLimitStatus
    int accessLevel -> accessLevel
    long serialVersionUID -> serialVersionUID
    twitter4j.RateLimitStatus getRateLimitStatus() -> getRateLimitStatus
    twitter4j.RateLimitStatus getFeatureSpecificRateLimitStatus() -> getFeatureSpecificRateLimitStatus
    int getAccessLevel() -> getAccessLevel
twitter4j.SavedSearch -> twitter4j.r:
    int getId() -> getId
twitter4j.SavedSearchJSONImpl -> twitter4j.SavedSearchJSONImpl:
    java.util.Date createdAt -> createdAt
    java.lang.String query -> query
    int position -> position
    java.lang.String name -> name
    int id -> id
    long serialVersionUID -> serialVersionUID
    twitter4j.ResponseList createSavedSearchList(twitter4j.internal.http.HttpResponse,twitter4j.conf.Configuration) -> createSavedSearchList
    void init(org.json.JSONObject) -> init
    int compareTo(twitter4j.SavedSearch) -> compareTo
    java.util.Date getCreatedAt() -> getCreatedAt
    java.lang.String getQuery() -> getQuery
    int getPosition() -> getPosition
    java.lang.String getName() -> getName
    int getId() -> getId
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
twitter4j.SimilarPlaces -> twitter4j.s:
twitter4j.SimilarPlacesImpl -> twitter4j.SimilarPlacesImpl:
    long serialVersionUID -> serialVersionUID
    java.lang.String token -> token
    java.lang.String getToken() -> getToken
    twitter4j.SimilarPlaces createSimilarPlaces(twitter4j.internal.http.HttpResponse,twitter4j.conf.Configuration) -> createSimilarPlaces
    int getAccessLevel() -> getAccessLevel
    twitter4j.RateLimitStatus getFeatureSpecificRateLimitStatus() -> getFeatureSpecificRateLimitStatus
    twitter4j.RateLimitStatus getRateLimitStatus() -> getRateLimitStatus
twitter4j.Status -> twitter4j.y:
    long getId() -> getId
twitter4j.StatusDeletionNotice -> twitter4j.u:
    long getStatusId() -> getStatusId
twitter4j.StatusDeletionNoticeImpl -> twitter4j.StatusDeletionNoticeImpl:
    long statusId -> statusId
    long userId -> userId
    long serialVersionUID -> serialVersionUID
    long getStatusId() -> getStatusId
    long getUserId() -> getUserId
    int compareTo(twitter4j.StatusDeletionNotice) -> compareTo
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
twitter4j.StatusJSONImpl -> twitter4j.StatusJSONImpl:
    twitter4j.internal.logging.Logger logger -> logger
    long serialVersionUID -> serialVersionUID
    java.util.Date createdAt -> createdAt
    long id -> id
    java.lang.String text -> text
    java.lang.String source -> source
    boolean isTruncated -> isTruncated
    long inReplyToStatusId -> inReplyToStatusId
    long inReplyToUserId -> inReplyToUserId
    boolean isFavorited -> isFavorited
    java.lang.String inReplyToScreenName -> inReplyToScreenName
    twitter4j.GeoLocation geoLocation -> geoLocation
    twitter4j.Place place -> place
    long retweetCount -> retweetCount
    boolean wasRetweetedByMe -> wasRetweetedByMe
    java.lang.String[] contributors -> contributors
    long[] contributorsIDs -> contributorsIDs
    twitter4j.Annotations annotations -> annotations
    twitter4j.Status retweetedStatus -> retweetedStatus
    twitter4j.UserMentionEntity[] userMentionEntities -> userMentionEntities
    twitter4j.URLEntity[] urlEntities -> urlEntities
    twitter4j.HashtagEntity[] hashtagEntities -> hashtagEntities
    twitter4j.MediaEntity[] mediaEntities -> mediaEntities
    twitter4j.User user -> user
    java.lang.Class class$twitter4j$StatusJSONImpl -> class$twitter4j$StatusJSONImpl
    void init(org.json.JSONObject) -> init
    int compareTo(twitter4j.Status) -> compareTo
    java.util.Date getCreatedAt() -> getCreatedAt
    long getId() -> getId
    java.lang.String getText() -> getText
    java.lang.String getSource() -> getSource
    boolean isTruncated() -> isTruncated
    long getInReplyToStatusId() -> getInReplyToStatusId
    long getInReplyToUserId() -> getInReplyToUserId
    java.lang.String getInReplyToScreenName() -> getInReplyToScreenName
    twitter4j.GeoLocation getGeoLocation() -> getGeoLocation
    twitter4j.Place getPlace() -> getPlace
    long[] getContributors() -> getContributors
    twitter4j.Annotations getAnnotations() -> getAnnotations
    boolean isFavorited() -> isFavorited
    twitter4j.User getUser() -> getUser
    boolean isRetweet() -> isRetweet
    twitter4j.Status getRetweetedStatus() -> getRetweetedStatus
    long getRetweetCount() -> getRetweetCount
    boolean isRetweetedByMe() -> isRetweetedByMe
    twitter4j.UserMentionEntity[] getUserMentionEntities() -> getUserMentionEntities
    twitter4j.URLEntity[] getURLEntities() -> getURLEntities
    twitter4j.HashtagEntity[] getHashtagEntities() -> getHashtagEntities
    twitter4j.MediaEntity[] getMediaEntities() -> getMediaEntities
    twitter4j.ResponseList createStatusList(twitter4j.internal.http.HttpResponse,twitter4j.conf.Configuration) -> createStatusList
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
    java.lang.Class class$(java.lang.String) -> class$
twitter4j.StatusUpdate -> twitter4j.StatusUpdate:
    java.lang.String status -> status
    long inReplyToStatusId -> inReplyToStatusId
    twitter4j.GeoLocation location -> location
    java.lang.String placeId -> placeId
    boolean displayCoordinates -> displayCoordinates
    twitter4j.Annotations annotations -> annotations
    long serialVersionUID -> serialVersionUID
    java.lang.String getStatus() -> getStatus
    long getInReplyToStatusId() -> getInReplyToStatusId
    void setInReplyToStatusId(long) -> setInReplyToStatusId
    twitter4j.StatusUpdate inReplyToStatusId(long) -> inReplyToStatusId
    twitter4j.GeoLocation getLocation() -> getLocation
    void setLocation(twitter4j.GeoLocation) -> setLocation
    twitter4j.StatusUpdate location(twitter4j.GeoLocation) -> location
    java.lang.String getPlaceId() -> getPlaceId
    void setPlaceId(java.lang.String) -> setPlaceId
    twitter4j.StatusUpdate placeId(java.lang.String) -> placeId
    boolean isDisplayCoordinates() -> isDisplayCoordinates
    void setDisplayCoordinates(boolean) -> setDisplayCoordinates
    twitter4j.StatusUpdate displayCoordinates(boolean) -> displayCoordinates
    twitter4j.Annotations getAnnotations() -> getAnnotations
    void setAnnotations(twitter4j.Annotations) -> setAnnotations
    twitter4j.StatusUpdate annotations(twitter4j.Annotations) -> annotations
    void addAnnotation(twitter4j.Annotation) -> addAnnotation
    twitter4j.StatusUpdate annotation(twitter4j.Annotation) -> annotation
    twitter4j.internal.http.HttpParameter[] asHttpParameterArray() -> asHttpParameterArray
    void appendParameter(java.lang.String,java.lang.String,java.util.List) -> appendParameter
    void appendParameter(java.lang.String,double,java.util.List) -> appendParameter
    void appendParameter(java.lang.String,long,java.util.List) -> appendParameter
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.Trend -> twitter4j.n:
    java.lang.String getName() -> getName
    java.lang.String getUrl() -> getUrl
    java.lang.String getQuery() -> getQuery
twitter4j.TrendJSONImpl -> twitter4j.TrendJSONImpl:
    java.lang.String name -> name
    java.lang.String url -> url
    java.lang.String query -> query
    long serialVersionUID -> serialVersionUID
    java.lang.String getName() -> getName
    java.lang.String getUrl() -> getUrl
    java.lang.String getQuery() -> getQuery
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.Trends -> twitter4j.ad:
    twitter4j.Trend[] getTrends() -> getTrends
    java.util.Date getAsOf() -> getAsOf
    java.util.Date getTrendAt() -> getTrendAt
twitter4j.TrendsJSONImpl -> twitter4j.TrendsJSONImpl:
    java.util.Date asOf -> asOf
    java.util.Date trendAt -> trendAt
    twitter4j.Trend[] trends -> trends
    twitter4j.Location location -> location
    long serialVersionUID -> serialVersionUID
    int compareTo(twitter4j.Trends) -> compareTo
    void init(java.lang.String,boolean) -> init
    java.util.List createTrendsList(twitter4j.internal.http.HttpResponse,boolean) -> createTrendsList
    twitter4j.Location extractLocation(org.json.JSONObject,boolean) -> extractLocation
    java.util.Date parseTrendsDate(java.lang.String) -> parseTrendsDate
    twitter4j.Trend[] jsonArrayToTrendArray(org.json.JSONArray,boolean) -> jsonArrayToTrendArray
    twitter4j.Trend[] getTrends() -> getTrends
    twitter4j.Location getLocation() -> getLocation
    java.util.Date getAsOf() -> getAsOf
    java.util.Date getTrendAt() -> getTrendAt
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
twitter4j.Tweet -> twitter4j.c:
    long getId() -> getId
twitter4j.TweetJSONImpl -> twitter4j.TweetJSONImpl:
    long serialVersionUID -> serialVersionUID
    java.lang.String text -> text
    long toUserId -> toUserId
    java.lang.String toUser -> toUser
    java.lang.String fromUser -> fromUser
    long id -> id
    long fromUserId -> fromUserId
    java.lang.String isoLanguageCode -> isoLanguageCode
    java.lang.String source -> source
    java.lang.String profileImageUrl -> profileImageUrl
    java.util.Date createdAt -> createdAt
    java.lang.String location -> location
    twitter4j.Place place -> place
    twitter4j.GeoLocation geoLocation -> geoLocation
    twitter4j.Annotations annotations -> annotations
    int compareTo(twitter4j.Tweet) -> compareTo
    java.lang.String getText() -> getText
    long getToUserId() -> getToUserId
    java.lang.String getToUser() -> getToUser
    java.lang.String getFromUser() -> getFromUser
    long getId() -> getId
    long getFromUserId() -> getFromUserId
    java.lang.String getIsoLanguageCode() -> getIsoLanguageCode
    java.lang.String getSource() -> getSource
    java.lang.String getProfileImageUrl() -> getProfileImageUrl
    java.util.Date getCreatedAt() -> getCreatedAt
    twitter4j.GeoLocation getGeoLocation() -> getGeoLocation
    java.lang.String getLocation() -> getLocation
    twitter4j.Place getPlace() -> getPlace
    twitter4j.Annotations getAnnotations() -> getAnnotations
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
twitter4j.Twitter -> twitter4j.e:
twitter4j.TwitterAPIConfiguration -> twitter4j.w:
twitter4j.TwitterAPIConfigurationJSONImpl -> twitter4j.TwitterAPIConfigurationJSONImpl:
    long serialVersionUID -> serialVersionUID
    int photoSizeLimit -> photoSizeLimit
    int shortURLLength -> shortURLLength
    int shortURLLengthHttps -> shortURLLengthHttps
    int charactersReservedPerMedia -> charactersReservedPerMedia
    java.util.Map photoSizes -> photoSizes
    java.lang.String[] nonUsernamePaths -> nonUsernamePaths
    int maxMediaPerUpload -> maxMediaPerUpload
    int getPhotoSizeLimit() -> getPhotoSizeLimit
    int getShortURLLength() -> getShortURLLength
    int getShortURLLengthHttps() -> getShortURLLengthHttps
    int getCharactersReservedPerMedia() -> getCharactersReservedPerMedia
    java.util.Map getPhotoSizes() -> getPhotoSizes
    java.lang.String[] getNonUsernamePaths() -> getNonUsernamePaths
    int getMaxMediaPerUpload() -> getMaxMediaPerUpload
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.TwitterAPIMonitor -> twitter4j.TwitterAPIMonitor:
    twitter4j.internal.logging.Logger logger -> logger
    java.util.regex.Pattern pattern -> pattern
    twitter4j.TwitterAPIMonitor SINGLETON -> SINGLETON
    twitter4j.management.APIStatistics STATISTICS -> STATISTICS
    java.lang.Class class$twitter4j$TwitterAPIMonitor -> class$twitter4j$TwitterAPIMonitor
    twitter4j.TwitterAPIMonitor getInstance() -> getInstance
    twitter4j.management.APIStatisticsMBean getStatistics() -> getStatistics
    void methodCalled(java.lang.String,long,boolean) -> methodCalled
    java.lang.Class class$(java.lang.String) -> class$
twitter4j.TwitterBaseImpl -> twitter4j.TwitterBaseImpl:
    twitter4j.conf.Configuration conf -> conf
    java.lang.String screenName -> screenName
    long id -> id
    twitter4j.internal.http.HttpClientWrapper http -> http
    java.util.List rateLimitStatusListeners -> rateLimitStatusListeners
    twitter4j.auth.Authorization auth -> auth
    long serialVersionUID -> serialVersionUID
    void init() -> init
    java.lang.String getScreenName() -> getScreenName
    long getId() -> getId
    twitter4j.User fillInIDAndScreenName() -> fillInIDAndScreenName
    void addRateLimitStatusListener(twitter4j.RateLimitStatusListener) -> addRateLimitStatusListener
    void httpResponseReceived(twitter4j.internal.http.HttpResponseEvent) -> httpResponseReceived
    twitter4j.auth.Authorization getAuthorization() -> getAuthorization
    twitter4j.conf.Configuration getConfiguration() -> getConfiguration
    void shutdown() -> shutdown
    void ensureAuthorizationEnabled() -> ensureAuthorizationEnabled
    void ensureOAuthEnabled() -> ensureOAuthEnabled
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    void setOAuthConsumer(java.lang.String,java.lang.String) -> setOAuthConsumer
    twitter4j.auth.RequestToken getOAuthRequestToken() -> getOAuthRequestToken
    twitter4j.auth.RequestToken getOAuthRequestToken(java.lang.String) -> getOAuthRequestToken
    twitter4j.auth.RequestToken getOAuthRequestToken(java.lang.String,java.lang.String) -> getOAuthRequestToken
    twitter4j.auth.AccessToken getOAuthAccessToken() -> getOAuthAccessToken
    twitter4j.auth.AccessToken getOAuthAccessToken(java.lang.String) -> getOAuthAccessToken
    twitter4j.auth.AccessToken getOAuthAccessToken(twitter4j.auth.RequestToken) -> getOAuthAccessToken
    twitter4j.auth.AccessToken getOAuthAccessToken(twitter4j.auth.RequestToken,java.lang.String) -> getOAuthAccessToken
    void setOAuthAccessToken(twitter4j.auth.AccessToken) -> setOAuthAccessToken
    twitter4j.auth.AccessToken getOAuthAccessToken(java.lang.String,java.lang.String) -> getOAuthAccessToken
    twitter4j.auth.OAuthSupport getOAuth() -> getOAuth
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.TwitterException -> twitter4j.TwitterException:
    int statusCode -> statusCode
    long serialVersionUID -> serialVersionUID
    twitter4j.ExceptionDiagnosis exceptionDiagnosis -> exceptionDiagnosis
    twitter4j.internal.http.HttpResponse response -> response
    java.lang.String errorMessage -> errorMessage
    java.lang.String requestPath -> requestPath
    java.lang.String[] FILTER -> FILTER
    boolean nested -> nested
    java.lang.String getMessage() -> getMessage
    void decode(java.lang.String) -> decode
    int getStatusCode() -> getStatusCode
    java.lang.String getResponseHeader(java.lang.String) -> getResponseHeader
    twitter4j.RateLimitStatus getRateLimitStatus() -> getRateLimitStatus
    int getAccessLevel() -> getAccessLevel
    twitter4j.RateLimitStatus getFeatureSpecificRateLimitStatus() -> getFeatureSpecificRateLimitStatus
    int getRetryAfter() -> getRetryAfter
    boolean isCausedByNetworkIssue() -> isCausedByNetworkIssue
    boolean exceededRateLimitation() -> exceededRateLimitation
    boolean resourceNotFound() -> resourceNotFound
    java.lang.String getExceptionCode() -> getExceptionCode
    twitter4j.ExceptionDiagnosis getExceptionDiagnosis() -> getExceptionDiagnosis
    void setNested() -> setNested
    java.lang.String getErrorMessage() -> getErrorMessage
    java.lang.String getRequestPath() -> getRequestPath
    boolean isErrorMessageAvailable() -> isErrorMessageAvailable
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.String getCause(twitter4j.internal.http.HttpResponse) -> getCause
twitter4j.TwitterFactory -> twitter4j.TwitterFactory:
    long serialVersionUID -> serialVersionUID
    twitter4j.conf.Configuration conf -> conf
    twitter4j.Twitter getInstance() -> getInstance
    twitter4j.Twitter getInstance(twitter4j.auth.AccessToken) -> getInstance
    twitter4j.Twitter getInstance(twitter4j.auth.Authorization) -> getInstance
twitter4j.TwitterImpl -> twitter4j.TwitterImpl:
    long serialVersionUID -> serialVersionUID
    twitter4j.internal.http.HttpParameter INCLUDE_ENTITIES -> INCLUDE_ENTITIES
    twitter4j.internal.http.HttpParameter INCLUDE_RTS -> INCLUDE_RTS
    twitter4j.internal.http.HttpParameter[] mergeParameters(twitter4j.internal.http.HttpParameter[],twitter4j.internal.http.HttpParameter[]) -> mergeParameters
    twitter4j.internal.http.HttpParameter[] mergeParameters(twitter4j.internal.http.HttpParameter[],twitter4j.internal.http.HttpParameter) -> mergeParameters
    twitter4j.QueryResult search(twitter4j.Query) -> search
    twitter4j.Trends getTrends() -> getTrends
    twitter4j.Trends getCurrentTrends() -> getCurrentTrends
    twitter4j.Trends getCurrentTrends(boolean) -> getCurrentTrends
    java.util.List getDailyTrends() -> getDailyTrends
    java.util.List getDailyTrends(java.util.Date,boolean) -> getDailyTrends
    java.lang.String toDateStr(java.util.Date) -> toDateStr
    java.util.List getWeeklyTrends() -> getWeeklyTrends
    java.util.List getWeeklyTrends(java.util.Date,boolean) -> getWeeklyTrends
    twitter4j.ResponseList getPublicTimeline() -> getPublicTimeline
    twitter4j.ResponseList getHomeTimeline() -> getHomeTimeline
    twitter4j.ResponseList getHomeTimeline(twitter4j.Paging) -> getHomeTimeline
    twitter4j.ResponseList getFriendsTimeline() -> getFriendsTimeline
    twitter4j.ResponseList getFriendsTimeline(twitter4j.Paging) -> getFriendsTimeline
    twitter4j.ResponseList getUserTimeline(java.lang.String,twitter4j.Paging) -> getUserTimeline
    twitter4j.ResponseList getUserTimeline(long,twitter4j.Paging) -> getUserTimeline
    twitter4j.ResponseList getUserTimeline(java.lang.String) -> getUserTimeline
    twitter4j.ResponseList getUserTimeline(long) -> getUserTimeline
    twitter4j.ResponseList getUserTimeline() -> getUserTimeline
    twitter4j.ResponseList getUserTimeline(twitter4j.Paging) -> getUserTimeline
    twitter4j.ResponseList getMentions() -> getMentions
    twitter4j.ResponseList getMentions(twitter4j.Paging) -> getMentions
    twitter4j.ResponseList getRetweetedByMe() -> getRetweetedByMe
    twitter4j.ResponseList getRetweetedByMe(twitter4j.Paging) -> getRetweetedByMe
    twitter4j.ResponseList getRetweetedToMe() -> getRetweetedToMe
    twitter4j.ResponseList getRetweetedToMe(twitter4j.Paging) -> getRetweetedToMe
    twitter4j.ResponseList getRetweetsOfMe() -> getRetweetsOfMe
    twitter4j.ResponseList getRetweetsOfMe(twitter4j.Paging) -> getRetweetsOfMe
    twitter4j.ResponseList getRetweetedToUser(java.lang.String,twitter4j.Paging) -> getRetweetedToUser
    twitter4j.ResponseList getRetweetedToUser(long,twitter4j.Paging) -> getRetweetedToUser
    twitter4j.ResponseList getRetweetedByUser(java.lang.String,twitter4j.Paging) -> getRetweetedByUser
    twitter4j.ResponseList getRetweetedByUser(long,twitter4j.Paging) -> getRetweetedByUser
    twitter4j.ResponseList getRetweetedBy(long) -> getRetweetedBy
    twitter4j.ResponseList getRetweetedBy(long,twitter4j.Paging) -> getRetweetedBy
    twitter4j.IDs getRetweetedByIDs(long) -> getRetweetedByIDs
    twitter4j.IDs getRetweetedByIDs(long,twitter4j.Paging) -> getRetweetedByIDs
    twitter4j.Status showStatus(long) -> showStatus
    twitter4j.Status updateStatus(java.lang.String) -> updateStatus
    twitter4j.Status updateStatus(twitter4j.StatusUpdate) -> updateStatus
    twitter4j.Status destroyStatus(long) -> destroyStatus
    twitter4j.Status retweetStatus(long) -> retweetStatus
    twitter4j.ResponseList getRetweets(long) -> getRetweets
    twitter4j.User showUser(java.lang.String) -> showUser
    twitter4j.User showUser(long) -> showUser
    twitter4j.ResponseList lookupUsers(java.lang.String[]) -> lookupUsers
    twitter4j.ResponseList lookupUsers(long[]) -> lookupUsers
    twitter4j.ResponseList searchUsers(java.lang.String,int) -> searchUsers
    twitter4j.ResponseList getSuggestedUserCategories() -> getSuggestedUserCategories
    twitter4j.ResponseList getUserSuggestions(java.lang.String) -> getUserSuggestions
    twitter4j.ResponseList getMemberSuggestions(java.lang.String) -> getMemberSuggestions
    twitter4j.ProfileImage getProfileImage(java.lang.String,twitter4j.ProfileImage$ImageSize) -> getProfileImage
    twitter4j.PagableResponseList getFriendsStatuses(long) -> getFriendsStatuses
    twitter4j.PagableResponseList getFriendsStatuses(java.lang.String,long) -> getFriendsStatuses
    twitter4j.PagableResponseList getFriendsStatuses(long,long) -> getFriendsStatuses
    twitter4j.PagableResponseList getFollowersStatuses(long) -> getFollowersStatuses
    twitter4j.PagableResponseList getFollowersStatuses(java.lang.String,long) -> getFollowersStatuses
    twitter4j.PagableResponseList getFollowersStatuses(long,long) -> getFollowersStatuses
    twitter4j.UserList createUserList(java.lang.String,boolean,java.lang.String) -> createUserList
    twitter4j.UserList updateUserList(int,java.lang.String,boolean,java.lang.String) -> updateUserList
    twitter4j.PagableResponseList getUserLists(java.lang.String,long) -> getUserLists
    twitter4j.PagableResponseList getUserLists(long,long) -> getUserLists
    twitter4j.UserList showUserList(java.lang.String,int) -> showUserList
    twitter4j.UserList showUserList(int) -> showUserList
    twitter4j.UserList destroyUserList(int) -> destroyUserList
    twitter4j.ResponseList getUserListStatuses(java.lang.String,int,twitter4j.Paging) -> getUserListStatuses
    twitter4j.ResponseList getUserListStatuses(long,int,twitter4j.Paging) -> getUserListStatuses
    twitter4j.ResponseList getUserListStatuses(int,twitter4j.Paging) -> getUserListStatuses
    twitter4j.PagableResponseList getUserListMemberships(java.lang.String,long) -> getUserListMemberships
    twitter4j.PagableResponseList getUserListSubscriptions(java.lang.String,long) -> getUserListSubscriptions
    twitter4j.ResponseList getAllUserLists(java.lang.String) -> getAllUserLists
    twitter4j.ResponseList getAllUserLists(long) -> getAllUserLists
    twitter4j.PagableResponseList getUserListMembers(java.lang.String,int,long) -> getUserListMembers
    twitter4j.PagableResponseList getUserListMembers(long,int,long) -> getUserListMembers
    twitter4j.PagableResponseList getUserListMembers(int,long) -> getUserListMembers
    twitter4j.UserList addUserListMember(int,long) -> addUserListMember
    twitter4j.UserList addUserListMembers(int,long[]) -> addUserListMembers
    twitter4j.UserList addUserListMembers(int,java.lang.String[]) -> addUserListMembers
    twitter4j.UserList deleteUserListMember(int,long) -> deleteUserListMember
    twitter4j.User checkUserListMembership(java.lang.String,int,long) -> checkUserListMembership
    twitter4j.User showUserListMembership(int,long) -> showUserListMembership
    twitter4j.PagableResponseList getUserListSubscribers(java.lang.String,int,long) -> getUserListSubscribers
    twitter4j.PagableResponseList getUserListSubscribers(int,long) -> getUserListSubscribers
    twitter4j.UserList subscribeUserList(java.lang.String,int) -> subscribeUserList
    twitter4j.UserList createUserListSubscription(int) -> createUserListSubscription
    twitter4j.UserList unsubscribeUserList(java.lang.String,int) -> unsubscribeUserList
    twitter4j.UserList destroyUserListSubscription(int) -> destroyUserListSubscription
    twitter4j.User checkUserListSubscription(java.lang.String,int,long) -> checkUserListSubscription
    twitter4j.User showUserListSubscription(int,long) -> showUserListSubscription
    twitter4j.ResponseList getDirectMessages() -> getDirectMessages
    twitter4j.ResponseList getDirectMessages(twitter4j.Paging) -> getDirectMessages
    twitter4j.ResponseList getSentDirectMessages() -> getSentDirectMessages
    twitter4j.ResponseList getSentDirectMessages(twitter4j.Paging) -> getSentDirectMessages
    twitter4j.DirectMessage sendDirectMessage(java.lang.String,java.lang.String) -> sendDirectMessage
    twitter4j.DirectMessage sendDirectMessage(long,java.lang.String) -> sendDirectMessage
    twitter4j.DirectMessage destroyDirectMessage(long) -> destroyDirectMessage
    twitter4j.DirectMessage showDirectMessage(long) -> showDirectMessage
    twitter4j.User createFriendship(java.lang.String) -> createFriendship
    twitter4j.User createFriendship(long) -> createFriendship
    twitter4j.User createFriendship(java.lang.String,boolean) -> createFriendship
    twitter4j.User createFriendship(long,boolean) -> createFriendship
    twitter4j.User destroyFriendship(java.lang.String) -> destroyFriendship
    twitter4j.User destroyFriendship(long) -> destroyFriendship
    boolean existsFriendship(java.lang.String,java.lang.String) -> existsFriendship
    twitter4j.Relationship showFriendship(java.lang.String,java.lang.String) -> showFriendship
    twitter4j.Relationship showFriendship(long,long) -> showFriendship
    twitter4j.IDs getIncomingFriendships(long) -> getIncomingFriendships
    twitter4j.IDs getOutgoingFriendships(long) -> getOutgoingFriendships
    twitter4j.ResponseList lookupFriendships(java.lang.String[]) -> lookupFriendships
    twitter4j.ResponseList lookupFriendships(long[]) -> lookupFriendships
    twitter4j.Relationship updateFriendship(java.lang.String,boolean,boolean) -> updateFriendship
    twitter4j.Relationship updateFriendship(long,boolean,boolean) -> updateFriendship
    twitter4j.IDs getNoRetweetIds() -> getNoRetweetIds
    twitter4j.IDs getFriendsIDs(long) -> getFriendsIDs
    twitter4j.IDs getFriendsIDs(long,long) -> getFriendsIDs
    twitter4j.IDs getFriendsIDs(java.lang.String,long) -> getFriendsIDs
    twitter4j.IDs getFollowersIDs(long) -> getFollowersIDs
    twitter4j.IDs getFollowersIDs(long,long) -> getFollowersIDs
    twitter4j.IDs getFollowersIDs(java.lang.String,long) -> getFollowersIDs
    twitter4j.User verifyCredentials() -> verifyCredentials
    twitter4j.RateLimitStatus getRateLimitStatus() -> getRateLimitStatus
    twitter4j.User updateProfile(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> updateProfile
    twitter4j.AccountTotals getAccountTotals() -> getAccountTotals
    twitter4j.AccountSettings getAccountSettings() -> getAccountSettings
    twitter4j.User updateProfileColors(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> updateProfileColors
    void addParameterToList(java.util.List,java.lang.String,java.lang.String) -> addParameterToList
    twitter4j.User updateProfileImage(java.io.File) -> updateProfileImage
    twitter4j.User updateProfileImage(java.io.InputStream) -> updateProfileImage
    twitter4j.User updateProfileBackgroundImage(java.io.File,boolean) -> updateProfileBackgroundImage
    twitter4j.User updateProfileBackgroundImage(java.io.InputStream,boolean) -> updateProfileBackgroundImage
    void checkFileValidity(java.io.File) -> checkFileValidity
    twitter4j.ResponseList getFavorites() -> getFavorites
    twitter4j.ResponseList getFavorites(int) -> getFavorites
    twitter4j.ResponseList getFavorites(java.lang.String) -> getFavorites
    twitter4j.ResponseList getFavorites(java.lang.String,int) -> getFavorites
    twitter4j.Status createFavorite(long) -> createFavorite
    twitter4j.Status destroyFavorite(long) -> destroyFavorite
    twitter4j.User enableNotification(java.lang.String) -> enableNotification
    twitter4j.User enableNotification(long) -> enableNotification
    twitter4j.User disableNotification(java.lang.String) -> disableNotification
    twitter4j.User disableNotification(long) -> disableNotification
    twitter4j.User createBlock(java.lang.String) -> createBlock
    twitter4j.User createBlock(long) -> createBlock
    twitter4j.User destroyBlock(java.lang.String) -> destroyBlock
    twitter4j.User destroyBlock(long) -> destroyBlock
    boolean existsBlock(java.lang.String) -> existsBlock
    boolean existsBlock(long) -> existsBlock
    twitter4j.ResponseList getBlockingUsers() -> getBlockingUsers
    twitter4j.ResponseList getBlockingUsers(int) -> getBlockingUsers
    twitter4j.IDs getBlockingUsersIDs() -> getBlockingUsersIDs
    twitter4j.User reportSpam(long) -> reportSpam
    twitter4j.User reportSpam(java.lang.String) -> reportSpam
    java.util.List getSavedSearches() -> getSavedSearches
    twitter4j.SavedSearch showSavedSearch(int) -> showSavedSearch
    twitter4j.SavedSearch createSavedSearch(java.lang.String) -> createSavedSearch
    twitter4j.SavedSearch destroySavedSearch(int) -> destroySavedSearch
    twitter4j.ResponseList getAvailableTrends() -> getAvailableTrends
    twitter4j.ResponseList getAvailableTrends(twitter4j.GeoLocation) -> getAvailableTrends
    twitter4j.Trends getLocationTrends(int) -> getLocationTrends
    twitter4j.ResponseList searchPlaces(twitter4j.GeoQuery) -> searchPlaces
    twitter4j.SimilarPlaces getSimilarPlaces(twitter4j.GeoLocation,java.lang.String,java.lang.String,java.lang.String) -> getSimilarPlaces
    twitter4j.ResponseList reverseGeoCode(twitter4j.GeoQuery) -> reverseGeoCode
    twitter4j.Place getGeoDetails(java.lang.String) -> getGeoDetails
    twitter4j.Place createPlace(java.lang.String,java.lang.String,java.lang.String,twitter4j.GeoLocation,java.lang.String) -> createPlace
    java.lang.String getTermsOfService() -> getTermsOfService
    java.lang.String getPrivacyPolicy() -> getPrivacyPolicy
    twitter4j.RelatedResults getRelatedResults(long) -> getRelatedResults
    boolean test() -> test
    twitter4j.TwitterAPIConfiguration getAPIConfiguration() -> getAPIConfiguration
    twitter4j.ResponseList getLanguages() -> getLanguages
    boolean equals(java.lang.Object) -> equals
    twitter4j.internal.http.HttpResponse get(java.lang.String) -> get
    twitter4j.internal.http.HttpResponse get(java.lang.String,twitter4j.internal.http.HttpParameter[]) -> get
    twitter4j.internal.http.HttpResponse post(java.lang.String) -> post
    twitter4j.internal.http.HttpResponse post(java.lang.String,twitter4j.internal.http.HttpParameter[]) -> post
    twitter4j.internal.http.HttpResponse delete(java.lang.String) -> delete
    boolean isOk(twitter4j.internal.http.HttpResponse) -> isOk
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.TwitterResponse -> twitter4j.TwitterResponse:
    int NONE -> NONE
    int READ -> READ
    int READ_WRITE -> READ_WRITE
    int READ_WRITE_DIRECTMESSAGES -> READ_WRITE_DIRECTMESSAGES
    twitter4j.RateLimitStatus getRateLimitStatus() -> getRateLimitStatus
    int getAccessLevel() -> getAccessLevel
twitter4j.TwitterResponseImpl -> twitter4j.TwitterResponseImpl:
    twitter4j.RateLimitStatus rateLimitStatus -> rateLimitStatus
    long serialVersionUID -> serialVersionUID
    int accessLevel -> accessLevel
    int toAccessLevel(twitter4j.internal.http.HttpResponse) -> toAccessLevel
    twitter4j.RateLimitStatus getRateLimitStatus() -> getRateLimitStatus
    int getAccessLevel() -> getAccessLevel
twitter4j.URLEntity -> twitter4j.x:
twitter4j.URLEntityJSONImpl -> twitter4j.URLEntityJSONImpl:
    int start -> start
    int end -> end
    java.net.URL url -> url
    java.net.URL expandedURL -> expandedURL
    java.lang.String displayURL -> displayURL
    long serialVersionUID -> serialVersionUID
    void init(org.json.JSONObject) -> init
    java.net.URL getURL() -> getURL
    java.net.URL getExpandedURL() -> getExpandedURL
    java.lang.String getDisplayURL() -> getDisplayURL
    int getStart() -> getStart
    int getEnd() -> getEnd
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.User -> twitter4j.a:
    long getId() -> getId
    java.lang.String getScreenName() -> getScreenName
twitter4j.UserJSONImpl -> twitter4j.UserJSONImpl:
    long id -> id
    java.lang.String name -> name
    java.lang.String screenName -> screenName
    java.lang.String location -> location
    java.lang.String description -> description
    boolean isContributorsEnabled -> isContributorsEnabled
    java.lang.String profileImageUrl -> profileImageUrl
    java.lang.String profileImageUrlHttps -> profileImageUrlHttps
    java.lang.String url -> url
    boolean isProtected -> isProtected
    int followersCount -> followersCount
    twitter4j.Status status -> status
    java.lang.String profileBackgroundColor -> profileBackgroundColor
    java.lang.String profileTextColor -> profileTextColor
    java.lang.String profileLinkColor -> profileLinkColor
    java.lang.String profileSidebarFillColor -> profileSidebarFillColor
    java.lang.String profileSidebarBorderColor -> profileSidebarBorderColor
    boolean profileUseBackgroundImage -> profileUseBackgroundImage
    boolean showAllInlineMedia -> showAllInlineMedia
    int friendsCount -> friendsCount
    java.util.Date createdAt -> createdAt
    int favouritesCount -> favouritesCount
    int utcOffset -> utcOffset
    java.lang.String timeZone -> timeZone
    java.lang.String profileBackgroundImageUrl -> profileBackgroundImageUrl
    java.lang.String profileBackgroundImageUrlHttps -> profileBackgroundImageUrlHttps
    boolean profileBackgroundTiled -> profileBackgroundTiled
    java.lang.String lang -> lang
    int statusesCount -> statusesCount
    boolean isGeoEnabled -> isGeoEnabled
    boolean isVerified -> isVerified
    boolean translator -> translator
    int listedCount -> listedCount
    boolean isFollowRequestSent -> isFollowRequestSent
    long serialVersionUID -> serialVersionUID
    void init(org.json.JSONObject) -> init
    int compareTo(twitter4j.User) -> compareTo
    long getId() -> getId
    java.lang.String getName() -> getName
    java.lang.String getScreenName() -> getScreenName
    java.lang.String getLocation() -> getLocation
    java.lang.String getDescription() -> getDescription
    boolean isContributorsEnabled() -> isContributorsEnabled
    java.net.URL getProfileImageURL() -> getProfileImageURL
    java.net.URL getProfileImageUrlHttps() -> getProfileImageUrlHttps
    java.net.URL getURL() -> getURL
    boolean isProtected() -> isProtected
    int getFollowersCount() -> getFollowersCount
    java.lang.String getProfileBackgroundColor() -> getProfileBackgroundColor
    java.lang.String getProfileTextColor() -> getProfileTextColor
    java.lang.String getProfileLinkColor() -> getProfileLinkColor
    java.lang.String getProfileSidebarFillColor() -> getProfileSidebarFillColor
    java.lang.String getProfileSidebarBorderColor() -> getProfileSidebarBorderColor
    boolean isProfileUseBackgroundImage() -> isProfileUseBackgroundImage
    boolean isShowAllInlineMedia() -> isShowAllInlineMedia
    int getFriendsCount() -> getFriendsCount
    twitter4j.Status getStatus() -> getStatus
    java.util.Date getCreatedAt() -> getCreatedAt
    int getFavouritesCount() -> getFavouritesCount
    int getUtcOffset() -> getUtcOffset
    java.lang.String getTimeZone() -> getTimeZone
    java.lang.String getProfileBackgroundImageUrl() -> getProfileBackgroundImageUrl
    java.lang.String getProfileBackgroundImageUrlHttps() -> getProfileBackgroundImageUrlHttps
    boolean isProfileBackgroundTiled() -> isProfileBackgroundTiled
    java.lang.String getLang() -> getLang
    int getStatusesCount() -> getStatusesCount
    boolean isGeoEnabled() -> isGeoEnabled
    boolean isVerified() -> isVerified
    boolean isTranslator() -> isTranslator
    int getListedCount() -> getListedCount
    boolean isFollowRequestSent() -> isFollowRequestSent
    twitter4j.PagableResponseList createPagableUserList(twitter4j.internal.http.HttpResponse,twitter4j.conf.Configuration) -> createPagableUserList
    twitter4j.ResponseList createUserList(twitter4j.internal.http.HttpResponse,twitter4j.conf.Configuration) -> createUserList
    twitter4j.ResponseList createUserList(org.json.JSONArray,twitter4j.internal.http.HttpResponse,twitter4j.conf.Configuration) -> createUserList
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
twitter4j.UserList -> twitter4j.o:
    int getId() -> getId
twitter4j.UserListJSONImpl -> twitter4j.UserListJSONImpl:
    int id -> id
    java.lang.String name -> name
    java.lang.String fullName -> fullName
    java.lang.String slug -> slug
    java.lang.String description -> description
    int subscriberCount -> subscriberCount
    int memberCount -> memberCount
    java.lang.String uri -> uri
    boolean mode -> mode
    twitter4j.User user -> user
    boolean following -> following
    long serialVersionUID -> serialVersionUID
    void init(org.json.JSONObject) -> init
    int compareTo(twitter4j.UserList) -> compareTo
    int getId() -> getId
    java.lang.String getName() -> getName
    java.lang.String getFullName() -> getFullName
    java.lang.String getSlug() -> getSlug
    java.lang.String getDescription() -> getDescription
    int getSubscriberCount() -> getSubscriberCount
    int getMemberCount() -> getMemberCount
    java.net.URI getURI() -> getURI
    boolean isPublic() -> isPublic
    boolean isFollowing() -> isFollowing
    twitter4j.User getUser() -> getUser
    twitter4j.PagableResponseList createPagableUserListList(twitter4j.internal.http.HttpResponse,twitter4j.conf.Configuration) -> createPagableUserListList
    twitter4j.ResponseList createUserListList(twitter4j.internal.http.HttpResponse,twitter4j.conf.Configuration) -> createUserListList
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
twitter4j.UserMentionEntity -> twitter4j.g:
twitter4j.UserMentionEntityJSONImpl -> twitter4j.UserMentionEntityJSONImpl:
    long serialVersionUID -> serialVersionUID
    int start -> start
    int end -> end
    java.lang.String name -> name
    java.lang.String screenName -> screenName
    long id -> id
    void init(org.json.JSONObject) -> init
    java.lang.String getName() -> getName
    java.lang.String getScreenName() -> getScreenName
    long getId() -> getId
    int getStart() -> getStart
    int getEnd() -> getEnd
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.Version -> twitter4j.Version:
    java.lang.String VERSION -> VERSION
    java.lang.String TITLE -> TITLE
    java.lang.String getVersion() -> getVersion
    void main(java.lang.String[]) -> main
twitter4j.api.StatusMethods -> twitter4j.a.a:
    twitter4j.Status updateStatus(java.lang.String) -> updateStatus
twitter4j.auth.AccessToken -> twitter4j.auth.AccessToken:
    long serialVersionUID -> serialVersionUID
    java.lang.String screenName -> screenName
    long userId -> userId
    java.lang.String getScreenName() -> getScreenName
    long getUserId() -> getUserId
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.String getParameter(java.lang.String) -> getParameter
    java.lang.String getTokenSecret() -> getTokenSecret
    java.lang.String getToken() -> getToken
twitter4j.auth.Authorization -> twitter4j.auth.a:
    java.lang.String getAuthorizationHeader(twitter4j.internal.http.HttpRequest) -> getAuthorizationHeader
    boolean isEnabled() -> isEnabled
twitter4j.auth.AuthorizationFactory -> twitter4j.auth.b:
    twitter4j.auth.Authorization getInstance(twitter4j.conf.Configuration) -> a
twitter4j.auth.BasicAuthorization -> twitter4j.auth.BasicAuthorization:
    java.lang.String userId -> userId
    java.lang.String password -> password
    java.lang.String basic -> basic
    long serialVersionUID -> serialVersionUID
    java.lang.String getUserId() -> getUserId
    java.lang.String getPassword() -> getPassword
    java.lang.String encodeBasicAuthenticationString() -> encodeBasicAuthenticationString
    java.lang.String getAuthorizationHeader(twitter4j.internal.http.HttpRequest) -> getAuthorizationHeader
    boolean isEnabled() -> isEnabled
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.auth.NullAuthorization -> twitter4j.auth.NullAuthorization:
    twitter4j.auth.NullAuthorization SINGLETON -> SINGLETON
    long serialVersionUID -> serialVersionUID
    twitter4j.auth.NullAuthorization getInstance() -> getInstance
    java.lang.String getAuthorizationHeader(twitter4j.internal.http.HttpRequest) -> getAuthorizationHeader
    boolean isEnabled() -> isEnabled
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    java.lang.Object readResolve() -> readResolve
twitter4j.auth.OAuthAuthorization -> twitter4j.auth.OAuthAuthorization:
    twitter4j.conf.Configuration conf -> conf
    twitter4j.internal.http.HttpClientWrapper http -> http
    java.lang.String HMAC_SHA1 -> HMAC_SHA1
    twitter4j.internal.http.HttpParameter OAUTH_SIGNATURE_METHOD -> OAUTH_SIGNATURE_METHOD
    twitter4j.internal.logging.Logger logger -> logger
    long serialVersionUID -> serialVersionUID
    java.lang.String consumerKey -> consumerKey
    java.lang.String consumerSecret -> consumerSecret
    java.lang.String realm -> realm
    twitter4j.auth.OAuthToken oauthToken -> oauthToken
    java.util.Random RAND -> RAND
    java.lang.Class class$twitter4j$auth$OAuthAuthorization -> class$twitter4j$auth$OAuthAuthorization
    java.lang.String getAuthorizationHeader(twitter4j.internal.http.HttpRequest) -> getAuthorizationHeader
    void ensureTokenIsAvailable() -> ensureTokenIsAvailable
    boolean isEnabled() -> isEnabled
    twitter4j.auth.RequestToken getOAuthRequestToken() -> getOAuthRequestToken
    twitter4j.auth.RequestToken getOAuthRequestToken(java.lang.String) -> getOAuthRequestToken
    twitter4j.auth.RequestToken getOAuthRequestToken(java.lang.String,java.lang.String) -> getOAuthRequestToken
    twitter4j.auth.AccessToken getOAuthAccessToken() -> getOAuthAccessToken
    twitter4j.auth.AccessToken getOAuthAccessToken(java.lang.String) -> getOAuthAccessToken
    twitter4j.auth.AccessToken getOAuthAccessToken(twitter4j.auth.RequestToken) -> getOAuthAccessToken
    twitter4j.auth.AccessToken getOAuthAccessToken(twitter4j.auth.RequestToken,java.lang.String) -> getOAuthAccessToken
    twitter4j.auth.AccessToken getOAuthAccessToken(java.lang.String,java.lang.String) -> getOAuthAccessToken
    void setOAuthAccessToken(twitter4j.auth.AccessToken) -> setOAuthAccessToken
    void setOAuthRealm(java.lang.String) -> setOAuthRealm
    java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],java.lang.String,java.lang.String,twitter4j.auth.OAuthToken) -> generateAuthorizationHeader
    void parseGetParameters(java.lang.String,java.util.List) -> parseGetParameters
    java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.auth.OAuthToken) -> generateAuthorizationHeader
    java.util.List generateOAuthSignatureHttpParams(java.lang.String,java.lang.String) -> generateOAuthSignatureHttpParams
    java.lang.String generateSignature(java.lang.String,twitter4j.auth.OAuthToken) -> generateSignature
    java.lang.String generateSignature(java.lang.String) -> generateSignature
    java.lang.String normalizeRequestParameters(twitter4j.internal.http.HttpParameter[]) -> normalizeRequestParameters
    java.lang.String normalizeRequestParameters(java.util.List) -> normalizeRequestParameters
    java.lang.String normalizeAuthorizationHeaders(java.util.List) -> normalizeAuthorizationHeaders
    java.util.List toParamList(twitter4j.internal.http.HttpParameter[]) -> toParamList
    java.lang.String encodeParameters(java.util.List) -> encodeParameters
    java.lang.String encodeParameters(java.util.List,java.lang.String,boolean) -> encodeParameters
    java.lang.String constructRequestURL(java.lang.String) -> constructRequestURL
    void setOAuthConsumer(java.lang.String,java.lang.String) -> setOAuthConsumer
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Class class$(java.lang.String) -> class$
twitter4j.auth.OAuthSupport -> twitter4j.auth.c:
    twitter4j.auth.RequestToken getOAuthRequestToken(java.lang.String) -> getOAuthRequestToken
    twitter4j.auth.RequestToken getOAuthRequestToken(java.lang.String,java.lang.String) -> getOAuthRequestToken
    twitter4j.auth.AccessToken getOAuthAccessToken() -> getOAuthAccessToken
    twitter4j.auth.AccessToken getOAuthAccessToken(java.lang.String) -> getOAuthAccessToken
    twitter4j.auth.AccessToken getOAuthAccessToken(twitter4j.auth.RequestToken) -> getOAuthAccessToken
    twitter4j.auth.AccessToken getOAuthAccessToken(twitter4j.auth.RequestToken,java.lang.String) -> getOAuthAccessToken
    twitter4j.auth.AccessToken getOAuthAccessToken(java.lang.String,java.lang.String) -> getOAuthAccessToken
    void setOAuthAccessToken(twitter4j.auth.AccessToken) -> setOAuthAccessToken
twitter4j.auth.OAuthToken -> twitter4j.auth.OAuthToken:
    long serialVersionUID -> serialVersionUID
    java.lang.String token -> token
    java.lang.String tokenSecret -> tokenSecret
    javax.crypto.spec.SecretKeySpec secretKeySpec -> secretKeySpec
    java.lang.String[] responseStr -> responseStr
    java.lang.String getToken() -> getToken
    java.lang.String getTokenSecret() -> getTokenSecret
    void setSecretKeySpec(javax.crypto.spec.SecretKeySpec) -> setSecretKeySpec
    javax.crypto.spec.SecretKeySpec getSecretKeySpec() -> getSecretKeySpec
    java.lang.String getParameter(java.lang.String) -> getParameter
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.auth.RequestToken -> twitter4j.auth.RequestToken:
    twitter4j.conf.Configuration conf -> conf
    twitter4j.auth.OAuthSupport oauth -> oauth
    long serialVersionUID -> serialVersionUID
    java.lang.String getAuthorizationURL() -> getAuthorizationURL
    java.lang.String getAuthenticationURL() -> getAuthenticationURL
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String getParameter(java.lang.String) -> getParameter
    java.lang.String getTokenSecret() -> getTokenSecret
    java.lang.String getToken() -> getToken
twitter4j.conf.Configuration -> twitter4j.conf.a:
    boolean isDalvik() -> isDalvik
    boolean isDebugEnabled() -> isDebugEnabled
    java.lang.String getUser() -> getUser
    java.lang.String getPassword() -> getPassword
    java.lang.String getOAuthConsumerKey() -> getOAuthConsumerKey
    java.lang.String getOAuthConsumerSecret() -> getOAuthConsumerSecret
    java.lang.String getOAuthAccessToken() -> getOAuthAccessToken
    java.lang.String getOAuthAccessTokenSecret() -> getOAuthAccessTokenSecret
    java.lang.String getRestBaseURL() -> getRestBaseURL
    java.lang.String getSearchBaseURL() -> getSearchBaseURL
    java.lang.String getOAuthRequestTokenURL() -> getOAuthRequestTokenURL
    java.lang.String getOAuthAuthorizationURL() -> getOAuthAuthorizationURL
    java.lang.String getOAuthAccessTokenURL() -> getOAuthAccessTokenURL
    java.lang.String getOAuthAuthenticationURL() -> getOAuthAuthenticationURL
    boolean isIncludeRTsEnabled() -> isIncludeRTsEnabled
    boolean isIncludeEntitiesEnabled() -> isIncludeEntitiesEnabled
    boolean isJSONStoreEnabled() -> isJSONStoreEnabled
    boolean isMBeanEnabled() -> isMBeanEnabled
    int getAsyncNumThreads() -> getAsyncNumThreads
    java.lang.String getDispatcherImpl() -> getDispatcherImpl
twitter4j.conf.ConfigurationBase -> twitter4j.conf.ConfigurationBase:
    boolean debug -> debug
    java.lang.String userAgent -> userAgent
    java.lang.String user -> user
    java.lang.String password -> password
    boolean useSSL -> useSSL
    boolean prettyDebug -> prettyDebug
    boolean gzipEnabled -> gzipEnabled
    java.lang.String httpProxyHost -> httpProxyHost
    java.lang.String httpProxyUser -> httpProxyUser
    java.lang.String httpProxyPassword -> httpProxyPassword
    int httpProxyPort -> httpProxyPort
    int httpConnectionTimeout -> httpConnectionTimeout
    int httpReadTimeout -> httpReadTimeout
    int httpStreamingReadTimeout -> httpStreamingReadTimeout
    int httpRetryCount -> httpRetryCount
    int httpRetryIntervalSeconds -> httpRetryIntervalSeconds
    int maxTotalConnections -> maxTotalConnections
    int defaultMaxPerRoute -> defaultMaxPerRoute
    java.lang.String oAuthConsumerKey -> oAuthConsumerKey
    java.lang.String oAuthConsumerSecret -> oAuthConsumerSecret
    java.lang.String oAuthAccessToken -> oAuthAccessToken
    java.lang.String oAuthAccessTokenSecret -> oAuthAccessTokenSecret
    java.lang.String oAuthRequestTokenURL -> oAuthRequestTokenURL
    java.lang.String oAuthAuthorizationURL -> oAuthAuthorizationURL
    java.lang.String oAuthAccessTokenURL -> oAuthAccessTokenURL
    java.lang.String oAuthAuthenticationURL -> oAuthAuthenticationURL
    java.lang.String restBaseURL -> restBaseURL
    java.lang.String searchBaseURL -> searchBaseURL
    java.lang.String streamBaseURL -> streamBaseURL
    java.lang.String userStreamBaseURL -> userStreamBaseURL
    java.lang.String siteStreamBaseURL -> siteStreamBaseURL
    java.lang.String dispatcherImpl -> dispatcherImpl
    int asyncNumThreads -> asyncNumThreads
    boolean includeRTsEnabled -> includeRTsEnabled
    boolean includeEntitiesEnabled -> includeEntitiesEnabled
    boolean jsonStoreEnabled -> jsonStoreEnabled
    boolean mbeanEnabled -> mbeanEnabled
    boolean userStreamRepliesAllEnabled -> userStreamRepliesAllEnabled
    java.lang.String mediaProvider -> mediaProvider
    java.lang.String mediaProviderAPIKey -> mediaProviderAPIKey
    java.util.Properties mediaProviderParameters -> mediaProviderParameters
    java.lang.String clientVersion -> clientVersion
    java.lang.String clientURL -> clientURL
    java.lang.String DALVIK -> DALVIK
    java.lang.String DEFAULT_OAUTH_REQUEST_TOKEN_URL -> DEFAULT_OAUTH_REQUEST_TOKEN_URL
    java.lang.String DEFAULT_OAUTH_AUTHORIZATION_URL -> DEFAULT_OAUTH_AUTHORIZATION_URL
    java.lang.String DEFAULT_OAUTH_ACCESS_TOKEN_URL -> DEFAULT_OAUTH_ACCESS_TOKEN_URL
    java.lang.String DEFAULT_OAUTH_AUTHENTICATION_URL -> DEFAULT_OAUTH_AUTHENTICATION_URL
    java.lang.String DEFAULT_REST_BASE_URL -> DEFAULT_REST_BASE_URL
    java.lang.String DEFAULT_SEARCH_BASE_URL -> DEFAULT_SEARCH_BASE_URL
    java.lang.String DEFAULT_STREAM_BASE_URL -> DEFAULT_STREAM_BASE_URL
    java.lang.String DEFAULT_USER_STREAM_BASE_URL -> DEFAULT_USER_STREAM_BASE_URL
    java.lang.String DEFAULT_SITE_STREAM_BASE_URL -> DEFAULT_SITE_STREAM_BASE_URL
    boolean IS_DALVIK -> IS_DALVIK
    long serialVersionUID -> serialVersionUID
    java.lang.String dalvikDetected -> dalvikDetected
    java.util.Map requestHeaders -> requestHeaders
    boolean isDalvik() -> isDalvik
    boolean isDebugEnabled() -> isDebugEnabled
    void setDebug(boolean) -> setDebug
    java.lang.String getUserAgent() -> getUserAgent
    void setUserAgent(java.lang.String) -> setUserAgent
    java.lang.String getUser() -> getUser
    void setUser(java.lang.String) -> setUser
    java.lang.String getPassword() -> getPassword
    void setPassword(java.lang.String) -> setPassword
    boolean isPrettyDebugEnabled() -> isPrettyDebugEnabled
    void setUseSSL(boolean) -> setUseSSL
    void setPrettyDebugEnabled(boolean) -> setPrettyDebugEnabled
    void setGZIPEnabled(boolean) -> setGZIPEnabled
    boolean isGZIPEnabled() -> isGZIPEnabled
    void initRequestHeaders() -> initRequestHeaders
    java.util.Map getRequestHeaders() -> getRequestHeaders
    java.lang.String getHttpProxyHost() -> getHttpProxyHost
    void setHttpProxyHost(java.lang.String) -> setHttpProxyHost
    java.lang.String getHttpProxyUser() -> getHttpProxyUser
    void setHttpProxyUser(java.lang.String) -> setHttpProxyUser
    java.lang.String getHttpProxyPassword() -> getHttpProxyPassword
    void setHttpProxyPassword(java.lang.String) -> setHttpProxyPassword
    int getHttpProxyPort() -> getHttpProxyPort
    void setHttpProxyPort(int) -> setHttpProxyPort
    int getHttpConnectionTimeout() -> getHttpConnectionTimeout
    void setHttpConnectionTimeout(int) -> setHttpConnectionTimeout
    int getHttpReadTimeout() -> getHttpReadTimeout
    void setHttpReadTimeout(int) -> setHttpReadTimeout
    int getHttpStreamingReadTimeout() -> getHttpStreamingReadTimeout
    void setHttpStreamingReadTimeout(int) -> setHttpStreamingReadTimeout
    int getHttpRetryCount() -> getHttpRetryCount
    void setHttpRetryCount(int) -> setHttpRetryCount
    int getHttpRetryIntervalSeconds() -> getHttpRetryIntervalSeconds
    void setHttpRetryIntervalSeconds(int) -> setHttpRetryIntervalSeconds
    int getHttpMaxTotalConnections() -> getHttpMaxTotalConnections
    void setHttpMaxTotalConnections(int) -> setHttpMaxTotalConnections
    int getHttpDefaultMaxPerRoute() -> getHttpDefaultMaxPerRoute
    void setHttpDefaultMaxPerRoute(int) -> setHttpDefaultMaxPerRoute
    java.lang.String getOAuthConsumerKey() -> getOAuthConsumerKey
    void setOAuthConsumerKey(java.lang.String) -> setOAuthConsumerKey
    java.lang.String getOAuthConsumerSecret() -> getOAuthConsumerSecret
    void setOAuthConsumerSecret(java.lang.String) -> setOAuthConsumerSecret
    java.lang.String getOAuthAccessToken() -> getOAuthAccessToken
    void setOAuthAccessToken(java.lang.String) -> setOAuthAccessToken
    java.lang.String getOAuthAccessTokenSecret() -> getOAuthAccessTokenSecret
    void setOAuthAccessTokenSecret(java.lang.String) -> setOAuthAccessTokenSecret
    int getAsyncNumThreads() -> getAsyncNumThreads
    void setAsyncNumThreads(int) -> setAsyncNumThreads
    java.lang.String getClientVersion() -> getClientVersion
    void setClientVersion(java.lang.String) -> setClientVersion
    java.lang.String getClientURL() -> getClientURL
    void setClientURL(java.lang.String) -> setClientURL
    java.lang.String getRestBaseURL() -> getRestBaseURL
    void setRestBaseURL(java.lang.String) -> setRestBaseURL
    void fixRestBaseURL() -> fixRestBaseURL
    java.lang.String getSearchBaseURL() -> getSearchBaseURL
    void setSearchBaseURL(java.lang.String) -> setSearchBaseURL
    java.lang.String getStreamBaseURL() -> getStreamBaseURL
    void setStreamBaseURL(java.lang.String) -> setStreamBaseURL
    java.lang.String getUserStreamBaseURL() -> getUserStreamBaseURL
    void setUserStreamBaseURL(java.lang.String) -> setUserStreamBaseURL
    java.lang.String getSiteStreamBaseURL() -> getSiteStreamBaseURL
    void setSiteStreamBaseURL(java.lang.String) -> setSiteStreamBaseURL
    java.lang.String getOAuthRequestTokenURL() -> getOAuthRequestTokenURL
    void setOAuthRequestTokenURL(java.lang.String) -> setOAuthRequestTokenURL
    java.lang.String getOAuthAuthorizationURL() -> getOAuthAuthorizationURL
    void setOAuthAuthorizationURL(java.lang.String) -> setOAuthAuthorizationURL
    java.lang.String getOAuthAccessTokenURL() -> getOAuthAccessTokenURL
    void setOAuthAccessTokenURL(java.lang.String) -> setOAuthAccessTokenURL
    java.lang.String getOAuthAuthenticationURL() -> getOAuthAuthenticationURL
    void setOAuthAuthenticationURL(java.lang.String) -> setOAuthAuthenticationURL
    java.lang.String getDispatcherImpl() -> getDispatcherImpl
    void setDispatcherImpl(java.lang.String) -> setDispatcherImpl
    boolean isIncludeRTsEnabled() -> isIncludeRTsEnabled
    void setIncludeRTsEnbled(boolean) -> setIncludeRTsEnbled
    boolean isIncludeEntitiesEnabled() -> isIncludeEntitiesEnabled
    void setIncludeEntitiesEnbled(boolean) -> setIncludeEntitiesEnbled
    boolean isJSONStoreEnabled() -> isJSONStoreEnabled
    void setJSONStoreEnabled(boolean) -> setJSONStoreEnabled
    boolean isMBeanEnabled() -> isMBeanEnabled
    void setMBeanEnabled(boolean) -> setMBeanEnabled
    boolean isUserStreamRepliesAllEnabled() -> isUserStreamRepliesAllEnabled
    void setUserStreamRepliesAllEnabled(boolean) -> setUserStreamRepliesAllEnabled
    java.lang.String getMediaProvider() -> getMediaProvider
    void setMediaProvider(java.lang.String) -> setMediaProvider
    java.lang.String getMediaProviderAPIKey() -> getMediaProviderAPIKey
    void setMediaProviderAPIKey(java.lang.String) -> setMediaProviderAPIKey
    java.util.Properties getMediaProviderParameters() -> getMediaProviderParameters
    void setMediaProviderParameters(java.util.Properties) -> setMediaProviderParameters
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.String fixURL(boolean,java.lang.String) -> fixURL
twitter4j.conf.ConfigurationBuilder -> twitter4j.conf.ConfigurationBuilder:
    twitter4j.conf.ConfigurationBase configurationBean -> configurationBean
    twitter4j.conf.ConfigurationBuilder setUseSSL(boolean) -> setUseSSL
    twitter4j.conf.ConfigurationBuilder setPrettyDebugEnabled(boolean) -> setPrettyDebugEnabled
    twitter4j.conf.ConfigurationBuilder setGZIPEnabled(boolean) -> setGZIPEnabled
    twitter4j.conf.ConfigurationBuilder setDebugEnabled(boolean) -> setDebugEnabled
    twitter4j.conf.ConfigurationBuilder setUser(java.lang.String) -> setUser
    twitter4j.conf.ConfigurationBuilder setPassword(java.lang.String) -> setPassword
    twitter4j.conf.ConfigurationBuilder setHttpProxyHost(java.lang.String) -> setHttpProxyHost
    twitter4j.conf.ConfigurationBuilder setHttpProxyUser(java.lang.String) -> setHttpProxyUser
    twitter4j.conf.ConfigurationBuilder setHttpProxyPassword(java.lang.String) -> setHttpProxyPassword
    twitter4j.conf.ConfigurationBuilder setHttpProxyPort(int) -> setHttpProxyPort
    twitter4j.conf.ConfigurationBuilder setHttpConnectionTimeout(int) -> setHttpConnectionTimeout
    twitter4j.conf.ConfigurationBuilder setHttpReadTimeout(int) -> setHttpReadTimeout
    twitter4j.conf.ConfigurationBuilder setHttpStreamingReadTimeout(int) -> setHttpStreamingReadTimeout
    twitter4j.conf.ConfigurationBuilder setHttpRetryCount(int) -> setHttpRetryCount
    twitter4j.conf.ConfigurationBuilder setHttpMaxTotalConnections(int) -> setHttpMaxTotalConnections
    twitter4j.conf.ConfigurationBuilder setHttpDefaultMaxPerRoute(int) -> setHttpDefaultMaxPerRoute
    twitter4j.conf.ConfigurationBuilder setHttpRetryIntervalSeconds(int) -> setHttpRetryIntervalSeconds
    twitter4j.conf.ConfigurationBuilder setOAuthConsumerKey(java.lang.String) -> setOAuthConsumerKey
    twitter4j.conf.ConfigurationBuilder setOAuthConsumerSecret(java.lang.String) -> setOAuthConsumerSecret
    twitter4j.conf.ConfigurationBuilder setOAuthAccessToken(java.lang.String) -> setOAuthAccessToken
    twitter4j.conf.ConfigurationBuilder setOAuthAccessTokenSecret(java.lang.String) -> setOAuthAccessTokenSecret
    twitter4j.conf.ConfigurationBuilder setOAuthRequestTokenURL(java.lang.String) -> setOAuthRequestTokenURL
    twitter4j.conf.ConfigurationBuilder setOAuthAuthorizationURL(java.lang.String) -> setOAuthAuthorizationURL
    twitter4j.conf.ConfigurationBuilder setOAuthAccessTokenURL(java.lang.String) -> setOAuthAccessTokenURL
    twitter4j.conf.ConfigurationBuilder setOAuthAuthenticationURL(java.lang.String) -> setOAuthAuthenticationURL
    twitter4j.conf.ConfigurationBuilder setRestBaseURL(java.lang.String) -> setRestBaseURL
    twitter4j.conf.ConfigurationBuilder setSearchBaseURL(java.lang.String) -> setSearchBaseURL
    twitter4j.conf.ConfigurationBuilder setStreamBaseURL(java.lang.String) -> setStreamBaseURL
    twitter4j.conf.ConfigurationBuilder setUserStreamBaseURL(java.lang.String) -> setUserStreamBaseURL
    twitter4j.conf.ConfigurationBuilder setSiteStreamBaseURL(java.lang.String) -> setSiteStreamBaseURL
    twitter4j.conf.ConfigurationBuilder setAsyncNumThreads(int) -> setAsyncNumThreads
    twitter4j.conf.ConfigurationBuilder setClientVersion(java.lang.String) -> setClientVersion
    twitter4j.conf.ConfigurationBuilder setClientURL(java.lang.String) -> setClientURL
    twitter4j.conf.ConfigurationBuilder setDispatcherImpl(java.lang.String) -> setDispatcherImpl
    twitter4j.conf.ConfigurationBuilder setIncludeRTsEnabled(boolean) -> setIncludeRTsEnabled
    twitter4j.conf.ConfigurationBuilder setIncludeEntitiesEnabled(boolean) -> setIncludeEntitiesEnabled
    twitter4j.conf.ConfigurationBuilder setJSONStoreEnabled(boolean) -> setJSONStoreEnabled
    twitter4j.conf.ConfigurationBuilder setMBeanEnabled(boolean) -> setMBeanEnabled
    twitter4j.conf.ConfigurationBuilder setUserStreamRepliesAllEnabled(boolean) -> setUserStreamRepliesAllEnabled
    twitter4j.conf.ConfigurationBuilder setMediaProvider(java.lang.String) -> setMediaProvider
    twitter4j.conf.ConfigurationBuilder setMediaProviderAPIKey(java.lang.String) -> setMediaProviderAPIKey
    twitter4j.conf.ConfigurationBuilder setMediaProviderParameters(java.util.Properties) -> setMediaProviderParameters
    twitter4j.conf.Configuration build() -> build
    void checkNotBuilt() -> checkNotBuilt
twitter4j.conf.ConfigurationContext -> twitter4j.conf.ConfigurationContext:
    java.lang.String DEFAULT_CONFIGURATION_FACTORY -> DEFAULT_CONFIGURATION_FACTORY
    java.lang.String CONFIGURATION_IMPL -> CONFIGURATION_IMPL
    twitter4j.conf.ConfigurationFactory factory -> factory
    twitter4j.conf.Configuration getInstance() -> getInstance
    twitter4j.conf.Configuration getInstance(java.lang.String) -> getInstance
twitter4j.conf.ConfigurationFactory -> twitter4j.conf.b:
    twitter4j.conf.Configuration getInstance() -> getInstance
    twitter4j.conf.Configuration getInstance(java.lang.String) -> getInstance
twitter4j.conf.PropertyConfiguration -> twitter4j.conf.PropertyConfiguration:
    java.lang.String DEBUG -> DEBUG
    java.lang.String HTTP_USER_AGENT -> HTTP_USER_AGENT
    java.lang.String USER -> USER
    java.lang.String PASSWORD -> PASSWORD
    java.lang.String HTTP_USE_SSL -> HTTP_USE_SSL
    java.lang.String HTTP_PRETTY_DEBUG -> HTTP_PRETTY_DEBUG
    java.lang.String HTTP_GZIP -> HTTP_GZIP
    java.lang.String HTTP_PROXY_HOST -> HTTP_PROXY_HOST
    java.lang.String HTTP_PROXY_HOST_FALLBACK -> HTTP_PROXY_HOST_FALLBACK
    java.lang.String HTTP_PROXY_USER -> HTTP_PROXY_USER
    java.lang.String HTTP_PROXY_PASSWORD -> HTTP_PROXY_PASSWORD
    java.lang.String HTTP_PROXY_PORT -> HTTP_PROXY_PORT
    java.lang.String HTTP_PROXY_PORT_FALLBACK -> HTTP_PROXY_PORT_FALLBACK
    java.lang.String HTTP_CONNECTION_TIMEOUT -> HTTP_CONNECTION_TIMEOUT
    java.lang.String HTTP_READ_TIMEOUT -> HTTP_READ_TIMEOUT
    java.lang.String HTTP_STREAMING_READ_TIMEOUT -> HTTP_STREAMING_READ_TIMEOUT
    java.lang.String HTTP_RETRY_COUNT -> HTTP_RETRY_COUNT
    java.lang.String HTTP_RETRY_INTERVAL_SECS -> HTTP_RETRY_INTERVAL_SECS
    java.lang.String HTTP_MAX_TOTAL_CONNECTIONS -> HTTP_MAX_TOTAL_CONNECTIONS
    java.lang.String HTTP_DEFAULT_MAX_PER_ROUTE -> HTTP_DEFAULT_MAX_PER_ROUTE
    java.lang.String OAUTH_CONSUMER_KEY -> OAUTH_CONSUMER_KEY
    java.lang.String OAUTH_CONSUMER_SECRET -> OAUTH_CONSUMER_SECRET
    java.lang.String OAUTH_ACCESS_TOKEN -> OAUTH_ACCESS_TOKEN
    java.lang.String OAUTH_ACCESS_TOKEN_SECRET -> OAUTH_ACCESS_TOKEN_SECRET
    java.lang.String OAUTH_REQUEST_TOKEN_URL -> OAUTH_REQUEST_TOKEN_URL
    java.lang.String OAUTH_AUTHORIZATION_URL -> OAUTH_AUTHORIZATION_URL
    java.lang.String OAUTH_ACCESS_TOKEN_URL -> OAUTH_ACCESS_TOKEN_URL
    java.lang.String OAUTH_AUTHENTICATION_URL -> OAUTH_AUTHENTICATION_URL
    java.lang.String REST_BASE_URL -> REST_BASE_URL
    java.lang.String SEARCH_BASE_URL -> SEARCH_BASE_URL
    java.lang.String STREAM_BASE_URL -> STREAM_BASE_URL
    java.lang.String USER_STREAM_BASE_URL -> USER_STREAM_BASE_URL
    java.lang.String SITE_STREAM_BASE_URL -> SITE_STREAM_BASE_URL
    java.lang.String ASYNC_NUM_THREADS -> ASYNC_NUM_THREADS
    java.lang.String ASYNC_DISPATCHER_IMPL -> ASYNC_DISPATCHER_IMPL
    java.lang.String INCLUDE_RTS -> INCLUDE_RTS
    java.lang.String INCLUDE_ENTITIES -> INCLUDE_ENTITIES
    java.lang.String JSON_STORE_ENABLED -> JSON_STORE_ENABLED
    java.lang.String MBEAN_ENABLED -> MBEAN_ENABLED
    java.lang.String STREAM_USER_REPLIES_ALL -> STREAM_USER_REPLIES_ALL
    java.lang.String MEDIA_PROVIDER -> MEDIA_PROVIDER
    java.lang.String MEDIA_PROVIDER_API_KEY -> MEDIA_PROVIDER_API_KEY
    java.lang.String MEDIA_PROVIDER_PARAMETERS -> MEDIA_PROVIDER_PARAMETERS
    java.lang.String CLIENT_VERSION -> CLIENT_VERSION
    java.lang.String CLIENT_URL -> CLIENT_URL
    long serialVersionUID -> serialVersionUID
    java.lang.Class class$twitter4j$conf$Configuration -> class$twitter4j$conf$Configuration
    boolean notNull(java.util.Properties,java.lang.String,java.lang.String) -> notNull
    boolean loadProperties(java.util.Properties,java.lang.String) -> loadProperties
    boolean loadProperties(java.util.Properties,java.io.InputStream) -> loadProperties
    void normalize(java.util.Properties) -> normalize
    void setFieldsWithTreePath(java.util.Properties,java.lang.String) -> setFieldsWithTreePath
    void setFieldsWithPrefix(java.util.Properties,java.lang.String) -> setFieldsWithPrefix
    boolean getBoolean(java.util.Properties,java.lang.String,java.lang.String) -> getBoolean
    int getIntProperty(java.util.Properties,java.lang.String,java.lang.String) -> getIntProperty
    java.lang.String getString(java.util.Properties,java.lang.String,java.lang.String) -> getString
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.util.Properties getMediaProviderParameters() -> getMediaProviderParameters
    java.lang.String getMediaProviderAPIKey() -> getMediaProviderAPIKey
    java.lang.String getMediaProvider() -> getMediaProvider
    boolean isUserStreamRepliesAllEnabled() -> isUserStreamRepliesAllEnabled
    boolean isMBeanEnabled() -> isMBeanEnabled
    boolean isJSONStoreEnabled() -> isJSONStoreEnabled
    boolean isIncludeEntitiesEnabled() -> isIncludeEntitiesEnabled
    boolean isIncludeRTsEnabled() -> isIncludeRTsEnabled
    java.lang.String getDispatcherImpl() -> getDispatcherImpl
    java.lang.String getOAuthAuthenticationURL() -> getOAuthAuthenticationURL
    java.lang.String getOAuthAccessTokenURL() -> getOAuthAccessTokenURL
    java.lang.String getOAuthAuthorizationURL() -> getOAuthAuthorizationURL
    java.lang.String getOAuthRequestTokenURL() -> getOAuthRequestTokenURL
    java.lang.String getSiteStreamBaseURL() -> getSiteStreamBaseURL
    java.lang.String getUserStreamBaseURL() -> getUserStreamBaseURL
    java.lang.String getStreamBaseURL() -> getStreamBaseURL
    java.lang.String getSearchBaseURL() -> getSearchBaseURL
    java.lang.String getRestBaseURL() -> getRestBaseURL
    java.lang.String getOAuthAccessTokenSecret() -> getOAuthAccessTokenSecret
    java.lang.String getOAuthAccessToken() -> getOAuthAccessToken
    int getHttpStreamingReadTimeout() -> getHttpStreamingReadTimeout
    java.util.Map getRequestHeaders() -> getRequestHeaders
    boolean isGZIPEnabled() -> isGZIPEnabled
    boolean isPrettyDebugEnabled() -> isPrettyDebugEnabled
    java.lang.Class class$(java.lang.String) -> class$
twitter4j.conf.PropertyConfigurationFactory -> twitter4j.conf.PropertyConfigurationFactory:
    twitter4j.conf.PropertyConfiguration ROOT_CONFIGURATION -> ROOT_CONFIGURATION
    twitter4j.conf.Configuration getInstance() -> getInstance
    twitter4j.conf.Configuration getInstance(java.lang.String) -> getInstance
    void dispose() -> dispose
twitter4j.internal.async.Dispatcher -> twitter4j.internal.async.a:
twitter4j.internal.async.DispatcherFactory -> twitter4j.internal.async.DispatcherFactory:
    java.lang.String dispatcherImpl -> dispatcherImpl
    twitter4j.conf.Configuration conf -> conf
    java.lang.Class class$twitter4j$conf$Configuration -> class$twitter4j$conf$Configuration
    twitter4j.internal.async.Dispatcher getInstance() -> getInstance
    java.lang.Class class$(java.lang.String) -> class$
twitter4j.internal.async.DispatcherImpl -> twitter4j.internal.async.DispatcherImpl:
    twitter4j.internal.async.ExecuteThread[] threads -> threads
    java.util.List q -> q
    java.lang.Object ticket -> ticket
    boolean active -> active
    void invokeLater(java.lang.Runnable) -> invokeLater
    java.lang.Runnable poll() -> poll
    void shutdown() -> shutdown
    boolean access$000(twitter4j.internal.async.DispatcherImpl) -> access$000
twitter4j.internal.async.DispatcherImpl$1 -> twitter4j.internal.async.DispatcherImpl$1:
    twitter4j.internal.async.DispatcherImpl this$0 -> this$0
    void run() -> run
twitter4j.internal.async.ExecuteThread -> twitter4j.internal.async.ExecuteThread:
    twitter4j.internal.logging.Logger logger -> logger
    twitter4j.internal.async.DispatcherImpl q -> q
    boolean alive -> alive
    java.lang.Class class$twitter4j$internal$async$ExecuteThread -> class$twitter4j$internal$async$ExecuteThread
    void shutdown() -> shutdown
    void run() -> run
    java.lang.Class class$(java.lang.String) -> class$
twitter4j.internal.http.BASE64Encoder -> twitter4j.internal.http.BASE64Encoder:
    char last2byte -> last2byte
    char last4byte -> last4byte
    char last6byte -> last6byte
    char lead6byte -> lead6byte
    char lead4byte -> lead4byte
    char lead2byte -> lead2byte
    char[] encodeTable -> encodeTable
    java.lang.String encode(byte[]) -> encode
twitter4j.internal.http.HTMLEntity -> twitter4j.internal.http.HTMLEntity:
    java.util.Map entityEscapeMap -> entityEscapeMap
    java.util.Map escapeEntityMap -> escapeEntityMap
    java.lang.String escape(java.lang.String) -> escape
    void escape(java.lang.StringBuffer) -> escape
    java.lang.String unescape(java.lang.String) -> unescape
    void unescape(java.lang.StringBuffer) -> unescape
twitter4j.internal.http.HttpClient -> twitter4j.internal.http.a:
    twitter4j.internal.http.HttpResponse request(twitter4j.internal.http.HttpRequest) -> request
    void shutdown() -> shutdown
twitter4j.internal.http.HttpClientConfiguration -> twitter4j.internal.http.d:
    java.lang.String getHttpProxyHost() -> getHttpProxyHost
    int getHttpProxyPort() -> getHttpProxyPort
    java.lang.String getHttpProxyUser() -> getHttpProxyUser
    java.lang.String getHttpProxyPassword() -> getHttpProxyPassword
    int getHttpConnectionTimeout() -> getHttpConnectionTimeout
    int getHttpReadTimeout() -> getHttpReadTimeout
    int getHttpRetryCount() -> getHttpRetryCount
    int getHttpRetryIntervalSeconds() -> getHttpRetryIntervalSeconds
    boolean isPrettyDebugEnabled() -> isPrettyDebugEnabled
twitter4j.internal.http.HttpClientFactory -> twitter4j.internal.http.HttpClientFactory:
    java.lang.reflect.Constructor HTTP_CLIENT_CONSTRUCTOR -> HTTP_CLIENT_CONSTRUCTOR
    twitter4j.internal.logging.Logger logger -> logger
    java.lang.Class class$twitter4j$internal$http$HttpClientFactory -> class$twitter4j$internal$http$HttpClientFactory
    java.lang.Class class$twitter4j$internal$http$HttpClientConfiguration -> class$twitter4j$internal$http$HttpClientConfiguration
    twitter4j.internal.http.HttpClient getInstance(twitter4j.internal.http.HttpClientConfiguration) -> getInstance
    java.lang.Class class$(java.lang.String) -> class$
twitter4j.internal.http.HttpClientImpl -> twitter4j.internal.http.HttpClientImpl:
    twitter4j.internal.logging.Logger logger -> logger
    boolean isJDK14orEarlier -> isJDK14orEarlier
    twitter4j.internal.http.HttpClientConfiguration CONF -> CONF
    long serialVersionUID -> serialVersionUID
    java.util.Map instanceMap -> instanceMap
    java.lang.Class class$twitter4j$internal$http$HttpClientImpl -> class$twitter4j$internal$http$HttpClientImpl
    void shutdown() -> shutdown
    twitter4j.internal.http.HttpClient getInstance(twitter4j.internal.http.HttpClientConfiguration) -> getInstance
    twitter4j.internal.http.HttpResponse get(java.lang.String) -> get
    twitter4j.internal.http.HttpResponse post(java.lang.String,twitter4j.internal.http.HttpParameter[]) -> post
    twitter4j.internal.http.HttpResponse request(twitter4j.internal.http.HttpRequest) -> request
    void write(java.io.DataOutputStream,java.lang.String) -> write
    java.lang.String encode(java.lang.String) -> encode
    void setHeaders(twitter4j.internal.http.HttpRequest,java.net.HttpURLConnection) -> setHeaders
    java.net.HttpURLConnection getConnection(java.lang.String) -> getConnection
    boolean isProxyConfigured() -> isProxyConfigured
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Class class$(java.lang.String) -> class$
    twitter4j.internal.http.HttpClientConfiguration access$000(twitter4j.internal.http.HttpClientImpl) -> access$000
twitter4j.internal.http.HttpClientImpl$1 -> twitter4j.internal.http.HttpClientImpl$1:
    twitter4j.internal.http.HttpClientImpl this$0 -> this$0
    java.net.PasswordAuthentication getPasswordAuthentication() -> getPasswordAuthentication
twitter4j.internal.http.HttpClientWrapper -> twitter4j.internal.http.HttpClientWrapper:
    twitter4j.internal.http.HttpClientWrapperConfiguration wrapperConf -> wrapperConf
    twitter4j.internal.http.HttpClient http -> http
    java.util.Map requestHeaders -> requestHeaders
    long serialVersionUID -> serialVersionUID
    twitter4j.internal.http.HttpResponseListener httpResponseListener -> httpResponseListener
    void shutdown() -> shutdown
    twitter4j.internal.http.HttpResponse request(twitter4j.internal.http.HttpRequest) -> request
    void setHttpResponseListener(twitter4j.internal.http.HttpResponseListener) -> setHttpResponseListener
    twitter4j.internal.http.HttpResponse get(java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.auth.Authorization) -> get
    twitter4j.internal.http.HttpResponse get(java.lang.String,twitter4j.internal.http.HttpParameter[]) -> get
    twitter4j.internal.http.HttpResponse get(java.lang.String,twitter4j.auth.Authorization) -> get
    twitter4j.internal.http.HttpResponse get(java.lang.String) -> get
    twitter4j.internal.http.HttpResponse post(java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.auth.Authorization) -> post
    twitter4j.internal.http.HttpResponse post(java.lang.String,twitter4j.internal.http.HttpParameter[]) -> post
    twitter4j.internal.http.HttpResponse post(java.lang.String,twitter4j.internal.http.HttpParameter[],java.util.Map) -> post
    twitter4j.internal.http.HttpResponse post(java.lang.String,twitter4j.auth.Authorization) -> post
    twitter4j.internal.http.HttpResponse post(java.lang.String) -> post
    twitter4j.internal.http.HttpResponse delete(java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.auth.Authorization) -> delete
    twitter4j.internal.http.HttpResponse delete(java.lang.String,twitter4j.internal.http.HttpParameter[]) -> delete
    twitter4j.internal.http.HttpResponse delete(java.lang.String,twitter4j.auth.Authorization) -> delete
    twitter4j.internal.http.HttpResponse delete(java.lang.String) -> delete
    twitter4j.internal.http.HttpResponse head(java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.auth.Authorization) -> head
    twitter4j.internal.http.HttpResponse head(java.lang.String,twitter4j.internal.http.HttpParameter[]) -> head
    twitter4j.internal.http.HttpResponse head(java.lang.String,twitter4j.auth.Authorization) -> head
    twitter4j.internal.http.HttpResponse head(java.lang.String) -> head
    twitter4j.internal.http.HttpResponse put(java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.auth.Authorization) -> put
    twitter4j.internal.http.HttpResponse put(java.lang.String,twitter4j.internal.http.HttpParameter[]) -> put
    twitter4j.internal.http.HttpResponse put(java.lang.String,twitter4j.auth.Authorization) -> put
    twitter4j.internal.http.HttpResponse put(java.lang.String) -> put
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.internal.http.HttpClientWrapperConfiguration -> twitter4j.internal.http.b:
    java.util.Map getRequestHeaders() -> getRequestHeaders
twitter4j.internal.http.HttpParameter -> twitter4j.internal.http.HttpParameter:
    java.lang.String name -> name
    java.lang.String value -> value
    java.io.File file -> file
    java.io.InputStream fileBody -> fileBody
    long serialVersionUID -> serialVersionUID
    java.lang.String JPEG -> JPEG
    java.lang.String GIF -> GIF
    java.lang.String PNG -> PNG
    java.lang.String OCTET -> OCTET
    java.lang.String getName() -> getName
    java.lang.String getValue() -> getValue
    java.io.File getFile() -> getFile
    java.io.InputStream getFileBody() -> getFileBody
    boolean isFile() -> isFile
    boolean hasFileBody() -> hasFileBody
    java.lang.String getContentType() -> getContentType
    boolean equals(java.lang.Object) -> equals
    boolean containsFile(twitter4j.internal.http.HttpParameter[]) -> containsFile
    boolean containsFile(java.util.List) -> containsFile
    twitter4j.internal.http.HttpParameter[] getParameterArray(java.lang.String,java.lang.String) -> getParameterArray
    twitter4j.internal.http.HttpParameter[] getParameterArray(java.lang.String,int) -> getParameterArray
    twitter4j.internal.http.HttpParameter[] getParameterArray(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> getParameterArray
    twitter4j.internal.http.HttpParameter[] getParameterArray(java.lang.String,int,java.lang.String,int) -> getParameterArray
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
    java.lang.String encodeParameters(twitter4j.internal.http.HttpParameter[]) -> encodeParameters
    java.lang.String encode(java.lang.String) -> encode
twitter4j.internal.http.HttpRequest -> twitter4j.internal.http.HttpRequest:
    twitter4j.internal.http.RequestMethod method -> method
    java.lang.String url -> url
    twitter4j.internal.http.HttpParameter[] parameters -> parameters
    twitter4j.auth.Authorization authorization -> authorization
    java.util.Map requestHeaders -> requestHeaders
    long serialVersionUID -> serialVersionUID
    twitter4j.internal.http.HttpParameter[] NULL_PARAMETERS -> NULL_PARAMETERS
    twitter4j.internal.http.RequestMethod getMethod() -> getMethod
    twitter4j.internal.http.HttpParameter[] getParameters() -> getParameters
    java.lang.String getURL() -> getURL
    twitter4j.auth.Authorization getAuthorization() -> getAuthorization
    java.util.Map getRequestHeaders() -> getRequestHeaders
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.internal.http.HttpResponse -> twitter4j.internal.http.HttpResponse:
    twitter4j.internal.logging.Logger logger -> logger
    twitter4j.internal.http.HttpClientConfiguration CONF -> CONF
    int statusCode -> statusCode
    java.lang.String responseAsString -> responseAsString
    java.io.InputStream is -> is
    boolean streamConsumed -> streamConsumed
    org.json.JSONObject json -> json
    java.lang.Class class$twitter4j$internal$http$HttpResponseImpl -> class$twitter4j$internal$http$HttpResponseImpl
    int getStatusCode() -> getStatusCode
    java.lang.String getResponseHeader(java.lang.String) -> getResponseHeader
    java.util.Map getResponseHeaderFields() -> getResponseHeaderFields
    java.io.InputStream asStream() -> asStream
    java.lang.String asString() -> asString
    org.json.JSONObject asJSONObject() -> asJSONObject
    org.json.JSONArray asJSONArray() -> asJSONArray
    java.io.InputStreamReader asReader() -> asReader
    void disconnectForcibly() -> disconnectForcibly
    void disconnect() -> disconnect
    java.lang.String toString() -> toString
    java.lang.Class class$(java.lang.String) -> class$
twitter4j.internal.http.HttpResponseEvent -> twitter4j.internal.http.HttpResponseEvent:
    twitter4j.internal.http.HttpRequest request -> request
    twitter4j.internal.http.HttpResponse response -> response
    twitter4j.TwitterException twitterException -> twitterException
    twitter4j.internal.http.HttpRequest getRequest() -> getRequest
    twitter4j.internal.http.HttpResponse getResponse() -> getResponse
    twitter4j.TwitterException getTwitterException() -> getTwitterException
    boolean isAuthenticated() -> isAuthenticated
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.internal.http.HttpResponseImpl -> twitter4j.internal.http.HttpResponseImpl:
    java.net.HttpURLConnection con -> con
    java.lang.String getResponseHeader(java.lang.String) -> getResponseHeader
    java.util.Map getResponseHeaderFields() -> getResponseHeaderFields
    void disconnect() -> disconnect
twitter4j.internal.http.HttpResponseListener -> twitter4j.internal.http.c:
    void httpResponseReceived(twitter4j.internal.http.HttpResponseEvent) -> httpResponseReceived
twitter4j.internal.http.RequestMethod -> twitter4j.internal.http.RequestMethod:
    java.lang.String name -> name
    java.util.Map instances -> instances
    twitter4j.internal.http.RequestMethod GET -> GET
    twitter4j.internal.http.RequestMethod POST -> POST
    twitter4j.internal.http.RequestMethod DELETE -> DELETE
    twitter4j.internal.http.RequestMethod HEAD -> HEAD
    twitter4j.internal.http.RequestMethod PUT -> PUT
    long serialVersionUID -> serialVersionUID
    java.lang.String name() -> name
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    twitter4j.internal.http.RequestMethod getInstance(java.lang.String) -> getInstance
    java.lang.Object readResolve() -> readResolve
twitter4j.internal.http.XAuthAuthorization -> twitter4j.internal.http.XAuthAuthorization:
    twitter4j.auth.BasicAuthorization basic -> basic
    java.lang.String consumerKey -> consumerKey
    java.lang.String consumerSecret -> consumerSecret
    long serialVersionUID -> serialVersionUID
    java.lang.String getAuthorizationHeader(twitter4j.internal.http.HttpRequest) -> getAuthorizationHeader
    java.lang.String getUserId() -> getUserId
    java.lang.String getPassword() -> getPassword
    java.lang.String getConsumerKey() -> getConsumerKey
    java.lang.String getConsumerSecret() -> getConsumerSecret
    void setOAuthConsumer(java.lang.String,java.lang.String) -> setOAuthConsumer
    boolean isEnabled() -> isEnabled
twitter4j.internal.json.DataObjectFactoryUtil -> twitter4j.internal.json.DataObjectFactoryUtil:
    java.lang.reflect.Method CLEAR_THREAD_LOCAL_MAP -> CLEAR_THREAD_LOCAL_MAP
    java.lang.reflect.Method REGISTER_JSON_OBJECT -> REGISTER_JSON_OBJECT
    java.lang.Class class$twitter4j$json$DataObjectFactory -> class$twitter4j$json$DataObjectFactory
    void clearThreadLocalMap() -> clearThreadLocalMap
    java.lang.Object registerJSONObject(java.lang.Object,java.lang.Object) -> registerJSONObject
    java.lang.Class class$(java.lang.String) -> class$
twitter4j.internal.logging.CommonsLoggingLogger -> twitter4j.internal.logging.CommonsLoggingLogger:
    org.apache.commons.logging.Log LOGGER -> LOGGER
    boolean isDebugEnabled() -> isDebugEnabled
    boolean isInfoEnabled() -> isInfoEnabled
    boolean isWarnEnabled() -> isWarnEnabled
    void debug(java.lang.String) -> debug
    void debug(java.lang.String,java.lang.String) -> debug
    void info(java.lang.String) -> info
    void info(java.lang.String,java.lang.String) -> info
    void warn(java.lang.String) -> warn
    void warn(java.lang.String,java.lang.String) -> warn
    void error(java.lang.String) -> error
    void error(java.lang.String,java.lang.Throwable) -> error
twitter4j.internal.logging.Log4JLogger -> twitter4j.internal.logging.Log4JLogger:
    org.apache.log4j.Logger LOGGER -> LOGGER
    boolean isDebugEnabled() -> isDebugEnabled
    boolean isInfoEnabled() -> isInfoEnabled
    boolean isWarnEnabled() -> isWarnEnabled
    void debug(java.lang.String) -> debug
    void debug(java.lang.String,java.lang.String) -> debug
    void info(java.lang.String) -> info
    void info(java.lang.String,java.lang.String) -> info
    void warn(java.lang.String) -> warn
    void warn(java.lang.String,java.lang.String) -> warn
    void error(java.lang.String) -> error
    void error(java.lang.String,java.lang.Throwable) -> error
twitter4j.internal.logging.Logger -> twitter4j.internal.logging.Logger:
    twitter4j.internal.logging.LoggerFactory LOGGER_FACTORY -> LOGGER_FACTORY
    java.lang.String LOGGER_FACTORY_IMPLEMENTATION -> LOGGER_FACTORY_IMPLEMENTATION
    java.lang.Class class$twitter4j$internal$logging$Logger -> class$twitter4j$internal$logging$Logger
    twitter4j.internal.logging.LoggerFactory getLoggerFactory(java.lang.String,java.lang.String) -> getLoggerFactory
    twitter4j.internal.logging.Logger getLogger(java.lang.Class) -> getLogger
    boolean isDebugEnabled() -> isDebugEnabled
    boolean isInfoEnabled() -> isInfoEnabled
    boolean isWarnEnabled() -> isWarnEnabled
    void debug(java.lang.String) -> debug
    void debug(java.lang.String,java.lang.String) -> debug
    void info(java.lang.String) -> info
    void info(java.lang.String,java.lang.String) -> info
    void warn(java.lang.String) -> warn
    void warn(java.lang.String,java.lang.String) -> warn
    void error(java.lang.String) -> error
    void error(java.lang.String,java.lang.Throwable) -> error
    java.lang.Class class$(java.lang.String) -> class$
twitter4j.internal.logging.LoggerFactory -> twitter4j.internal.logging.a:
    twitter4j.internal.logging.Logger getLogger(java.lang.Class) -> getLogger
twitter4j.internal.logging.NullLogger -> twitter4j.internal.logging.b:
    boolean isDebugEnabled() -> isDebugEnabled
    boolean isInfoEnabled() -> isInfoEnabled
    boolean isWarnEnabled() -> isWarnEnabled
    void debug(java.lang.String) -> debug
    void debug(java.lang.String,java.lang.String) -> debug
    void info(java.lang.String) -> info
    void info(java.lang.String,java.lang.String) -> info
    void warn(java.lang.String) -> warn
    void warn(java.lang.String,java.lang.String) -> warn
    void error(java.lang.String) -> error
    void error(java.lang.String,java.lang.Throwable) -> error
twitter4j.internal.logging.NullLoggerFactory -> twitter4j.internal.logging.NullLoggerFactory:
    twitter4j.internal.logging.Logger SINGLETON -> SINGLETON
    twitter4j.internal.logging.Logger getLogger(java.lang.Class) -> getLogger
twitter4j.internal.logging.SLF4JLogger -> twitter4j.internal.logging.SLF4JLogger:
    org.slf4j.Logger LOGGER -> LOGGER
    boolean isDebugEnabled() -> isDebugEnabled
    boolean isInfoEnabled() -> isInfoEnabled
    boolean isWarnEnabled() -> isWarnEnabled
    void debug(java.lang.String) -> debug
    void debug(java.lang.String,java.lang.String) -> debug
    void info(java.lang.String) -> info
    void info(java.lang.String,java.lang.String) -> info
    void warn(java.lang.String) -> warn
    void warn(java.lang.String,java.lang.String) -> warn
    void error(java.lang.String) -> error
    void error(java.lang.String,java.lang.Throwable) -> error
twitter4j.internal.logging.StdOutLogger -> twitter4j.internal.logging.StdOutLogger:
    boolean DEBUG -> DEBUG
    boolean isDebugEnabled() -> isDebugEnabled
    boolean isInfoEnabled() -> isInfoEnabled
    boolean isWarnEnabled() -> isWarnEnabled
    void debug(java.lang.String) -> debug
    void debug(java.lang.String,java.lang.String) -> debug
    void info(java.lang.String) -> info
    void info(java.lang.String,java.lang.String) -> info
    void warn(java.lang.String) -> warn
    void warn(java.lang.String,java.lang.String) -> warn
    void error(java.lang.String) -> error
    void error(java.lang.String,java.lang.Throwable) -> error
twitter4j.internal.logging.StdOutLoggerFactory -> twitter4j.internal.logging.StdOutLoggerFactory:
    twitter4j.internal.logging.Logger SINGLETON -> SINGLETON
    twitter4j.internal.logging.Logger getLogger(java.lang.Class) -> getLogger
twitter4j.internal.util.ParseUtil -> twitter4j.internal.util.ParseUtil:
    java.lang.ThreadLocal formatMap -> formatMap
    java.lang.String getUnescapedString(java.lang.String,org.json.JSONObject) -> getUnescapedString
    java.lang.String getRawString(java.lang.String,org.json.JSONObject) -> getRawString
    java.lang.String getURLDecodedString(java.lang.String,org.json.JSONObject) -> getURLDecodedString
    java.util.Date getDate(java.lang.String,org.json.JSONObject) -> getDate
    java.util.Date getDate(java.lang.String,org.json.JSONObject,java.lang.String) -> getDate
    java.util.Date getDate(java.lang.String,java.lang.String) -> getDate
    int getInt(java.lang.String,org.json.JSONObject) -> getInt
    int getInt(java.lang.String) -> getInt
    long getLong(java.lang.String,org.json.JSONObject) -> getLong
    long getLong(java.lang.String) -> getLong
    double getDouble(java.lang.String,org.json.JSONObject) -> getDouble
    boolean getBoolean(java.lang.String,org.json.JSONObject) -> getBoolean
twitter4j.internal.util.ParseUtil$1 -> twitter4j.internal.util.b:
    java.lang.Object initialValue() -> initialValue
twitter4j.internal.util.T4JInternalStringUtil -> twitter4j.internal.util.a:
    java.lang.String maskString(java.lang.String) -> a
    java.lang.String[] split(java.lang.String,java.lang.String) -> a
    java.lang.String join(long[]) -> a
    java.lang.String join(java.lang.String[]) -> a
twitter4j.json.DataObjectFactory -> twitter4j.json.DataObjectFactory:
    java.lang.reflect.Constructor statusConstructor -> statusConstructor
    java.lang.reflect.Constructor userConstructor -> userConstructor
    java.lang.reflect.Constructor tweetConstructor -> tweetConstructor
    java.lang.reflect.Constructor relationshipConstructor -> relationshipConstructor
    java.lang.reflect.Constructor placeConstructor -> placeConstructor
    java.lang.reflect.Constructor savedSearchConstructor -> savedSearchConstructor
    java.lang.reflect.Constructor trendConstructor -> trendConstructor
    java.lang.reflect.Constructor trendsConstructor -> trendsConstructor
    java.lang.reflect.Constructor IDsConstructor -> IDsConstructor
    java.lang.reflect.Constructor rateLimitStatusConstructor -> rateLimitStatusConstructor
    java.lang.reflect.Constructor categoryConstructor -> categoryConstructor
    java.lang.reflect.Constructor directMessageConstructor -> directMessageConstructor
    java.lang.reflect.Constructor locationConstructor -> locationConstructor
    java.lang.reflect.Constructor userListConstructor -> userListConstructor
    java.lang.reflect.Constructor relatedResultsConstructor -> relatedResultsConstructor
    java.lang.reflect.Constructor statusDeletionNoticeConstructor -> statusDeletionNoticeConstructor
    java.lang.reflect.Constructor accountTotalsConstructor -> accountTotalsConstructor
    java.lang.ThreadLocal rawJsonMap -> rawJsonMap
    java.lang.Class class$org$json$JSONObject -> class$org$json$JSONObject
    java.lang.Class class$java$lang$String -> class$java$lang$String
    java.lang.Class class$org$json$JSONArray -> class$org$json$JSONArray
    java.lang.String getRawJSON(java.lang.Object) -> getRawJSON
    twitter4j.Status createStatus(java.lang.String) -> createStatus
    twitter4j.User createUser(java.lang.String) -> createUser
    twitter4j.AccountTotals createAccountTotals(java.lang.String) -> createAccountTotals
    twitter4j.Tweet createTweet(java.lang.String) -> createTweet
    twitter4j.Relationship createRelationship(java.lang.String) -> createRelationship
    twitter4j.Place createPlace(java.lang.String) -> createPlace
    twitter4j.SavedSearch createSavedSearch(java.lang.String) -> createSavedSearch
    twitter4j.Trend createTrend(java.lang.String) -> createTrend
    twitter4j.Trends createTrends(java.lang.String) -> createTrends
    twitter4j.IDs createIDs(java.lang.String) -> createIDs
    twitter4j.RateLimitStatus createRateLimitStatus(java.lang.String) -> createRateLimitStatus
    twitter4j.Category createCategory(java.lang.String) -> createCategory
    twitter4j.DirectMessage createDirectMessage(java.lang.String) -> createDirectMessage
    twitter4j.Location createLocation(java.lang.String) -> createLocation
    twitter4j.UserList createUserList(java.lang.String) -> createUserList
    twitter4j.RelatedResults createRelatedResults(java.lang.String) -> createRelatedResults
    java.lang.Object createObject(java.lang.String) -> createObject
    void clearThreadLocalMap() -> clearThreadLocalMap
    java.lang.Object registerJSONObject(java.lang.Object,java.lang.Object) -> registerJSONObject
    java.lang.Class class$(java.lang.String) -> class$
twitter4j.json.DataObjectFactory$1 -> twitter4j.json.a:
    java.lang.Object initialValue() -> initialValue
twitter4j.json.JSONObjectType -> twitter4j.json.JSONObjectType:
    twitter4j.internal.logging.Logger logger -> logger
    twitter4j.json.JSONObjectType SENDER -> SENDER
    twitter4j.json.JSONObjectType STATUS -> STATUS
    twitter4j.json.JSONObjectType DIRECT_MESSAGE -> DIRECT_MESSAGE
    twitter4j.json.JSONObjectType DELETE -> DELETE
    twitter4j.json.JSONObjectType LIMIT -> LIMIT
    twitter4j.json.JSONObjectType SCRUB_GEO -> SCRUB_GEO
    twitter4j.json.JSONObjectType FRIENDS -> FRIENDS
    twitter4j.json.JSONObjectType FAVORITE -> FAVORITE
    twitter4j.json.JSONObjectType UNFAVORITE -> UNFAVORITE
    twitter4j.json.JSONObjectType RETWEET -> RETWEET
    twitter4j.json.JSONObjectType FOLLOW -> FOLLOW
    twitter4j.json.JSONObjectType UNFOLLOW -> UNFOLLOW
    twitter4j.json.JSONObjectType USER_LIST_MEMBER_ADDED -> USER_LIST_MEMBER_ADDED
    twitter4j.json.JSONObjectType USER_LIST_MEMBER_DELETED -> USER_LIST_MEMBER_DELETED
    twitter4j.json.JSONObjectType USER_LIST_SUBSCRIBED -> USER_LIST_SUBSCRIBED
    twitter4j.json.JSONObjectType USER_LIST_UNSUBSCRIBED -> USER_LIST_UNSUBSCRIBED
    twitter4j.json.JSONObjectType USER_LIST_CREATED -> USER_LIST_CREATED
    twitter4j.json.JSONObjectType USER_LIST_UPDATED -> USER_LIST_UPDATED
    twitter4j.json.JSONObjectType USER_LIST_DESTROYED -> USER_LIST_DESTROYED
    twitter4j.json.JSONObjectType USER_UPDATE -> USER_UPDATE
    twitter4j.json.JSONObjectType BLOCK -> BLOCK
    twitter4j.json.JSONObjectType UNBLOCK -> UNBLOCK
    long serialVersionUID -> serialVersionUID
    java.lang.String name -> name
    java.lang.Class class$twitter4j$json$JSONObjectType -> class$twitter4j$json$JSONObjectType
    java.lang.String getName() -> getName
    twitter4j.json.JSONObjectType determine(org.json.JSONObject) -> determine
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Class class$(java.lang.String) -> class$
twitter4j.management.APIStatistics -> twitter4j.management.APIStatistics:
    twitter4j.management.InvocationStatisticsCalculator API_STATS_CALCULATOR -> API_STATS_CALCULATOR
    java.util.Map METHOD_STATS_MAP -> METHOD_STATS_MAP
    int HISTORY_SIZE -> HISTORY_SIZE
    void methodCalled(java.lang.String,long,boolean) -> methodCalled
    twitter4j.management.InvocationStatisticsCalculator getMethodStatistics(java.lang.String) -> getMethodStatistics
    java.lang.Iterable getInvocationStatistics() -> getInvocationStatistics
    void reset() -> reset
    java.lang.String getName() -> getName
    long getCallCount() -> getCallCount
    long getErrorCount() -> getErrorCount
    long getTotalTime() -> getTotalTime
    long getAverageTime() -> getAverageTime
    java.util.Map getMethodLevelSummariesAsString() -> getMethodLevelSummariesAsString
    java.lang.String getMethodLevelSummary(java.lang.String) -> getMethodLevelSummary
twitter4j.management.APIStatisticsMBean -> twitter4j.management.b:
    java.lang.Iterable getInvocationStatistics() -> getInvocationStatistics
twitter4j.management.APIStatisticsOpenMBean -> twitter4j.management.APIStatisticsOpenMBean:
    java.lang.String[] ITEM_NAMES -> ITEM_NAMES
    javax.management.openmbean.OpenType[] ITEM_TYPES -> ITEM_TYPES
    java.lang.String[] ITEM_DESCRIPTIONS -> ITEM_DESCRIPTIONS
    javax.management.openmbean.CompositeType METHOD_STATS_TYPE -> METHOD_STATS_TYPE
    twitter4j.management.APIStatisticsMBean API_STATISTICS -> API_STATISTICS
    javax.management.openmbean.TabularType API_STATISTICS_TYPE -> API_STATISTICS_TYPE
    javax.management.MBeanInfo getMBeanInfo() -> getMBeanInfo
    javax.management.openmbean.TabularDataSupport getStatistics() -> getStatistics
    void reset() -> reset
    java.lang.Object getAttribute(java.lang.String) -> getAttribute
    javax.management.AttributeList getAttributes(java.lang.String[]) -> getAttributes
    java.lang.Object invoke(java.lang.String,java.lang.Object[],java.lang.String[]) -> invoke
    void setAttribute(javax.management.Attribute) -> setAttribute
    javax.management.AttributeList setAttributes(javax.management.AttributeList) -> setAttributes
twitter4j.management.InvocationStatistics -> twitter4j.management.a:
    java.lang.String getName() -> getName
    long getCallCount() -> getCallCount
    long getErrorCount() -> getErrorCount
    long getTotalTime() -> getTotalTime
    long getAverageTime() -> getAverageTime
    void reset() -> reset
twitter4j.management.InvocationStatisticsCalculator -> twitter4j.management.InvocationStatisticsCalculator:
    java.lang.String name -> name
    long[] times -> times
    int index -> index
    long callCount -> callCount
    long errorCount -> errorCount
    long totalTime -> totalTime
    void increment(long,boolean) -> increment
    java.lang.String getName() -> getName
    long getCallCount() -> getCallCount
    long getErrorCount() -> getErrorCount
    long getTotalTime() -> getTotalTime
    long getAverageTime() -> getAverageTime
    void reset() -> reset
    java.lang.String toString() -> toString
twitter4j.util.TimeSpanConverter -> twitter4j.util.TimeSpanConverter:
    int ONE_HOUR_IN_SECONDS -> ONE_HOUR_IN_SECONDS
    int ONE_DAY_IN_SECONDS -> ONE_DAY_IN_SECONDS
    int ONE_MONTH_IN_SECONDS -> ONE_MONTH_IN_SECONDS
    long serialVersionUID -> serialVersionUID
    java.text.MessageFormat[] formats -> formats
    java.text.SimpleDateFormat dateMonth -> dateMonth
    java.text.SimpleDateFormat dateMonthYear -> dateMonthYear
    int NOW -> NOW
    int N_SECONDS_AGO -> N_SECONDS_AGO
    int A_MINUTE_AGO -> A_MINUTE_AGO
    int N_MINUTES_AGO -> N_MINUTES_AGO
    int AN_HOUR_AGO -> AN_HOUR_AGO
    int N_HOURS_AGO -> N_HOURS_AGO
    java.lang.String toTimeSpanString(java.util.Date) -> toTimeSpanString
    java.lang.String toTimeSpanString(long) -> toTimeSpanString
    java.lang.String toTimeSpanString(int) -> toTimeSpanString
